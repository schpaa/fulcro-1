["^ ","~:output",["^ ","~:js","goog.provide('taoensso.timbre');\nif(cljs.core.vector_QMARK_(taoensso.encore.encore_version)){\ntaoensso.encore.assert_min_encore_version(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(87),(0)], null));\n} else {\ntaoensso.encore.assert_min_encore_version(2.87);\n}\n/**\n * Default (fn [data]) -> string output fn.\n *   Use`(partial default-output-fn <opts-map>)` to modify default opts.\n */\ntaoensso.timbre.default_output_fn = (function taoensso$timbre$default_output_fn(var_args){\nvar G__50428 = arguments.length;\nswitch (G__50428) {\ncase 1:\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1 = (function (data){\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2(null,data);\n}));\n\n(taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2 = (function (opts,data){\nvar map__50432 = opts;\nvar map__50432__$1 = (((((!((map__50432 == null))))?(((((map__50432.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__50432.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__50432):map__50432);\nvar no_stacktrace_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50432__$1,new cljs.core.Keyword(null,\"no-stacktrace?\",\"no-stacktrace?\",1701072694));\nvar stacktrace_fonts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50432__$1,new cljs.core.Keyword(null,\"stacktrace-fonts\",\"stacktrace-fonts\",830799382));\nvar map__50433 = data;\nvar map__50433__$1 = (((((!((map__50433 == null))))?(((((map__50433.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__50433.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__50433):map__50433);\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\nvar _QMARK_file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675));\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50433__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\nreturn [clojure.string.upper_case(cljs.core.name(level)),\" \",\"[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = _QMARK_ns_str;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = _QMARK_file;\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn \"?\";\n}\n}\n})()),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = _QMARK_line;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \"?\";\n}\n})()),\"] - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(cljs.core.truth_(no_stacktrace_QMARK_)?null:(function (){var temp__5735__auto__ = _QMARK_err;\nif(cljs.core.truth_(temp__5735__auto__)){\nvar err = temp__5735__auto__;\nreturn [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,opts) : taoensso.timbre.stacktrace.call(null,err,opts)))].join('');\n} else {\nreturn null;\n}\n})())].join('');\n}));\n\n(taoensso.timbre.default_output_fn.cljs$lang$maxFixedArity = 2);\n\n\ntaoensso.timbre.println_appender = taoensso.timbre.appenders.core.println_appender;\ntaoensso.timbre.console_appender = taoensso.timbre.appenders.core.console_appender;\n/**\n * Example (+default) Timbre v4 config map.\n * \n *   APPENDERS\n *  An appender is a map with keys:\n *    :min-level       ; Level keyword, or nil (=> no minimum level)\n *    :enabled?        ;\n *    :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n *    :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n *    :output-fn       ; Optional override for inherited (fn [data]) -> string\n *    :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n *    :ns-whitelist    ; Optional, stacks with active config's whitelist\n *    :ns-blacklist    ; Optional, stacks with active config's blacklist\n *    :fn              ; (fn [data]) -> side effects, with keys described below\n * \n *  An appender's fn takes a single data map with keys:\n *    :config          ; Entire config map (this map, etc.)\n *    :appender-id     ; Id of appender currently dispatching\n *    :appender        ; Entire map of appender currently dispatching\n *    :instant         ; Platform date (java.util.Date or js/Date)\n *    :level           ; Keyword\n *    :error-level?    ; Is level e/o #{:error :fatal}?\n *    :?ns-str         ; String,  or nil\n *    :?file           ; String,  or nil\n *    :?line           ; Integer, or nil ; Waiting on CLJ-865\n *    :?err            ; First-arg platform error, or nil\n *    :vargs           ; Vector of raw args\n *    :output_         ; Forceable - final formatted output string created\n *                     ; by calling (output-fn <this-data-map>)\n *    :msg_            ; Forceable - args as a string\n *    :timestamp_      ; Forceable - string (clj only)\n *    :hostname_       ; Forceable - string (clj only)\n *    :output-fn       ; (fn [data]) -> formatted output string\n *                     ; (see `default-output-fn` for details)\n *    :context         ; *context* value at log time (see `with-context`)\n * \n *    **NB** - any keys not specifically documented here should be\n *    considered private / subject to change without notice.\n * \n *   MIDDLEWARE\n *  Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n *  transform the data map dispatched to appender fns. If any middleware\n *  returns nil, NO dispatch will occur (i.e. the event will be filtered).\n * \n *   The `example-config` source code contains further settings and details.\n *   See also `set-config!`, `merge-config!`, `set-level!`.\n */\ntaoensso.timbre.example_config = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"console\",\"console\",1228072057),(function (){var G__50442 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1(G__50442) : taoensso.timbre.console_appender.call(null,G__50442));\n})()], null)], null);\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre._STAR_config_STAR_ !== 'undefined')){\n} else {\n/**\n * See `example-config` for info.\n */\ntaoensso.timbre._STAR_config_STAR_ = taoensso.timbre.example_config;\n}\ntaoensso.timbre.swap_config_BANG_ = (function taoensso$timbre$swap_config_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___50493 = arguments.length;\nvar i__4737__auto___50494 = (0);\nwhile(true){\nif((i__4737__auto___50494 < len__4736__auto___50493)){\nargs__4742__auto__.push((arguments[i__4737__auto___50494]));\n\nvar G__50495 = (i__4737__auto___50494 + (1));\ni__4737__auto___50494 = G__50495;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn taoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(taoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn (taoensso.timbre._STAR_config_STAR_ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,taoensso.timbre._STAR_config_STAR_,args));\n}));\n\n(taoensso.timbre.swap_config_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(taoensso.timbre.swap_config_BANG_.cljs$lang$applyTo = (function (seq50446){\nvar G__50447 = cljs.core.first(seq50446);\nvar seq50446__$1 = cljs.core.next(seq50446);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__50447,seq50446__$1);\n}));\n\ntaoensso.timbre.set_config_BANG_ = (function taoensso$timbre$set_config_BANG_(m){\nreturn taoensso.timbre.swap_config_BANG_((function (_old){\nreturn m;\n}));\n});\ntaoensso.timbre.merge_config_BANG_ = (function taoensso$timbre$merge_config_BANG_(m){\nreturn taoensso.timbre.swap_config_BANG_((function (old){\nreturn taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([old,m], 0));\n}));\n});\ntaoensso.timbre.set_level_BANG_ = (function taoensso$timbre$set_level_BANG_(level){\nreturn taoensso.timbre.swap_config_BANG_((function (m){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),level);\n}));\n});\ntaoensso.timbre._levels_vec = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\ntaoensso.timbre._levels_set = cljs.core.set(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null));\ntaoensso.timbre._levels_map = cljs.core.zipmap(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null),cljs.core.next(cljs.core.range.cljs$core$IFn$_invoke$arity$0()));\ntaoensso.timbre.valid_level_QMARK_ = (function taoensso$timbre$valid_level_QMARK_(x){\nif(cljs.core.truth_((taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x)))){\nreturn true;\n} else {\nreturn false;\n}\n});\ntaoensso.timbre.valid_level = (function taoensso$timbre$valid_level(x){\nvar or__4126__auto__ = (taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid Timbre logging level\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),x], null));\n}\n});\ntaoensso.timbre.level_GT__EQ_ = (function taoensso$timbre$level_GT__EQ_(x,y){\nreturn ((function (){var G__50448 = taoensso.timbre.valid_level(x);\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__50448) : taoensso.timbre._levels_map.call(null,G__50448));\n})() >= (function (){var G__50449 = taoensso.timbre.valid_level(y);\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__50449) : taoensso.timbre._levels_map.call(null,G__50449));\n})());\n});\ntaoensso.timbre._compile_ns_filter = taoensso.encore.memoize_(taoensso.encore.compile_ns_filter);\n/**\n * Returns true iff given ns passes white/black lists.\n */\ntaoensso.timbre.ns_filter = taoensso.encore.memoize_((function (whitelist,blacklist,_QMARK_ns){\nvar fexpr__50450 = taoensso.timbre._compile_ns_filter(whitelist,blacklist);\nreturn (fexpr__50450.cljs$core$IFn$_invoke$arity$1 ? fexpr__50450.cljs$core$IFn$_invoke$arity$1(_QMARK_ns) : fexpr__50450.call(null,_QMARK_ns));\n}));\n/**\n * Runtime check: would Timbre currently log at the given logging level?\n *  * `?ns-str` arg required to support ns filtering\n *  * `config`  arg required to support non-global config\n */\ntaoensso.timbre.may_log_QMARK_ = (function taoensso$timbre$may_log_QMARK_(var_args){\nvar G__50452 = arguments.length;\nswitch (G__50452) {\ncase 1:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (level){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,null,null);\n}));\n\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (level,_QMARK_ns_str){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,null);\n}));\n\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (level,_QMARK_ns_str,_QMARK_config){\nvar config = (function (){var or__4126__auto__ = _QMARK_config;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn taoensso.timbre._STAR_config_STAR_;\n}\n})();\nvar min_level = cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"report\",\"report\",1394055010));\nreturn ((taoensso.timbre.level_GT__EQ_(level,min_level)) && (cljs.core.boolean$(taoensso.timbre.ns_filter(cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774)),cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142)),_QMARK_ns_str))) && (true));\n}));\n\n(taoensso.timbre.may_log_QMARK_.cljs$lang$maxFixedArity = 3);\n\ntaoensso.timbre.str_join = (function taoensso$timbre$str_join(xs){\nreturn taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (x){\nvar x__$1 = taoensso.encore.nil__GT_str(x);\nif(cljs.core.record_QMARK_(x__$1)){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__$1], 0));\n} else {\nreturn x__$1;\n\n}\n})),xs);\n});\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre.get_rate_limiter !== 'undefined')){\n} else {\ntaoensso.timbre.get_rate_limiter = taoensso.encore.memoize_((function (appender_id,specs){\nreturn taoensso.encore.limiter(specs);\n}));\n}\n/**\n * General-purpose dynamic logging context\n */\ntaoensso.timbre._STAR_context_STAR_ = null;\ntaoensso.timbre.vrest = (function taoensso$timbre$vrest(v){\nif((cljs.core.count(v) > (1))){\nreturn cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(v,(1));\n} else {\nreturn cljs.core.PersistentVector.EMPTY;\n}\n});\n/**\n * vargs -> [?err ?meta ?msg-fmt api-vargs]\n */\ntaoensso.timbre.parse_vargs = (function taoensso$timbre$parse_vargs(_QMARK_err,msg_type,vargs){\nvar auto_error_QMARK_ = (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(_QMARK_err,new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492)) : taoensso.encore.kw_identical_QMARK_.call(null,_QMARK_err,new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492)));\nvar fmt_msg_QMARK_ = (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(msg_type,new cljs.core.Keyword(null,\"f\",\"f\",-1597136552)) : taoensso.encore.kw_identical_QMARK_.call(null,msg_type,new cljs.core.Keyword(null,\"f\",\"f\",-1597136552)));\nvar vec__50456 = vargs;\nvar v0 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50456,(0),null);\nif(cljs.core.truth_((function (){var and__4115__auto__ = auto_error_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn taoensso.encore.error_QMARK_(v0);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar _QMARK_err__$1 = v0;\nvar _QMARK_meta = null;\nvar vargs__$1 = taoensso.timbre.vrest(vargs);\nvar _QMARK_msg_fmt = (cljs.core.truth_(fmt_msg_QMARK_)?(function (){var vec__50459 = vargs__$1;\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50459,(0),null);\nreturn v0__$1;\n})():null);\nvar vargs__$2 = (cljs.core.truth_(fmt_msg_QMARK_)?taoensso.timbre.vrest(vargs__$1):vargs__$1);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [_QMARK_err__$1,_QMARK_meta,_QMARK_msg_fmt,vargs__$2], null);\n} else {\nvar _QMARK_meta = (cljs.core.truth_(((cljs.core.map_QMARK_(v0))?new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v0)):false))?v0:null);\nvar _QMARK_err__$1 = (function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"err\",\"err\",-2089457205).cljs$core$IFn$_invoke$arity$1(_QMARK_meta);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nif(cljs.core.truth_(auto_error_QMARK_)){\nreturn null;\n} else {\nreturn _QMARK_err;\n}\n}\n})();\nvar _QMARK_meta__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(_QMARK_meta,new cljs.core.Keyword(null,\"err\",\"err\",-2089457205));\nvar vargs__$1 = (cljs.core.truth_(_QMARK_meta__$1)?taoensso.timbre.vrest(vargs):vargs);\nvar _QMARK_msg_fmt = (cljs.core.truth_(fmt_msg_QMARK_)?(function (){var vec__50463 = vargs__$1;\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50463,(0),null);\nreturn v0__$1;\n})():null);\nvar vargs__$2 = (cljs.core.truth_(fmt_msg_QMARK_)?taoensso.timbre.vrest(vargs__$1):vargs__$1);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [_QMARK_err__$1,_QMARK_meta__$1,_QMARK_msg_fmt,vargs__$2], null);\n}\n});\n/**\n * Core low-level log fn. Implementation detail!\n */\ntaoensso.timbre._log_BANG_ = (function taoensso$timbre$_log_BANG_(var_args){\nvar G__50468 = arguments.length;\nswitch (G__50468) {\ncase 9:\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]));\n\nbreak;\ncase 10:\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,null);\n}));\n\n(taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,callsite_id){\nif(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,config)){\nvar instant_50513 = taoensso.encore.now_dt();\nvar context_50514 = taoensso.timbre._STAR_context_STAR_;\nvar vargs_50515 = cljs.core.deref(vargs_);\nvar vec__50472_50516 = taoensso.timbre.parse_vargs(_QMARK_err,msg_type,vargs_50515);\nvar _QMARK_err_50517__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50472_50516,(0),null);\nvar _QMARK_meta_50518 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50472_50516,(1),null);\nvar _QMARK_msg_fmt_50519 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50472_50516,(2),null);\nvar vargs_50520__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__50472_50516,(3),null);\nvar data_50521 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2((function (){var or__4126__auto__ = _QMARK_base_data;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"instant\",\"instant\",655498374),new cljs.core.Keyword(null,\"config\",\"config\",994861415),new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),new cljs.core.Keyword(null,\"error-level?\",\"error-level?\",778415885),new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966),new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"?err\",\"?err\",549653299),new cljs.core.Keyword(null,\"context\",\"context\",-830191113),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),new cljs.core.Keyword(null,\"?err_\",\"?err_\",789480858),new cljs.core.Keyword(null,\"?meta\",\"?meta\",-793560773),new cljs.core.Keyword(null,\"?msg-fmt\",\"?msg-fmt\",-852453891)],[instant_50513,config,vargs_50520__$1,_QMARK_file,(function (){var fexpr__50476 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),null,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null);\nreturn (fexpr__50476.cljs$core$IFn$_invoke$arity$1 ? fexpr__50476.cljs$core$IFn$_invoke$arity$1(level) : fexpr__50476.call(null,level));\n})(),_QMARK_ns_str,level,_QMARK_err_50517__$1,context_50514,_QMARK_line,(new cljs.core.Delay((function (){\nreturn _QMARK_err_50517__$1;\n}),null)),_QMARK_meta_50518,_QMARK_msg_fmt_50519]));\nvar _QMARK_data_50522 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,mf){\nvar result = (mf.cljs$core$IFn$_invoke$arity$1 ? mf.cljs$core$IFn$_invoke$arity$1(acc) : mf.call(null,acc));\nif((result == null)){\nreturn cljs.core.reduced(null);\n} else {\nreturn result;\n}\n}),data_50521,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504).cljs$core$IFn$_invoke$arity$1(config));\nvar temp__5735__auto___50534 = _QMARK_data_50522;\nif(cljs.core.truth_(temp__5735__auto___50534)){\nvar data_50535__$1 = temp__5735__auto___50534;\nvar map__50478_50536 = data_50535__$1;\nvar map__50478_50537__$1 = (((((!((map__50478_50536 == null))))?(((((map__50478_50536.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__50478_50536.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__50478_50536):map__50478_50536);\nvar vargs_50538__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50478_50537__$1,new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273));\nvar data_50539__$2 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(data_50535__$1,new cljs.core.Keyword(null,\"vargs_\",\"vargs_\",552132148),(new cljs.core.Delay((function (){\nreturn vargs_50538__$2;\n}),null)));\nvar data_50540__$3 = taoensso.encore.assoc_nx.cljs$core$IFn$_invoke$arity$variadic(data_50539__$2,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000),(new cljs.core.Delay((function (){\nvar G__50481 = msg_type;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__50481)){\nreturn \"\";\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"p\",\"p\",151049309),G__50481)){\nreturn taoensso.timbre.str_join(vargs_50538__$2);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),G__50481)){\nif(typeof _QMARK_msg_fmt_50519 === 'string'){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Timbre format-style logging call without a format pattern (string)\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"level\",\"level\",1290497552),level,new cljs.core.Keyword(null,\"location\",\"location\",1815599388),[cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = _QMARK_ns_str;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = _QMARK_file;\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn \"?\";\n}\n}\n})()),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = _QMARK_line;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \"?\";\n}\n})())].join('')], null));\n}\n\nreturn taoensso.encore.format_STAR_(_QMARK_msg_fmt_50519,vargs_50538__$2);\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__50481)].join('')));\n\n}\n}\n}\n}),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612),(new cljs.core.Delay((function (){\nreturn cljs.core.hash(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [callsite_id,_QMARK_msg_fmt_50519,cljs.core.get.cljs$core$IFn$_invoke$arity$3(_QMARK_meta_50518,new cljs.core.Keyword(null,\"hash\",\"hash\",-13781596),vargs_50538__$2)], null));\n}),null))], 0));\nvar output_fn1_50541 = taoensso.encore.memoize_(cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn));\ncljs.core.reduce_kv((function (_,id,appender){\nif(cljs.core.truth_((function (){var and__4115__auto__ = new cljs.core.Keyword(null,\"enabled?\",\"enabled?\",-1376075057).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(and__4115__auto__)){\nreturn taoensso.timbre.level_GT__EQ_(level,(function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"min-level\",\"min-level\",1634684919).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415);\n}\n})());\n} else {\nreturn and__4115__auto__;\n}\n})())){\nif(cljs.core.truth_(taoensso.timbre.ns_filter(new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774).cljs$core$IFn$_invoke$arity$1(appender),new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142).cljs$core$IFn$_invoke$arity$1(appender),_QMARK_ns_str))){\nvar rate_limit_specs = new cljs.core.Keyword(null,\"rate-limit\",\"rate-limit\",1748082022).cljs$core$IFn$_invoke$arity$1(appender);\nvar rate_limit_okay_QMARK_ = (function (){var or__4126__auto__ = cljs.core.empty_QMARK_(rate_limit_specs);\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nvar rl_fn = taoensso.timbre.get_rate_limiter(id,rate_limit_specs);\nreturn cljs.core.not((function (){var G__50486 = cljs.core.force(new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612).cljs$core$IFn$_invoke$arity$1(data_50540__$3));\nreturn (rl_fn.cljs$core$IFn$_invoke$arity$1 ? rl_fn.cljs$core$IFn$_invoke$arity$1(G__50486) : rl_fn.call(null,G__50486));\n})());\n}\n})();\nif(rate_limit_okay_QMARK_){\nvar map__50487 = appender;\nvar map__50487__$1 = (((((!((map__50487 == null))))?(((((map__50487.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__50487.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__50487):map__50487);\nvar apfn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50487__$1,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\nvar async_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__50487__$1,new cljs.core.Keyword(null,\"async?\",\"async?\",1523057758));\nvar output_fn = (function (){var f = new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_((function (){var or__4126__auto__ = (f == null);\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"inherit\",\"inherit\",-1840815422)) : taoensso.encore.kw_identical_QMARK_.call(null,f,new cljs.core.Keyword(null,\"inherit\",\"inherit\",-1840815422)));\n}\n})())){\nreturn output_fn1_50541;\n} else {\nreturn f;\n}\n})();\nvar output_ = (new cljs.core.Delay((function (){\nreturn (output_fn.cljs$core$IFn$_invoke$arity$1 ? output_fn.cljs$core$IFn$_invoke$arity$1(data_50540__$3) : output_fn.call(null,data_50540__$3));\n}),null));\nvar data__$4 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(data_50540__$3,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"appender-id\",\"appender-id\",-1917983538),id,new cljs.core.Keyword(null,\"appender\",\"appender\",1267426510),appender,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),output_fn,new cljs.core.Keyword(null,\"output_\",\"output_\",-36797880),output_], null));\nvar _QMARK_data__$1 = (function (){var temp__5733__auto__ = new cljs.core.Keyword(null,\"middleware-fn\",\"middleware-fn\",-61585752).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar mfn = temp__5733__auto__;\nreturn (mfn.cljs$core$IFn$_invoke$arity$1 ? mfn.cljs$core$IFn$_invoke$arity$1(data__$4) : mfn.call(null,data__$4));\n} else {\nreturn data__$4;\n}\n})();\nvar temp__5735__auto____$1 = _QMARK_data__$1;\nif(cljs.core.truth_(temp__5735__auto____$1)){\nvar data__$5 = temp__5735__auto____$1;\nreturn (apfn.cljs$core$IFn$_invoke$arity$1 ? apfn.cljs$core$IFn$_invoke$arity$1(data__$5) : apfn.call(null,data__$5));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n}),null,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998).cljs$core$IFn$_invoke$arity$1(config));\n} else {\n}\n} else {\n}\n\nreturn null;\n}));\n\n(taoensso.timbre._log_BANG_.cljs$lang$maxFixedArity = 10);\n\ntaoensso.timbre.stacktrace = (function taoensso$timbre$stacktrace(var_args){\nvar G__50490 = arguments.length;\nswitch (G__50490) {\ncase 1:\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1 = (function (err){\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,null);\n}));\n\n(taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (err,opts){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(err);\n}));\n\n(taoensso.timbre.stacktrace.cljs$lang$maxFixedArity = 2);\n\ntaoensso.timbre.console__QMARK_appender = taoensso.timbre.appenders.core.console_appender;\n\ntaoensso.timbre.ordered_levels = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\n\ntaoensso.timbre.log_QMARK_ = taoensso.timbre.may_log_QMARK_;\n\ntaoensso.timbre.logging_enabled_QMARK_ = (function taoensso$timbre$logging_enabled_QMARK_(level,compile_time_ns){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2(level,cljs.core.str.cljs$core$IFn$_invoke$arity$1(compile_time_ns));\n});\n\ntaoensso.timbre.str_println = (function taoensso$timbre$str_println(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___50563 = arguments.length;\nvar i__4737__auto___50564 = (0);\nwhile(true){\nif((i__4737__auto___50564 < len__4736__auto___50563)){\nargs__4742__auto__.push((arguments[i__4737__auto___50564]));\n\nvar G__50565 = (i__4737__auto___50564 + (1));\ni__4737__auto___50564 = G__50565;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn taoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(taoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic = (function (xs){\nreturn taoensso.timbre.str_join(xs);\n}));\n\n(taoensso.timbre.str_println.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(taoensso.timbre.str_println.cljs$lang$applyTo = (function (seq50491){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq50491));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","Simple, flexible logging for Clojure/Script. No XML.","~:file","taoensso/timbre.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have?","^J"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$get-env",["^ ","~:arglists",["~#list",[[]]],"^9",665,"^:",1,"^8","taoensso/timbre.clj","~:name","~$taoensso.timbre/get-env","~:ns","~$taoensso.timbre","~:macro",true],"~$-log-and-rethrow-errors",["^ ","^P",["^Q",[["~$?line","~$&","~$body"]]],"^9",614,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/-log-and-rethrow-errors","^T","^U","^V",true],"~$log",["^ ","^P",["^Q",[["~$level","~$&","~$args"]]],"^9",583,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log","^T","^U","^V",true],"~$logf",["^ ","^P",["^Q",[["^10","~$&","^11"]]],"^9",594,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/logf","^T","^U","^V",true],"~$reportf",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/reportf","^T","^U","^V",true],"~$fatalf",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/fatalf","^T","^U","^V",true],"~$warnf",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/warnf","^T","^U","^V",true],"~$log!",["^ ","^P",["^Q",[["^10","~$msg-type","^11","~$&",["~$opts"]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",517,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log!","^T","^U","^V",true],"~$report",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",590,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/report","^T","^U","^V",true],"~$-spy",["^ ","^P",["^Q",[["^X","~$config","^10","~$name","~$expr"]]],"^9",647,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/-spy","^T","^U","^V",true],"~$with-default-outs",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",698,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-default-outs","^T","^U","^V",true],"~$logf*",["^ ","^P",["^Q",[["^1B","^10","~$&","^11"]]],"^9",593,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/logf*","^T","^U","^V",true],"~$spy",["^ ","^P",["^Q",[["^1D"],["^10","^1D"],["^10","^1C","^1D"],["^1B","^10","^1C","^1D"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",657,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/spy","^T","^U","^V",true],"~$sometimes",["^ ","^P",["^Q",[["~$probability","~$&","^Y"]]],"^7","Handy for sampled logging, etc.","^9",746,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/sometimes","^T","^U","^V",true],"~$warn",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",587,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/warn","^T","^U","^V",true],"~$with-level",["^ ","^P",["^Q",[["^10","~$&","^Y"]]],"^9",149,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-level","^T","^U","^V",true],"~$trace",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",584,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/trace","^T","^U","^V",true],"~$-log-errors",["^ ","^P",["^Q",[["^X","~$&","^Y"]]],"^9",608,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/-log-errors","^T","^U","^V",true],"~$debug",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/debug","^T","^U","^V",true],"~$log*",["^ ","^P",["^Q",[["^1B","^10","~$&","^11"]]],"^9",582,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log*","^T","^U","^V",true],"~$debugf",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",596,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/debugf","^T","^U","^V",true],"~$tracef",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",595,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/tracef","^T","^U","^V",true],"~$-logged-future",["^ ","^P",["^Q",[["^X","~$&","^Y"]]],"^9",621,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/-logged-future","^T","^U","^V",true],"~$infof",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",597,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/infof","^T","^U","^V",true],"~$logged-future",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",625,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/logged-future","^T","^U","^V",true],"~$log-env",["^ ","^P",["^Q",[[],["^10"],["^10","^1C"],["^1B","^10","^1C"]]],"^9",762,"^:",3,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log-env","^T","^U","^V",true],"~$fatal",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",589,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/fatal","^T","^U","^V",true],"~$log-and-rethrow-errors",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log-and-rethrow-errors","^T","^U","^V",true],"~$with-logging-config",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",760,"^:",3,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-logging-config","^T","^U","^V",true],"~$with-merged-config",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-merged-config","^T","^U","^V",true],"~$with-context",["^ ","^P",["^Q",[["~$context","~$&","^Y"]]],"^7","Executes body so that given arbitrary data will be included in the\n  data map passed to appenders for any enclosed logging calls.\n\n  (with-context\n    {:user-name \"Stu\"} ; Will be incl. in data dispatched to appenders\n    (info \"User request\"))","^9",295,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-context","^T","^U","^V",true],"~$log-errors",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",623,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/log-errors","^T","^U","^V",true],"~$errorf",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",599,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/errorf","^T","^U","^V",true],"~$info",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",586,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/info","^T","^U","^V",true],"~$logp",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",761,"^:",3,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/logp","^T","^U","^V",true],"~$with-config",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",137,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-config","^T","^U","^V",true],"~$error",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",588,"^:",1,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/error","^T","^U","^V",true],"~$with-log-level",["^ ","^P",["^Q",[["^10","~$&","^Y"]]],"^9",759,"^:",3,"^8","taoensso/timbre.clj","^R","~$taoensso.timbre/with-log-level","^T","^U","^V",true]],"^R","^U","~:op","^T","~:imports",null,"~:requires",["^ ","~$clojure.string","^2W","~$str","^2W","^J","^J","~$enc","^J","~$taoensso.timbre.appenders.core","^2Z","~$core-appenders","^2Z","~$cljs.core","^30","~$goog","^31"],"~:seen",["^M",["~:require","~:require-macros"]],"~:uses",null,"^34",["^ ","^J","^J","^2Y","^J","^U","^U","~$timbre-macros","^U","^30","^30"],"~:form",["^Q",["~$ns","^U","Simple, flexible logging for Clojure/Script. No XML.",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^Q",["^33",["^2W","~:as","^2X"],["^J","^39","^2Y","~:refer",[],"~:refer-macros",["^I","^K"]],["^2Z","^39","^2["]]],["^Q",["^34",["^U","^39","^36","^3:",[]]]]]],"~:flags",["^ ","^33",["^M",[]],"^34",["^M",[]]],"~:js-deps",["^ "],"~:deps",["^31","^30","^2W","^J","^2Z"]],"^T","^U","~:resource-id",["~:shadow.build.classpath/resource","taoensso/timbre.cljs"],"~:compiled-at",1609109800699,"~:resource-name","taoensso/timbre.cljs","~:warnings",[],"~:source","(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer [] :refer-macros [have have?]]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer []]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 87 0])\n  (enc/assert-min-encore-version  2.87))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str ?file hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str ?file \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                         \n                                        \n                                             \n           \n\n     \n                                 \n                                                        \n                                                              \n                               \n                                                                    \n\n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                 \n                                                                                \n\n                                      \n\n                         \n                                                                                      \n                                                                                       \n\n                                                   \n                                                                                 \n\n                                                   \n                                                                                 \n\n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (boolean ; Resolves #206 (issue with slf4j-timbre)\n         (ns-filter\n           (get config :ns-whitelist)\n           (get config :ns-blacklist)\n           ?ns-str))\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context* \"General-purpose dynamic logging context\" nil)\n                       \n                                                                     \n                                                              \n\n               \n                                                                        \n                             \n\n                                                          \n\n(defn- vrest [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- parse-vargs\n  \"vargs -> [?err ?meta ?msg-fmt api-vargs]\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        fmt-msg?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [?err     v0\n            ?meta    nil\n            vargs    (vrest vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs])\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (vrest vargs) vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs]))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (parse-vargs :auto :f [\"fmt\" :a :b :c])\n      (parse-vargs :auto :p [ex    :a :b :c])\n      (parse-vargs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [       {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [ex])\n      (parse-vargs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          [?err ?meta ?msg-fmt vargs]\n          (parse-vargs ?err msg-type vargs)\n\n          data ; Pre-middleware\n          (conj\n            (or ?base-data {})\n            {:instant instant\n             :level   level\n             :context context\n             :config  config ; Entire config!\n             :?ns-str ?ns-str\n             :?file   ?file\n             :?line   ?line\n                                                          \n             :error-level? (#{:error :fatal} level)\n             :?err     ?err\n             :?err_    (delay ?err) ; Deprecated\n             :?meta    ?meta        ; Undocumented\n             :?msg-fmt ?msg-fmt     ; Undocumented\n             :vargs    vargs})\n\n          ?data ; Post middleware\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [{:keys [vargs]} data\n              data (assoc data :vargs_ (delay vargs)) ; Deprecated\n              data\n              (enc/assoc-nx data\n                :msg_\n                (delay\n                  (case msg-type\n                    nil \"\"\n                    :p  (str-join vargs)\n                    :f  #_(enc/format* (have string? ?msg-fmt) vargs)\n                    (do\n                      (when-not (string? ?msg-fmt)\n                        (throw\n                          (ex-info \"Timbre format-style logging call without a format pattern (string)\"\n                            #_data\n                            {:level    level\n                             :location (str (or ?ns-str ?file \"?\") \":\"\n                                            (or ?line         \"?\"))})))\n\n                      (enc/format* ?msg-fmt vargs))))\n\n                ;; Uniquely identifies a particular logging call for\n                ;; rate limiting, etc.\n                :hash_\n                (delay\n                  (hash\n                    ;; Nb excl. instant\n                    [callsite-id      ; Only useful for direct macro calls\n                     ?msg-fmt\n                     (get ?meta :hash ; Explicit hash provided\n                       vargs)])))\n\n              ;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data) ; Deprecated, undocumented\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                                   \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n","~:reader-features",["^M",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__50428","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn","opts","map__50432","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__50433","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4126__auto__","cljs.core/force","temp__5735__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__50442","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq50446","G__50447","cljs.core/first","cljs.core/next","self__4723__auto__","f","args","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge","taoensso.timbre/set-level!","cljs.core.assoc","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info","taoensso.timbre/level>=","y","G__50448","G__50449","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__50450","G__50452","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_","?config","config","min-level","cljs.core/boolean","taoensso.timbre/str-join","xs","taoensso.encore.str_join","cljs.core.map","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/vrest","v","cljs.core/count","cljs.core.subvec","taoensso.timbre/parse-vargs","msg-type","vargs","vec__50456","cljs.core.nth","auto-error?","taoensso.encore/kw-identical?","fmt-msg?","v0","and__4115__auto__","taoensso.encore/error?","?meta","?msg-fmt","vec__50459","cljs.core/map?","cljs.core/meta","cljs.core.dissoc","vec__50463","G__50468","taoensso.timbre/-log!","vargs_","?base-data","taoensso.timbre._log_BANG_","callsite-id","cljs.core/deref","vec__50472","instant","taoensso.encore/now-dt","context","cljs.core.conj","fexpr__50476","cljs.core/Delay","?data","cljs.core.reduce","acc","mf","result","cljs.core/reduced","map__50478","taoensso.encore.assoc_nx","G__50481","cljs.core._EQ_","taoensso.encore/format*","cljs.core/hash","output-fn1","cljs.core/reduce-kv","_","id","appender","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__50486","map__50487","async?","apfn","output-fn","output_","temp__5733__auto__","mfn","G__50490","taoensso.timbre.stacktrace","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre/str-println","seq50491","self__4724__auto__","cljs.core/seq"]],"~:used-vars",["^M",["~$taoensso.timbre/ordered-levels","~$taoensso.timbre/valid-level?","~$taoensso.timbre.appenders.core/println-appender","~$taoensso.timbre/println-appender","~$clojure.string/upper-case","~$taoensso.timbre/str-join","~$cljs.core/vector?","~$taoensso.timbre/stacktrace","~$taoensso.timbre/parse-vargs","~$taoensso.timbre/get-hostname","~$taoensso.timbre/-log!","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$taoensso.timbre/set-config!","~$taoensso.timbre/logging-enabled?","~$taoensso.timbre/-levels-set","~$taoensso.timbre/may-log?","~$taoensso.timbre/-levels-map","~$taoensso.timbre/default-err","~$cljs.core/pr-str","~$taoensso.timbre/valid-level","~$taoensso.timbre/str-println","~$taoensso.timbre/get-rate-limiter","~$cljs.core/set","~$js/taoensso.timbre.get-rate-limiter","~$js/taoensso","~$taoensso.timbre/*context*","~$taoensso.timbre/*config*","~$cljs.core/zipmap","~$taoensso.timbre/console-?appender","~$cljs.core/map","~$taoensso.encore/assert-min-encore-version","~$taoensso.timbre/swap-config!","~$taoensso.timbre/ns-filter","~$taoensso.timbre/console-appender","~$cljs.core/get","~$taoensso.encore/nested-merge","~$taoensso.timbre/vrest","~$taoensso.timbre.appenders.core/console-appender","~$taoensso.timbre/-levels-vec","~$cljs.core/record?","~$cljs.core/subvec","~$taoensso.timbre/level>=","~$cljs.core/ex-info","~$js/taoensso.timbre","~$cljs.core/force","~$taoensso.encore/str-join","~$taoensso.timbre/example-config","~$taoensso.encore/encore-version","~$cljs.core/next","~$taoensso.encore/limiter","~$cljs.core/assoc","~$taoensso.timbre/set-level!","~$cljs.core/range","~$cljs.core/reduce-kv","~$taoensso.timbre/-compile-ns-filter","~$taoensso.timbre/merge-config!","~$taoensso.encore/compile-ns-filter","~$js/taoensso.timbre.*config*","~$taoensso.encore/memoize_","~$cljs.core/name","~$taoensso.timbre/log?","~$taoensso.encore/error?","~$js/Error","~$taoensso.timbre/default-output-fn","~$cljs.core/boolean","~$taoensso.timbre/default-out"]]],"~:cache-keys",["~#cmap",[["^3@","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^M",[]],"~:deps-syms",["^31","~$goog.dom.HtmlElement"]]],["^3@","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.labs.userAgent.util","~$goog.string"]]],["^3@","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.Promise","~$goog.events.EventTarget"]]],["^3@","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^2W","^5@"]]],["^3@","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.array","~$goog.asserts"]]],["^3@","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5@"]]],["^3@","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^3@","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5?","~$goog.object","~$goog.string.internal"]]],["^3@","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5H"]]],["^3@","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D"]]],["^3@","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5?","~$goog.reflect","^5@"]]],["^3@","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^3@","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^3@","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^2W","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^5G","^5@","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^3@","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.async.FreeList"]]],["^3@","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5E","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^3@","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5F"]]],["^3@","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5@","^60"]]],["^3@","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.structs.Heap"]]],["^3@","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.Timer","^5C","^5D","^69","^5B","~$goog.json.hybrid","~$goog.log","^66","^65","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^5G","^5@","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^5F"]]],["^3@","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30"]]],["^3@","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^6>","^6?","^6@","^6=","^5C","^5@","^60"]]],["^3@","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^3@","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.Disposable","^5D","^61","~$goog.events.Event","^6;","^6<","^5G"]]],["^3@","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.disposable.IDisposable"]]],["^3@","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D"]]],["^3@","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^6H","~$goog.structs.Collection","^6I"]]],"~:SHADOW-TIMESTAMP",[1609109508000,1609109508000,1609109508000],["^3@","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","^5R"]]],["^3@","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.events.ListenableKey"]]],["^3@","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.html.trustedtypes","^5K","^5L","^5M","^5N"]]],["^3@","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","~$goog.events.Listener","^5G"]]],["^3@","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","~$taoensso.truss.impl"]]],["^3@","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","~$goog.html.SafeUrl","^5M","^5N","^5H"]]],["^3@","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^6V","^5J","~$goog.html.uncheckedconversions","^5M","^5H"]]],["^3@","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^5X"]]],["^3@","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^3@","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^62","~$goog.structs.PriorityPool"]]],["^3@","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","~$goog.dom.TagName","~$goog.dom.tags","^6Z","^6[","~$goog.html.SafeStyleSheet","^6V","^5J","^6S","^5K","^5L","^5O","^5G","^5M","^5N","^5H"]]],["^3@","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5G"]]],["^3@","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C"]]],["^3@","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5?","^5@"]]],["^3@","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^2W","^J"]]],["^3@","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^5G","^6A","^5Z","^60"]]],["^3@","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^74","~$goog.dom.safe","^6Y","^70","~$goog.math.Coordinate","~$goog.math.Size","^5G","^5@","~$goog.string.Unicode","^5F"]]],["^3@","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.debug.Error","^78"]]],["^3@","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.debug.LogRecord"]]],["^3@","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","^5@","^6H","^6I","^6J","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^3@","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.Thenable","^5D","^68","~$goog.async.run","^5W","^7=","~$goog.promise.Resolver"]]],["^3@","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",[]]],["^3@","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.json"]]],["^3@","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5G"]]],["^3@","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^6>","^2W","~$cljs.tools.reader.impl.inspect"]]],["^3@","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^5@","^60"]]],["^3@","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^6M","~$goog.structs.Queue","~$goog.structs.Set"]]],["^3@","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5G","~$goog.structs.Node"]]],["^3@","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D"]]],["^3@","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^79","^70","^5M","^5H"]]],["^3@","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5H"]]],["^3@","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","~$goog.debug.errorcontext","^5F"]]],["^3@","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.math"]]],["^3@","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^6?","^5@","^60"]]],["^3@","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","^6X","^7J"]]],["^3@","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^69","~$goog.dom","^74","^79","^6X","^6Y","^5J","^5O","^5P","^5M"]]],["^3@","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","^6Y","^6Z","^6[","^76","^6V","^5J","^5M","^5H"]]],["^3@","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","~$goog.debug","~$goog.debug.LogBuffer","^7>"]]],["^3@","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^6M","~$goog.events.EventId"]]],["^3@","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^6=","^6>","^6?"]]],["^3@","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","~$goog.math.Long","~$goog.math.Integer","^5@","^5G","^5C","~$goog.Uri","^60"]]],["^3@","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","^6S","^5M","^5N"]]],["^3@","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^7L","~$goog.debug.LogManager","^7>","~$goog.debug.Logger"]]],["^3@","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","^6[","^5G","^5M","^5N","^5H"]]],["^3@","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^7L","^5E","^6N","~$goog.events.EventType","^5R","^5F"]]],["^3@","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5R"]]],["^3@","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5F"]]],["^3@","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30"]]],["^3@","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5C","^5D","^5@"]]],["^3@","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","^5N"]]],["^3@","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^30","^2W","^J","^2Z"]]],["^3@","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]],["^3@","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^7N"]]],["^3@","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^6K"]]],["^3@","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31","^5D","~$goog.net.WrapperXmlHttpFactory","^6L"]]],["^3@","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^5:",["^ ","^5;",null,"^5<",["^M",[]],"^5=",["^31"]]]]],"~:clj-info",["^ ","jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/edn.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1594291029000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1595787487000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","Simple, flexible logging for Clojure/Script. No XML.","^8","taoensso/timbre.cljs","^9",1,"^:",5,"^;",1,"^<",20],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J","^K","^J"],"^L",["^M",[]],"^N",["^ ","^O",["^ ","^P",["^Q",[[]]],"^9",665,"^:",1,"^8","taoensso/timbre.clj","^R","^S","^T","^U","^V",true],"^W",["^ ","^P",["^Q",[["^X","~$&","^Y"]]],"^9",614,"^:",1,"^8","taoensso/timbre.clj","^R","^Z","^T","^U","^V",true],"^[",["^ ","^P",["^Q",[["^10","~$&","^11"]]],"^9",583,"^:",1,"^8","taoensso/timbre.clj","^R","^12","^T","^U","^V",true],"^13",["^ ","^P",["^Q",[["^10","~$&","^11"]]],"^9",594,"^:",1,"^8","taoensso/timbre.clj","^R","^14","^T","^U","^V",true],"^15",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^R","^16","^T","^U","^V",true],"^17",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^R","^18","^T","^U","^V",true],"^19",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^R","^1:","^T","^U","^V",true],"^1;",["^ ","^P",["^Q",[["^10","^1<","^11","~$&",["^1="]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",517,"^:",1,"^8","taoensso/timbre.clj","^R","^1>","^T","^U","^V",true],"^1?",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",590,"^:",1,"^8","taoensso/timbre.clj","^R","^1@","^T","^U","^V",true],"^1A",["^ ","^P",["^Q",[["^X","^1B","^10","^1C","^1D"]]],"^9",647,"^:",1,"^8","taoensso/timbre.clj","^R","^1E","^T","^U","^V",true],"^1F",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",698,"^:",1,"^8","taoensso/timbre.clj","^R","^1G","^T","^U","^V",true],"^1H",["^ ","^P",["^Q",[["^1B","^10","~$&","^11"]]],"^9",593,"^:",1,"^8","taoensso/timbre.clj","^R","^1I","^T","^U","^V",true],"^1J",["^ ","^P",["^Q",[["^1D"],["^10","^1D"],["^10","^1C","^1D"],["^1B","^10","^1C","^1D"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",657,"^:",1,"^8","taoensso/timbre.clj","^R","^1K","^T","^U","^V",true],"^1L",["^ ","^P",["^Q",[["^1M","~$&","^Y"]]],"^7","Handy for sampled logging, etc.","^9",746,"^:",1,"^8","taoensso/timbre.clj","^R","^1N","^T","^U","^V",true],"^1O",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",587,"^:",1,"^8","taoensso/timbre.clj","^R","^1P","^T","^U","^V",true],"^1Q",["^ ","^P",["^Q",[["^10","~$&","^Y"]]],"^9",149,"^:",1,"^8","taoensso/timbre.clj","^R","^1R","^T","^U","^V",true],"^1S",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",584,"^:",1,"^8","taoensso/timbre.clj","^R","^1T","^T","^U","^V",true],"^1U",["^ ","^P",["^Q",[["^X","~$&","^Y"]]],"^9",608,"^:",1,"^8","taoensso/timbre.clj","^R","^1V","^T","^U","^V",true],"^1W",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^R","^1X","^T","^U","^V",true],"^1Y",["^ ","^P",["^Q",[["^1B","^10","~$&","^11"]]],"^9",582,"^:",1,"^8","taoensso/timbre.clj","^R","^1Z","^T","^U","^V",true],"^1[",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",596,"^:",1,"^8","taoensso/timbre.clj","^R","^20","^T","^U","^V",true],"^21",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",595,"^:",1,"^8","taoensso/timbre.clj","^R","^22","^T","^U","^V",true],"^23",["^ ","^P",["^Q",[["^X","~$&","^Y"]]],"^9",621,"^:",1,"^8","taoensso/timbre.clj","^R","^24","^T","^U","^V",true],"^25",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",597,"^:",1,"^8","taoensso/timbre.clj","^R","^26","^T","^U","^V",true],"^27",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",625,"^:",1,"^8","taoensso/timbre.clj","^R","^28","^T","^U","^V",true],"^29",["^ ","^P",["^Q",[[],["^10"],["^10","^1C"],["^1B","^10","^1C"]]],"^9",762,"^:",3,"^8","taoensso/timbre.clj","^R","^2:","^T","^U","^V",true],"^2;",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",589,"^:",1,"^8","taoensso/timbre.clj","^R","^2<","^T","^U","^V",true],"^2=",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^R","^2>","^T","^U","^V",true],"^2?",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",760,"^:",3,"^8","taoensso/timbre.clj","^R","^2@","^T","^U","^V",true],"^2A",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^R","^2B","^T","^U","^V",true],"^2C",["^ ","^P",["^Q",[["^2D","~$&","^Y"]]],"^7","Executes body so that given arbitrary data will be included in the\n  data map passed to appenders for any enclosed logging calls.\n\n  (with-context\n    {:user-name \"Stu\"} ; Will be incl. in data dispatched to appenders\n    (info \"User request\"))","^9",295,"^:",1,"^8","taoensso/timbre.clj","^R","^2E","^T","^U","^V",true],"^2F",["^ ","^P",["^Q",[["~$&","^Y"]]],"^9",623,"^:",1,"^8","taoensso/timbre.clj","^R","^2G","^T","^U","^V",true],"^2H",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",599,"^:",1,"^8","taoensso/timbre.clj","^R","^2I","^T","^U","^V",true],"^2J",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",586,"^:",1,"^8","taoensso/timbre.clj","^R","^2K","^T","^U","^V",true],"^2L",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",761,"^:",3,"^8","taoensso/timbre.clj","^R","^2M","^T","^U","^V",true],"^2N",["^ ","^P",["^Q",[["^1B","~$&","^Y"]]],"^9",137,"^:",1,"^8","taoensso/timbre.clj","^R","^2O","^T","^U","^V",true],"^2P",["^ ","^P",["^Q",[["~$&","^11"]]],"^9",588,"^:",1,"^8","taoensso/timbre.clj","^R","^2Q","^T","^U","^V",true],"^2R",["^ ","^P",["^Q",[["^10","~$&","^Y"]]],"^9",759,"^:",3,"^8","taoensso/timbre.clj","^R","^2S","^T","^U","^V",true]],"^R","^U","^2U",null,"^2V",["^ ","^2W","^2W","^2X","^2W","^J","^J","^2Y","^J","^2Z","^2Z","^2[","^2Z","^30","^30","^31","^31"],"^32",["^M",["^33","^34"]],"~:shadow/js-access-global",["^M",["Error"]],"^35",null,"~:defs",["^ ","~$get-rate-limiter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",287,"^:",20,"^;",287,"^<",36,"~:private",true],"^8U",true,"^R","^47","^8","taoensso/timbre.cljs","^<",36,"^:",1,"^9",287,"^;",287,"~:tag","~$function"],"~$logging-enabled?",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",757,"^:",9,"^;",757,"^<",25,"^P",["^Q",["~$quote",["^Q",[["^10","~$compile-time-ns"]]]]]],"^R","^3[","^8","taoensso/timbre.cljs","^<",25,"~:method-params",["^Q",[["^10","^8["]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^:",3,"~:variadic?",false,"^9",757,"~:ret-tag","~$boolean","^;",757,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^8Z",["^Q",[["^10","^8["]]]]]],"~$-levels-map",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",160,"^:",14,"^;",160,"^<",25,"~:const",true],"^R","^42","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^99",true,"^9",160,"^;",160,"^8V","~$clj"],"~$valid-level",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",163,"^:",7,"^;",163,"^<",18,"^P",["^Q",["^8Z",["^Q",[["~$x"]]]]]],"^R","^45","^8","taoensso/timbre.cljs","^<",18,"^90",["^Q",[["~$x"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",163,"^94","~$any","^;",163,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$x"]]]]]],"~$merge-config!",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",146,"^:",7,"^;",146,"^<",20,"^P",["^Q",["^8Z",["^Q",[["~$m"]]]]]],"^R","^4Y","^8","taoensso/timbre.cljs","^<",20,"^90",["^Q",[["~$m"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",146,"^94","^9<","^;",146,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$m"]]]]]],"~$-levels-set",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",159,"^:",14,"^;",159,"^<",25,"^99",true],"^R","^40","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^99",true,"^9",159,"^;",159,"^8V",["^M",["^9:","^9<","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]]],"~$log?",["^ ","^R","^52","^8","taoensso/timbre.cljs","^9",756,"^:",3,"^;",756,"^<",12,"^5",["^ ","^8","taoensso/timbre.cljs","^9",756,"^:",8,"^;",756,"^<",12],"^8V","^95"],"~$str-join",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",265,"^:",10,"^;",265,"^<",18,"^8U",true,"^P",["^Q",["^8Z",["^Q",[["~$xs"]]]]]],"^8U",true,"^R","^3Q","^8","taoensso/timbre.cljs","^<",18,"^90",["^Q",[["^9D"]]],"^91",null,"^92",["^Q",[null,null]],"^:",3,"^93",false,"^9",265,"^94",["^M",["^9<","~$string"]],"^;",265,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["^9D"]]]]]],"~$*config*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",136,"^:",24,"^;",136,"^<",32,"~:dynamic",true,"^7","See `example-config` for info."],"^R","^4<","^8","taoensso/timbre.cljs","^<",32,"^:",1,"^9G",true,"^9",136,"^;",136,"^8V","^9<","^7","See `example-config` for info."],"~$*context*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",294,"^:",16,"^;",294,"^<",25,"^9G",true],"^R","^4;","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^9G",true,"^9",294,"^;",294,"^8V","^9<","^7","General-purpose dynamic logging context"],"~$valid-level?",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",162,"^:",7,"^;",162,"^<",19,"^P",["^Q",["^8Z",["^Q",[["~$x"]]]]]],"^R","^3M","^8","taoensso/timbre.cljs","^<",19,"^90",["^Q",[["~$x"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",162,"^94","^95","^;",162,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$x"]]]]]],"~$-log!",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",345,"^:",7,"^;",345,"^<",12,"^P",["^Q",["^8Z",["^Q",[["^1B","^10","~$?ns-str","~$?file","^X","^1<","~$?err","~$vargs_","~$?base-data"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","~$callsite-id"]]]]],"^7","Core low-level log fn. Implementation detail!","~:top-fn",["^ ","^93",false,"~:fixed-arity",10,"^96",10,"^90",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]],"^P",["^Q",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]]],"^92",["^Q",[null,null]]]],"^R","^3V","^8","taoensso/timbre.cljs","^<",12,"^9Q",["^ ","^93",false,"^9R",10,"^96",10,"^90",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]],"^P",["^Q",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]]],"^92",["^Q",[null,null]]],"^90",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]],"^91",null,"^9R",10,"^92",["^Q",[null,null]],"^:",1,"^93",false,"~:methods",[["^ ","^9R",9,"^93",false,"^8V","^9<"],["^ ","^9R",10,"^93",false,"^8V","^9A"]],"^9",345,"^;",345,"^96",10,"^97",true,"^P",["^Q",[["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O"],["^1B","^10","^9K","^9L","^X","^1<","^9M","^9N","^9O","^9P"]]],"^7","Core low-level log fn. Implementation detail!"],"~$console-appender",["^ ","^R","^4C","^8","taoensso/timbre.cljs","^9",58,"^:",8,"^;",58,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",58,"^:",13,"^;",58,"^<",29]],"~$parse-vargs",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",306,"^:",8,"^;",306,"^<",19,"^8U",true,"^P",["^Q",["^8Z",["^Q",[["^9M","^1<","~$vargs"]]]]],"^7","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"^8U",true,"^R","^3T","^8","taoensso/timbre.cljs","^<",19,"^90",["^Q",[["^9M","^1<","^9V"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",306,"^94","~$cljs.core/IVector","^;",306,"^96",3,"^97",true,"^P",["^Q",["^8Z",["^Q",[["^9M","^1<","^9V"]]]]],"^7","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"~$default-err",["^ ","^R","^43","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",21,"~:declared",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",10,"^;",54,"^<",21,"^9Y",true]],"~$example-config",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",60,"^:",6,"^;",60,"^<",20],"^R","^4P","^8","taoensso/timbre.cljs","^<",20,"^:",1,"^9",60,"^;",60,"^8V","~$cljs.core/IMap","^7","Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`."],"~$may-log?",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^<",46,"^9Q",["^ ","^93",false,"^9R",3,"^96",3,"^90",[["^10"],["^10","^9K"],["^10","^9K","~$?config"]],"^P",["^Q",[["^10"],["^10","^9K"],["^10","^9K","^:1"]]],"^92",["^Q",[null,null,null]]],"^:",38,"^9",240,"^;",240,"^8V","^95","^P",["^Q",["^8Z",["^Q",[["^10"],["^10","^9K"],["^10","^9K","^:1"]]]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"^R","^41","^8","taoensso/timbre.cljs","^<",46,"^9Q",["^ ","^93",false,"^9R",3,"^96",3,"^90",[["^10"],["^10","^9K"],["^10","^9K","^:1"]],"^P",["^Q",[["^10"],["^10","^9K"],["^10","^9K","^:1"]]],"^92",["^Q",[null,null,null]]],"^90",[["^10"],["^10","^9K"],["^10","^9K","^:1"]],"^91",null,"^9R",3,"^92",["^Q",[null,null,null]],"^:",1,"^93",false,"^9S",[["^ ","^9R",1,"^93",false,"^8V","^95"],["^ ","^9R",2,"^93",false,"^8V","^95"],["^ ","^9R",3,"^93",false,"^8V","^95"]],"^9",240,"^94","^95","^;",240,"^96",3,"^8V","^95","^97",true,"^P",["^Q",[["^10"],["^10","^9K"],["^10","^9K","^:1"]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"~$level>=",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",167,"^:",7,"^;",167,"^<",14,"^P",["^Q",["^8Z",["^Q",[["~$x","~$y"]]]]]],"^R","^4K","^8","taoensso/timbre.cljs","^<",14,"^90",["^Q",[["~$x","~$y"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",167,"^94","^95","^;",167,"^96",2,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$x","~$y"]]]]]],"~$set-config!",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",145,"^:",9,"^;",145,"^<",20,"^P",["^Q",["^8Z",["^Q",[["~$m"]]]]]],"^R","^3Z","^8","taoensso/timbre.cljs","^<",20,"^90",["^Q",[["~$m"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",145,"^94","^9<","^;",145,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$m"]]]]]],"~$-levels-vec",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",158,"^:",14,"^;",158,"^<",25,"^99",true],"^R","^4H","^8","taoensso/timbre.cljs","^<",25,"~:const-expr",["^ ","^2T","~:vector","~:env",["^ ","~:context","~:expr"],"^37",["~:trace","~:debug","~:info","~:warn","~:error","~:fatal","~:report"],"~:items",[["^ ","^2T","^99","~:val","^::","^:7",["^ ","^:8","^:9"],"^37","^::","^8V","~$cljs.core/Keyword"],["^ ","^2T","^99","^:B","^:;","^:7",["^ ","^:8","^:9"],"^37","^:;","^8V","^:C"],["^ ","^2T","^99","^:B","^:<","^:7",["^ ","^:8","^:9"],"^37","^:<","^8V","^:C"],["^ ","^2T","^99","^:B","^:=","^:7",["^ ","^:8","^:9"],"^37","^:=","^8V","^:C"],["^ ","^2T","^99","^:B","^:>","^:7",["^ ","^:8","^:9"],"^37","^:>","^8V","^:C"],["^ ","^2T","^99","^:B","^:?","^:7",["^ ","^:8","^:9"],"^37","^:?","^8V","^:C"],["^ ","^2T","^99","^:B","^:@","^:7",["^ ","^:8","^:9"],"^37","^:@","^8V","^:C"]],"~:children",["^:A"],"^8V","^9W"],"^:",1,"^99",true,"^9",158,"^;",158,"^8V","^9W"],"~$swap-config!",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",141,"^:",7,"^;",141,"^<",19,"^P",["^Q",["^8Z",["^Q",[["~$f","~$&","^11"]]]]],"^9Q",["^ ","^93",true,"^9R",1,"^96",1,"^90",[["^Q",["~$f","^11"]]],"^P",["^Q",[["~$f","~$&","^11"]]],"^92",["^Q",[null]]]],"^R","^4A","^8","taoensso/timbre.cljs","^<",19,"^9Q",["^ ","^93",true,"^9R",1,"^96",1,"^90",[["^Q",["~$f","^11"]]],"^P",["^Q",[["~$f","~$&","^11"]]],"^92",["^Q",[null]]],"^90",[["^Q",["~$f","^11"]]],"^91",null,"^9R",1,"^92",["^Q",[null]],"^:",1,"^93",true,"^9S",[["^ ","^9R",1,"^93",true]],"^9",141,"^94","^9<","^;",141,"^96",1,"^97",true,"^P",["^Q",[["~$f","~$&","^11"]]]],"~$console-?appender",["^ ","^R","^4>","^8","taoensso/timbre.cljs","^9",754,"^:",10,"^;",754,"^<",32,"^5",["^ ","^8","taoensso/timbre.cljs","^9",754,"^:",15,"^;",754,"^<",32]],"~$str-println",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",758,"^:",9,"^;",758,"^<",20,"^P",["^Q",["^8Z",["^Q",[["~$&","^9D"]]]]],"^9Q",["^ ","^93",true,"^9R",0,"^96",0,"^90",[["^Q",["^9D"]]],"^P",["^Q",[["~$&","^9D"]]],"^92",["^Q",[null]]]],"^R","^46","^8","taoensso/timbre.cljs","^<",20,"^9Q",["^ ","^93",true,"^9R",0,"^96",0,"^90",[["^Q",["^9D"]]],"^P",["^Q",[["~$&","^9D"]]],"^92",["^Q",[null]]],"^90",[["^Q",["^9D"]]],"^91",null,"^9R",0,"^92",["^Q",[null]],"^:",3,"^93",true,"^9S",[["^ ","^9R",0,"^93",true,"^8V",["^M",["^9<","^9E"]]]],"^9",758,"^94","^9<","^;",758,"^96",0,"^97",true,"^P",["^Q",[["~$&","^9D"]]]],"~$set-level!",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",148,"^:",11,"^;",148,"^<",21,"^P",["^Q",["^8Z",["^Q",[["^10"]]]]]],"^R","^4U","^8","taoensso/timbre.cljs","^<",21,"^90",["^Q",[["^10"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",148,"^94","^9<","^;",148,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["^10"]]]]]],"~$default-output-fn",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",35,"^:",7,"^;",35,"^<",24,"^P",["^Q",["^8Z",["^Q",[["~$data"],["^1=","^:J"]]]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.","^9Q",["^ ","^93",false,"^9R",2,"^96",2,"^90",[["^:J"],["^1=","^:J"]],"^P",["^Q",[["^:J"],["^1=","^:J"]]],"^92",["^Q",[null,null]]]],"^R","^55","^8","taoensso/timbre.cljs","^<",24,"^9Q",["^ ","^93",false,"^9R",2,"^96",2,"^90",[["^:J"],["^1=","^:J"]],"^P",["^Q",[["^:J"],["^1=","^:J"]]],"^92",["^Q",[null,null]]],"^90",[["^:J"],["^1=","^:J"]],"^91",null,"^9R",2,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9S",[["^ ","^9R",1,"^93",false,"^8V","^9<"],["^ ","^9R",2,"^93",false,"^8V","^9E"]],"^9",35,"^;",35,"^96",2,"^97",true,"^P",["^Q",[["^:J"],["^1=","^:J"]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts."],"~$default-out",["^ ","^R","^57","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",33,"^9Y",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",22,"^;",54,"^<",33,"^9Y",true]],"~$ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",176,"^:",25,"^;",176,"^<",34,"^8U",true],"^8U",true,"^R","^4B","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",176,"^;",176,"^8V","^8W","^7","Returns true iff given ns passes white/black lists."],"~$println-appender",["^ ","^R","^3O","^8","taoensso/timbre.cljs","^9",57,"^:",8,"^;",57,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",57,"^:",13,"^;",57,"^<",29]],"~$vrest",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",305,"^:",8,"^;",305,"^<",13,"^8U",true,"^P",["^Q",["^8Z",["^Q",[["~$v"]]]]]],"^8U",true,"^R","^4F","^8","taoensso/timbre.cljs","^<",13,"^90",["^Q",[["~$v"]]],"^91",null,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9",305,"^94",["^M",["^9W","^9<"]],"^;",305,"^96",1,"^97",true,"^P",["^Q",["^8Z",["^Q",[["~$v"]]]]]],"~$ordered-levels",["^ ","^R","^3L","^8","taoensso/timbre.cljs","^9",755,"^:",3,"^;",755,"^<",22,"^5",["^ ","^8","taoensso/timbre.cljs","^9",755,"^:",8,"^;",755,"^<",22],"^8V","^9W"],"~$-compile-ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",175,"^:",16,"^;",175,"^<",34,"^8U",true],"^8U",true,"^R","^4X","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",175,"^;",175,"^8V","^8W"],"~$get-hostname",["^ ","^R","^3U","^8","taoensso/timbre.cljs","^9",262,"^:",1,"^;",262,"^<",22,"^9Y",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",262,"^:",10,"^;",262,"^<",22,"^9Y",true]],"~$stacktrace",["^ ","^8Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",726,"^:",7,"^;",726,"^<",17,"^P",["^Q",["^8Z",["^Q",[["~$err"],["^:S","^1="]]]]],"^9Q",["^ ","^93",false,"^9R",2,"^96",2,"^90",[["^:S"],["^:S","^1="]],"^P",["^Q",[["^:S"],["^:S","^1="]]],"^92",["^Q",[null,null]]]],"^R","^3S","^8","taoensso/timbre.cljs","^<",17,"^9Q",["^ ","^93",false,"^9R",2,"^96",2,"^90",[["^:S"],["^:S","^1="]],"^P",["^Q",[["^:S"],["^:S","^1="]]],"^92",["^Q",[null,null]]],"^90",[["^:S"],["^:S","^1="]],"^91",null,"^9R",2,"^92",["^Q",[null,null]],"^:",1,"^93",false,"^9S",[["^ ","^9R",1,"^93",false,"^8V","^9<"],["^ ","^9R",2,"^93",false,"^8V","^9E"]],"^9",726,"^;",726,"^96",2,"^97",true,"^P",["^Q",[["^:S"],["^:S","^1="]]]]],"^34",["^ ","^J","^J","^2Y","^J","^U","^U","^36","^U","^30","^30"],"~:cljs.analyzer/constants",["^ ","^32",["^M",["~:given","~:ns-whitelist","~:inherit","^:@","~:fn","~:hash","^5","~:hash_","~:ns-blacklist","~:instant","~:rate-limit","~:else","~:config","~:vargs","~:output_","~:msg_","~:middleware-fn","^:=","^::","~:err","~:?file","^:;","~:hostname_","~:error-level?","~:appender","~:appender-id","~:?ns-str","~:enabled?","~:middleware","^:?","~:level","~:output-fn","~:?err","~:vargs_","^:<","~:stacktrace-fonts","~:no-stacktrace?","~:timestamp_","^:8","~:?line","~:min-level","~:f","^:>","~:console","~:?err_","~:?meta","~:location","~:auto","~:p","~:?msg-fmt","~:async?","~:appenders"]],"~:order",["^;F","^;E","^;A","^;C","^;6","^;>","^;9","^;:","^;G","^;H","^:V","^:[","^;@","^;B","^;Q","^:;","^;J","^::","^:<","^:=","^:>","^:?","^:@","^:U","^;2","^;N","~:f","^5","^;8","^;0","^;3","^;4","^;;","^:8","^;K","^;L","^;O","^;D","~:p","^;M","^:Z","^:Y","^;?","^;I","^;1","^:X","^;P","^:W","^;=","^;<","^;5","^;7"]],"^3<",["^ ","^33",["^M",[]],"^34",["^M",[]]],"^3=",["^ "],"^3>",["^31","^30","^2W","^J","^2Z"]],"^T","^U","~:ns-specs",["^ "],"~:ns-spec-vars",["^M",[]],"~:compiler-options",["^59",[["^;U","~:static-fns"],true,["^;U","~:shadow-tweaks"],null,["^;U","~:source-map-inline"],null,["^;U","~:elide-asserts"],false,["^;U","~:optimize-constants"],null,["^;U","^3C"],null,["^;U","~:external-config"],null,["^;U","~:tooling-config"],null,["^;U","~:emit-constants"],null,["^;U","~:load-tests"],null,["^;U","~:form-size-threshold"],null,["^;U","~:data-readers"],null,["^;U","~:infer-externs"],"^;N",["^;U","^3E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;U","~:fn-invoke-direct"],null,["^;U","~:source-map"],"/dev/null"]]]