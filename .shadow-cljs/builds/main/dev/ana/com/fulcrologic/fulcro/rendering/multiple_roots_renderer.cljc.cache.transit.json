["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.multiple_roots_renderer');\n/**\n * Register a mounted react component as a new root that should be managed. The\n *   options map can contain:\n * \n *   - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n *   to true, which causes it to happen once (on initial mount).\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$register_root_BANG_(var_args){\nvar G__60317 = arguments.length;\nswitch (G__60317) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118),true], null));\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__60318){\nvar map__60319 = p__60318;\nvar map__60319__$1 = (((((!((map__60319 == null))))?(((((map__60319.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60319.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60319):map__60319);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60319__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60319__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nvar app__$2 = (function (){var or__4126__auto__ = app__$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$2)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\nvar initialize_state_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$2,new cljs.core.Keyword(null,\"initialize-state!\",\"initialize-state!\",-1114074844));\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$2,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar known_roots = (function (){var G__60324 = app__$2;\nvar G__60324__$1 = (((G__60324 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__60324));\nvar G__60324__$2 = (((G__60324__$1 == null))?null:cljs.core.deref(G__60324__$1));\nif((G__60324__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__60324__$2);\n}\n})();\nvar initialized_QMARK_ = cljs.core.contains_QMARK_(known_roots,k);\nif(cljs.core.truth_((function (){var and__4115__auto__ = initialize_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (!(initialized_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})())){\n(initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2 ? initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2(app__$2,class$) : initialize_state_BANG_.call(null,app__$2,class$));\n\nvar G__60326_60512 = app__$2;\nvar G__60327_60513 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__60326_60512,G__60327_60513) : schedule_render_BANG_.call(null,G__60326_60512,G__60327_60513));\n} else {\n}\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,90,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,441181341);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$2),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,92,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Register-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,87875104);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Deregister a mounted root that should no longer be managed.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$deregister_root_BANG_(var_args){\nvar G__60341 = arguments.length;\nswitch (G__60341) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__60345){\nvar map__60346 = p__60345;\nvar map__60346__$1 = (((((!((map__60346 == null))))?(((((map__60346.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60346.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60346):map__60346);\nvar options = map__60346__$1;\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60346__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar app__$2 = (function (){var or__4126__auto__ = app__$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$2)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,103,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,1696940550);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$2),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.disj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,105,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Deregister-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,1507929917);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_roots_BANG_(app__$1,options){\nvar state_map = (function (){var G__60362 = app__$1;\nvar G__60362__$1 = (((G__60362 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__60362));\nif((G__60362__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__60362__$1);\n}\n})();\nvar known_roots = (function (){var G__60365 = app__$1;\nvar G__60365__$1 = (((G__60365 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__60365));\nvar G__60365__$2 = (((G__60365__$1 == null))?null:cljs.core.deref(G__60365__$1));\nif((G__60365__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__60365__$2);\n}\n})();\ncom.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\n\nvar seq__60369 = cljs.core.seq(cljs.core.keys(known_roots));\nvar chunk__60371 = null;\nvar count__60372 = (0);\nvar i__60373 = (0);\nwhile(true){\nif((i__60373 < count__60372)){\nvar k = chunk__60371.cljs$core$IIndexed$_nth$arity$2(null,i__60373);\nvar cls_60536 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_60537 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_60536,state_map);\nvar root_props_60538 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_60537,state_map,state_map);\nvar seq__60390_60541 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__60391_60542 = null;\nvar count__60392_60543 = (0);\nvar i__60393_60544 = (0);\nwhile(true){\nif((i__60393_60544 < count__60392_60543)){\nvar root_60546 = chunk__60391_60542.cljs$core$IIndexed$_nth$arity$2(null,i__60393_60544);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_60546,root_props_60538);\n\n\nvar G__60547 = seq__60390_60541;\nvar G__60548 = chunk__60391_60542;\nvar G__60549 = count__60392_60543;\nvar G__60550 = (i__60393_60544 + (1));\nseq__60390_60541 = G__60547;\nchunk__60391_60542 = G__60548;\ncount__60392_60543 = G__60549;\ni__60393_60544 = G__60550;\ncontinue;\n} else {\nvar temp__5735__auto___60553 = cljs.core.seq(seq__60390_60541);\nif(temp__5735__auto___60553){\nvar seq__60390_60554__$1 = temp__5735__auto___60553;\nif(cljs.core.chunked_seq_QMARK_(seq__60390_60554__$1)){\nvar c__4556__auto___60555 = cljs.core.chunk_first(seq__60390_60554__$1);\nvar G__60556 = cljs.core.chunk_rest(seq__60390_60554__$1);\nvar G__60557 = c__4556__auto___60555;\nvar G__60558 = cljs.core.count(c__4556__auto___60555);\nvar G__60559 = (0);\nseq__60390_60541 = G__60556;\nchunk__60391_60542 = G__60557;\ncount__60392_60543 = G__60558;\ni__60393_60544 = G__60559;\ncontinue;\n} else {\nvar root_60560 = cljs.core.first(seq__60390_60554__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_60560,root_props_60538);\n\n\nvar G__60561 = cljs.core.next(seq__60390_60554__$1);\nvar G__60562 = null;\nvar G__60563 = (0);\nvar G__60564 = (0);\nseq__60390_60541 = G__60561;\nchunk__60391_60542 = G__60562;\ncount__60392_60543 = G__60563;\ni__60393_60544 = G__60564;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__60565 = seq__60369;\nvar G__60566 = chunk__60371;\nvar G__60567 = count__60372;\nvar G__60568 = (i__60373 + (1));\nseq__60369 = G__60565;\nchunk__60371 = G__60566;\ncount__60372 = G__60567;\ni__60373 = G__60568;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__60369);\nif(temp__5735__auto__){\nvar seq__60369__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__60369__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__60369__$1);\nvar G__60571 = cljs.core.chunk_rest(seq__60369__$1);\nvar G__60572 = c__4556__auto__;\nvar G__60573 = cljs.core.count(c__4556__auto__);\nvar G__60574 = (0);\nseq__60369 = G__60571;\nchunk__60371 = G__60572;\ncount__60372 = G__60573;\ni__60373 = G__60574;\ncontinue;\n} else {\nvar k = cljs.core.first(seq__60369__$1);\nvar cls_60575 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_60576 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_60575,state_map);\nvar root_props_60577 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_60576,state_map,state_map);\nvar seq__60396_60578 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__60397_60579 = null;\nvar count__60398_60580 = (0);\nvar i__60399_60581 = (0);\nwhile(true){\nif((i__60399_60581 < count__60398_60580)){\nvar root_60587 = chunk__60397_60579.cljs$core$IIndexed$_nth$arity$2(null,i__60399_60581);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_60587,root_props_60577);\n\n\nvar G__60588 = seq__60396_60578;\nvar G__60589 = chunk__60397_60579;\nvar G__60590 = count__60398_60580;\nvar G__60591 = (i__60399_60581 + (1));\nseq__60396_60578 = G__60588;\nchunk__60397_60579 = G__60589;\ncount__60398_60580 = G__60590;\ni__60399_60581 = G__60591;\ncontinue;\n} else {\nvar temp__5735__auto___60592__$1 = cljs.core.seq(seq__60396_60578);\nif(temp__5735__auto___60592__$1){\nvar seq__60396_60593__$1 = temp__5735__auto___60592__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__60396_60593__$1)){\nvar c__4556__auto___60594 = cljs.core.chunk_first(seq__60396_60593__$1);\nvar G__60595 = cljs.core.chunk_rest(seq__60396_60593__$1);\nvar G__60596 = c__4556__auto___60594;\nvar G__60597 = cljs.core.count(c__4556__auto___60594);\nvar G__60598 = (0);\nseq__60396_60578 = G__60595;\nchunk__60397_60579 = G__60596;\ncount__60398_60580 = G__60597;\ni__60399_60581 = G__60598;\ncontinue;\n} else {\nvar root_60600 = cljs.core.first(seq__60396_60593__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_60600,root_props_60577);\n\n\nvar G__60603 = cljs.core.next(seq__60396_60593__$1);\nvar G__60604 = null;\nvar G__60605 = (0);\nvar G__60606 = (0);\nseq__60396_60578 = G__60603;\nchunk__60397_60579 = G__60604;\ncount__60398_60580 = G__60605;\ni__60399_60581 = G__60606;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__60607 = cljs.core.next(seq__60369__$1);\nvar G__60608 = null;\nvar G__60609 = (0);\nvar G__60610 = (0);\nseq__60369 = G__60607;\nchunk__60371 = G__60608;\ncount__60372 = G__60609;\ni__60373 = G__60610;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_stale_components_BANG_(app__$1,options){\nvar map__60407 = app__$1;\nvar map__60407__$1 = (((((!((map__60407 == null))))?(((((map__60407.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60407.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60407):map__60407);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60407__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60408 = cljs.core.deref(runtime_atom);\nvar map__60408__$1 = (((((!((map__60408 == null))))?(((((map__60408.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60408.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60408):map__60408);\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60408__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__60414 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__60414__$1 = (((((!((map__60414 == null))))?(((((map__60414.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60414.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60414):map__60414);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60414__$1,true);\nvar seq__60419 = cljs.core.seq(limited_idents);\nvar chunk__60420 = null;\nvar count__60421 = (0);\nvar i__60422 = (0);\nwhile(true){\nif((i__60422 < count__60421)){\nvar i = chunk__60420.cljs$core$IIndexed$_nth$arity$2(null,i__60422);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,i);\n\n\nvar G__60617 = seq__60419;\nvar G__60618 = chunk__60420;\nvar G__60619 = count__60421;\nvar G__60620 = (i__60422 + (1));\nseq__60419 = G__60617;\nchunk__60420 = G__60618;\ncount__60421 = G__60619;\ni__60422 = G__60620;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__60419);\nif(temp__5735__auto__){\nvar seq__60419__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__60419__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__60419__$1);\nvar G__60623 = cljs.core.chunk_rest(seq__60419__$1);\nvar G__60624 = c__4556__auto__;\nvar G__60625 = cljs.core.count(c__4556__auto__);\nvar G__60626 = (0);\nseq__60419 = G__60623;\nchunk__60420 = G__60624;\ncount__60421 = G__60625;\ni__60422 = G__60626;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__60419__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,i);\n\n\nvar G__60628 = cljs.core.next(seq__60419__$1);\nvar G__60629 = null;\nvar G__60630 = (0);\nvar G__60631 = (0);\nseq__60419 = G__60628;\nchunk__60420 = G__60629;\ncount__60421 = G__60630;\ni__60422 = G__60631;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n * \n *   This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n *   (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n *   will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n *   ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n *   events that should really only affect a known set of components (like the input field).\n * \n *   This option does *not* currently support using query keywords in the refresh set. Only idents.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_BANG_(var_args){\nvar G__60427 = arguments.length;\nswitch (G__60427) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__60439){\nvar map__60440 = p__60439;\nvar map__60440__$1 = (((((!((map__60440 == null))))?(((((map__60440.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60440.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60440):map__60440);\nvar options = map__60440__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60440__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60440__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4126__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_(app__$1,options);\n}catch (e60448){var e = e60448;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,152,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n}),null)),null,1622129027);\n\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\n}}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n *   in the component lifecycle:\n * \n *   ```\n *   (defsc UIRoot [this props]\n *  {:componentDidMount     (fn [this] (mroot/register-root! this))\n *   :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n *   :initial-state {}\n *   :query [root-like-query]}\n *  ...)\n *   ```\n * \n *   The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n *   one mounted app.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_react_class = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_react_class(UIRoot,fulcro_app){\nvar cls = (function (){\nreturn null;\n});\nvar ui_root = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIRoot);\ngoog.object.extend(cls.prototype,React.Component.prototype,cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),(function (){\nvar this$ = this;\nvar js_props = this$.props;\nvar app__60282__auto__ = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn fulcro_app;\n}\n})();\nvar d__60283__auto__ = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})();\nvar _STAR_app_STAR__orig_val__60465 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_shared_STAR__orig_val__60466 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_depth_STAR__orig_val__60467 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nvar _STAR_app_STAR__temp_val__60468 = app__60282__auto__;\nvar _STAR_shared_STAR__temp_val__60469 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app__60282__auto__);\nvar _STAR_depth_STAR__temp_val__60470 = d__60283__auto__;\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__60468);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__60469);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__60470);\n\ntry{var _STAR_denormalize_time_STAR__orig_val__60472 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__60473 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(fulcro_app)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__60473);\n\ntry{var query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(UIRoot);\nvar state_map = (function (){var G__60474 = fulcro_app;\nvar G__60474__$1 = (((G__60474 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__60474));\nif((G__60474__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__60474__$1);\n}\n})();\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__60475 = props;\nvar G__60476 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"js-props\",\"js-props\",1900369280),js_props], null);\nreturn (ui_root.cljs$core$IFn$_invoke$arity$2 ? ui_root.cljs$core$IFn$_invoke$arity$2(G__60475,G__60476) : ui_root.call(null,G__60475,G__60476));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__60472);\n}}finally {(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__60467);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__60466);\n\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__60465);\n}})], null)));\n\nreturn cls;\n});\n/**\n * Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n * has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n * \n *   `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n *   to regsiter/deregister itself as a root.\n * \n *   `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n *   props, so a `:keyfn` would have to be based on something else.\n * \n *   You normally do not pass any props to this factory because it is controlling the component and feeding props from\n *   the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n *   have a bunch of sibling roots and need to set the react key for each.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_factory(var_args){\nvar G__60482 = arguments.length;\nswitch (G__60482) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1 = (function (UIClass){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2(UIClass,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2 = (function (UIClass,options){\nvar constructor$ = (function (){\nreturn null;\n});\nvar ui_factory = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIClass);\nvar render = (function (this$){\nvar _STAR_denormalize_time_STAR__orig_val__60490 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__60491 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__60491);\n\ntry{var state_map = (function (){var G__60493 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar G__60493__$1 = (((G__60493 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__60493));\nif((G__60493__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__60493__$1);\n}\n})();\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(UIClass,state_map);\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__60496 = (function (){var or__4126__auto__ = props;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar G__60497 = com.fulcrologic.fulcro.components.props(this$);\nreturn (ui_factory.cljs$core$IFn$_invoke$arity$2 ? ui_factory.cljs$core$IFn$_invoke$arity$2(G__60496,G__60497) : ui_factory.call(null,G__60496,G__60497));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__60490);\n}});\nvar wrapper_class = com.fulcrologic.fulcro.components.configure_component_BANG_(constructor$,new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"wrapper\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper\",-2035797237),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (_,___$1,___$2){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),render], null));\nvar wrapper_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(wrapper_class,options);\nreturn wrapper_factory;\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","~:file","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",61],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$with-app-context","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer"],"~:excludes",["~#set",[]],"~:macros",["^ ","^H",["^ ","~:arglists",["~#list",[["~$fulcro-app","~$&","~$body"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:name","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/with-app-context","~:ns","^I","~:macro",true]],"^Q","^I","~:op","^S","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^Z","~$log","~$taoensso.timbre","~$ior","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^Z","~$com.fulcrologic.fulcro.algorithms.denormalize","^18","~$cljs.core","^19","~$gobj","~$goog.object","~$goog","^1<","^1;","^1;","~$cljsjs.react","^1=","^14","^14","^Y","^Y","^12","^12","^16","^16","^10","^10","~$fdn","^18"],"~:seen",["^K",["~:require","~:require-macros"]],"~:uses",null,"^1A",["^ ","^I","^I","^19","^19","^[","^10","^15","^16","^16","^16","^10","^10"],"~:form",["^N",["~$ns","^I","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ",["^N",["^1A",["^I","~:refer",["^H"]]]],["^N",["^1@",["^14","~:as","^13"],["^12","^1F","^11"],["^18","^1F","^1>"],["^16","^1F","^15"],["^Y","^1F","^X"],["^Z","^1F","^17"],["^10","^1F","^["],"^1=",["^1;","^1F","^1:"]]]]],"~:flags",["^ ","^1A",["^K",[]],"^1@",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^1<","^19","^14","^12","^18","^16","^Y","^Z","^10","^1=","^1;"]],"^S","^I","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],"~:compiled-at",1609109804300,"~:resource-name","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.multiple-roots-renderer\n  \"Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :refer [with-app-context]]))\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.rendering.ident-optimized-render :as ior]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    #?@(:cljs\n        [cljsjs.react\n         [goog.object :as gobj]])))\n\n(defn register-root!\n  \"Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).\"\n  ([react-instance]\n   (register-root! react-instance {:initialize? true}))\n  ([react-instance {:keys [app initialize?]}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class             (comp/react-type react-instance)\n             k                 (comp/class->registry-key class)\n             initialize-state! (ah/app-algorithm app :initialize-state!)\n             schedule-render!  (ah/app-algorithm app :schedule-render!)\n             known-roots       (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)\n             initialized?      (contains? known-roots k)]\n         (when (and initialize? (not initialized?))\n           (initialize-state! app class)\n           ;; We've already rendered this frame, so if we need initialized, we need a refresh\n           (schedule-render! app {:force-root? true}))\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] (fnil conj #{}) react-instance))\n       (log/error \"Register-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn deregister-root!\n  \"Deregister a mounted root that should no longer be managed.\"\n  ([react-instance]\n   (deregister-root! react-instance {}))\n  ([react-instance {:keys [app] :as options}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class (comp/react-type react-instance)\n             k     (comp/class->registry-key class)]\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] disj react-instance))\n       (log/error \"Deregister-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn render-roots! [app options]\n  (let [state-map   (some-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        known-roots (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)]\n    (kr/render! app options)\n    (doseq [k (keys known-roots)\n            :let [cls        (comp/registry-key->class k)\n                  query      (comp/get-query cls state-map)\n                  root-props (fdn/db->tree query state-map state-map)]]\n      (doseq [root (get known-roots k)]\n        (comp/tunnel-props! root root-props)))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app options]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [only-refresh]} @runtime-atom\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true} (group-by eql/ident? only-refresh)]\n        (doseq [i limited-idents]\n          (ior/render-components-with-ident! app i)))\n      (render-roots! app options))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (render-roots! app options)\n     (try\n       (render-stale-components! app options)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (render-roots! app options))))))\n\n#?(:clj\n   (defmacro with-app-context\n     \"Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     \"\n     [fulcro-app & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [app# (or comp/*app* ~fulcro-app)\n              d#   (or comp/*depth* 0)]\n          (binding [comp/*app*    app#\n                    comp/*shared* (comp/shared app#)\n                    comp/*depth*  d#]\n            ~@body)))))\n\n(defn floating-root-react-class\n  \"Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  \"\n  [UIRoot fulcro-app]\n  (let [cls     (fn [])\n        ui-root (comp/computed-factory UIRoot)]\n    #?(:cljs\n       (gobj/extend (.-prototype cls) js/React.Component.prototype\n         (clj->js\n           {:shouldComponentUpdate (fn [] false)\n            :render                (fn []\n                                     (this-as ^js this\n                                       (let [js-props (.-props this)]\n                                         (with-app-context fulcro-app\n                                           (binding [fdn/*denormalize-time* (-> fulcro-app :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                                             (let [query     (comp/get-query UIRoot)\n                                                   state-map (some-> fulcro-app :com.fulcrologic.fulcro.application/state-atom deref)\n                                                   props     (fdn/db->tree query state-map state-map)]\n                                               (ui-root props {:js-props js-props})))))))})))\n    cls))\n\n(defn floating-root-factory\n  \"Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  \"\n  ([UIClass]\n   (floating-root-factory UIClass {}))\n  ([UIClass options]\n   (let [constructor     (fn [])\n         ui-factory      (comp/computed-factory UIClass)\n         render          (fn [this]\n                           (binding [fdn/*denormalize-time* (-> comp/*app* :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                             (let [state-map (some-> comp/*app* :com.fulcrologic.fulcro.application/state-atom deref)\n                                   query     (comp/get-query UIClass state-map)\n                                   props     (fdn/db->tree query state-map state-map)]\n                               (ui-factory (or props {}) (comp/props this)))))\n         wrapper-class   (comp/configure-component! constructor ::wrapper\n                           {:shouldComponentUpdate (fn [_ _ _] false)\n                            :render                render})\n         wrapper-factory (comp/factory wrapper-class options)]\n     wrapper-factory)))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__60317","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","js/Error","p__60318","map__60319","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","react-instance","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","app","initialize?","or__4126__auto__","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.components/*app*","cljs.core/map?","class","com.fulcrologic.fulcro.components/react-type","k","com.fulcrologic.fulcro.components/class->registry-key","initialize-state!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","schedule-render!","known-roots","G__60324","cljs.core/deref","initialized?","cljs.core/contains?","and__4115__auto__","G__60326","G__60327","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.fnil","cljs.core/conj","G__60341","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","p__60345","map__60346","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","options","cljs.core/disj","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","state-map","G__60362","G__60365","com.fulcrologic.fulcro.rendering.keyframe-render/render!","seq__60369","cljs.core/seq","chunk__60371","count__60372","i__60373","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/keys","cls","com.fulcrologic.fulcro.components/registry-key->class","query","com.fulcrologic.fulcro.components.get_query","root-props","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","seq__60390","chunk__60391","count__60392","i__60393","seq__60396","chunk__60397","count__60398","i__60399","root","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","map__60407","map__60408","runtime-atom","only-refresh","limited-refresh?","map__60414","limited-idents","cljs.core/group-by","edn-query-language.core/ident?","seq__60419","chunk__60420","count__60421","i__60422","i","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","G__60427","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","p__60439","map__60440","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_","force-root?","root-props-changed?","e60448","e","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","UIRoot","fulcro-app","ui-root","com.fulcrologic.fulcro.components.computed_factory","goog.object/extend","js/React.Component.prototype","cljs.core/clj->js","this","js-props","app__60282__auto__","d__60283__auto__","com.fulcrologic.fulcro.components/*depth*","*app*-orig-val__60465","*shared*-orig-val__60466","com.fulcrologic.fulcro.components/*shared*","*depth*-orig-val__60467","*app*-temp-val__60468","*shared*-temp-val__60469","com.fulcrologic.fulcro.components.shared","*depth*-temp-val__60470","*denormalize-time*-orig-val__60472","*denormalize-time*-temp-val__60473","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","G__60474","props","G__60475","G__60476","G__60482","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","UIClass","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","constructor","ui-factory","render","*denormalize-time*-orig-val__60490","*denormalize-time*-temp-val__60491","G__60493","G__60496","G__60497","com.fulcrologic.fulcro.components/props","wrapper-class","com.fulcrologic.fulcro.components/configure-component!","_","wrapper-factory","com.fulcrologic.fulcro.components.factory"]],"~:used-vars",["^K",["~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$taoensso.timbre/-log!","~$cljs.core/count","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","~$cljs.core/fnil","~$cljs.core/map?","~$cljs.core/conj","~$taoensso.timbre/*config*","~$cljs.core/swap!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","~$com.fulcrologic.fulcro.components/*app*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","~$com.fulcrologic.fulcro.components/*shared*","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/*depth*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","~$cljs.core/not","~$cljs.core/disj","~$goog.object/extend","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$js/React.Component.prototype","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","~$cljs.core/update-in","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1K","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^1<","~$goog.dom.HtmlElement"]]],["^1K","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.labs.userAgent.util","~$goog.string"]]],["^1K","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19"]]],["^1K","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.array","~$goog.asserts"]]],["^1K","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.Promise","~$goog.events.EventTarget"]]],["^1K","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^10"]]],["^1K","cljs/spec/gen/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$goog.Uri"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$clojure.string","^2S"]]],["^1K","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U"]]],["^1K","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2S"]]],["^1K","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1K","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2R","^1;","~$goog.string.internal"]]],["^1K","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^30"]]],["^1K","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U"]]],["^1K","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^10","^2Y","^Z","^1;","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1K","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$expound.paths","^@"]]],["^1K","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2R","~$goog.reflect","^2S"]]],["^1K","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1K","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1K","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^1;","^2S","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1K","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.async.FreeList"]]],["^1K","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2Z","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1K","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2["]]],["^1K","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2S","^3G"]]],["^1K","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.structs.Heap"]]],["^1K","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.Timer","^2T","^2U","^3P","^2W","~$goog.json.hybrid","~$goog.log","^3M","^3L","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1;","^2S","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^2["]]],["^1K","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19"]]],["^1K","cljs/pprint.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","^2S","^3G"]]],["^1K","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^3U","^3V","^3W","^3T","^2T","^2S","^3G"]]],["^1K","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$expound.problems","^@","^2Y","^3C","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1K","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1K","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.Disposable","^2U","^3H","~$goog.events.Event","^3R","^3S","^1;"]]],["^1K","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","^10","^@","~$expound.alpha"]]],["^1K","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.disposable.IDisposable"]]],["^1K","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y"]]],["^1K","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["8d0c12ef4685cbbcf28e21ed74f34deddf731743","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U"]]],["^1K","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^43","~$goog.structs.Collection","^44"]]],"~:SHADOW-TIMESTAMP",[1609109508000,1609109508000,1609109508000],["^4A","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^4B","~$module$node_modules$object_assign$index"]]],["^1K","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","^3="]]],["^1K","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.events.ListenableKey"]]],["^1K","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.html.trustedtypes","^33","^34","^35","^36"]]],["^1K","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","~$goog.events.Listener","^1;"]]],["^1K","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$taoensso.truss.impl"]]],["^1K","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^@"]]],["^1K","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^14","^12","^18","^16","^Y","^Z","^10","^1=","^1;"]]],["^1K","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","~$goog.html.SafeUrl","^35","^36","^30"]]],["^1K","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4L","^32","~$goog.html.uncheckedconversions","^35","^30"]]],["^1K","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^@","^49"]]],["^1K","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^3C"]]],["^1K","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19"]]],["^1K","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^3:","^3<","^2["]]],["^1K","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1K","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^3I","~$goog.structs.PriorityPool"]]],["^1K","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","~$goog.dom.TagName","~$goog.dom.tags","^4P","^4Q","~$goog.html.SafeStyleSheet","^4L","^32","^4I","^33","^34","^3:","^1;","^35","^36","^30"]]],["^1K","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^1;"]]],["^1K","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T"]]],["^1K","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2R","^2S"]]],["^1K","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","~$taoensso.encore"]]],["^1K","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^1;","^3X","^3E","^3G"]]],["^1K","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4V","~$goog.dom.safe","^4O","^4R","~$goog.math.Coordinate","~$goog.math.Size","^1;","^2S","~$goog.string.Unicode","^2["]]],["^1K","com/fulcrologic/fulcro/components.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^1;","^1=","^Z","^@","^10","^4Y","^47","^2Y","~$com.fulcrologic.fulcro.algorithms.do-not-use","^18","^Y","~$com.fulcrologic.guardrails.core","^3C"]]],["^1K","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.debug.Error","^4["]]],["^1K","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.debug.LogRecord"]]],["^1K","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","^2S","^43","^44","^45","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^4A","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^4B"]]],["^1K","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.Thenable","^2U","^3O","~$goog.async.run","^3B","^56","~$goog.promise.Resolver"]]],["^1K","cljs/spec/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^1;","^47","^D","^2Y"]]],["^1K","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",[]]],["^1K","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.json"]]],["^1K","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^1;"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^3U","^2Y","~$cljs.tools.reader.impl.inspect"]]],["^1K","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","~$module$node_modules$react$index"]]],["^1K","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2S","^3G"]]],["^1K","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^4=","~$goog.structs.Queue","~$goog.structs.Set"]]],["^4A","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","6093d43b27c84de58b9ce55e3a930469339c9e54","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^4B","^4G"]]],["^1K","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^1;","~$goog.structs.Node"]]],["^1K","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U"]]],["^1K","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^50","^4R","^35","^30"]]],["^1K","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^18","^Y","^16"]]],["^1K","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^30"]]],["^1K","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","^@","^B","^3C","^49","^4:","^39","^47","^3F","^2S"]]],["^1K","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","~$goog.debug.errorcontext","^2["]]],["^1K","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.math"]]],["^1K","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^3V","^2S","^3G"]]],["^1K","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","^4N","^5D"]]],["^1K","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^3P","~$goog.dom","^4V","^50","^4N","^4O","^32","^3:","^3;","^35"]]],["^1K","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","^4O","^4P","^4Q","^4X","^4L","^32","^35","^30"]]],["^1K","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","~$goog.debug","~$goog.debug.LogBuffer","^57"]]],["^1K","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^4=","~$goog.events.EventId"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^3T","^3U","^3V"]]],["^1K","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","~$goog.math.Long","~$goog.math.Integer","^2S","^1;","^2T","^2X","^3G"]]],["^1K","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","^4I","^35","^36"]]],["^1K","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^5F","~$goog.debug.LogManager","^57","~$goog.debug.Logger"]]],["^1K","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","^4Q","^1;","^35","^36","^30"]]],["^1K","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^5F","^2Z","^4>","~$goog.events.EventType","^3=","^2["]]],["^1K","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^3="]]],["^1K","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2["]]],["^1K","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19"]]],["^1K","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2T","^2U","^2S"]]],["^1K","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","^36"]]],["^1K","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^2Y","^4Y","~$taoensso.timbre.appenders.core"]]],["^1K","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^14","^18","^16","^3C","^Z","^10"]]],["^1K","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^5H"]]],["^1K","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^4;"]]],["^1K","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^19","^10","^3C","^Z"]]],["^1K","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","~$goog.net.WrapperXmlHttpFactory","^4<"]]],["^1K","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<"]]],["^1K","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^1<","^2U","^37","^2S","^2[","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/alpha.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/rendering/keyframe_render.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/gen/alpha.clj",1594291030000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/edn.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1594291029000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/pprint.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/gen/alpha.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/components.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj",1594291030000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1601468675000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",1,"^9",5,"^:",1,"^;",61],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I"],"^J",["^K",[]],"^L",["^ ","^H",["^ ","^M",["^N",[["^O","~$&","^P"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^Q","^R","^S","^I","^T",true]],"~:shadow/js-access-properties",["^K",["Component"]],"^Q","^I","^V",null,"^W",["^ ","^X","^Y","^Z","^Z","^[","^10","^11","^12","^13","^14","^15","^16","^17","^Z","^18","^18","^19","^19","^1:","^1;","^1<","^1<","^1;","^1;","^1=","^1=","^14","^14","^Y","^Y","^12","^12","^16","^16","^10","^10","^1>","^18"],"^1?",["^K",["^1@","^1A"]],"~:shadow/js-access-global",["^K",["React","Error"]],"^1B",null,"~:defs",["^ ","~$register-root!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",69,"^9",7,"^:",69,"^;",21,"^M",["^N",["~$quote",["^N",[["~$react-instance"],["^7>",["^ ","~:keys",["~$app","~$initialize?"]]]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]],"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]]],"~:arglists-meta",["^N",[null,null]]]],"^Q","^21","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",21,"^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]],"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]]],"^7G",["^N",[null,null]]],"^7F",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]],"~:protocol-impl",null,"^7D",2,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"~:methods",[["^ ","^7D",1,"^7C",false,"~:tag","~$any"],["^ ","^7D",2,"^7C",false,"^7J",["^K",[null,"^7K","~$clj-nil"]]]],"^8",69,"^:",69,"^7E",2,"~:fn-var",true,"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@","^7A"]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount)."],"~$deregister-root!",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",94,"^9",7,"^:",94,"^;",23,"^M",["^N",["^7=",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","~$options"]]]]]],"^6","Deregister a mounted root that should no longer be managed.","^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]],"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]]],"^7G",["^N",[null,null]]]],"^Q","^2>","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",23,"^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]],"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]]],"^7G",["^N",[null,null]]],"^7F",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]],"^7H",null,"^7D",2,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^7I",[["^ ","^7D",1,"^7C",false,"^7J","^7K"],["^ ","^7D",2,"^7C",false,"^7J",["^K",[null,"^7K","^7L"]]]],"^8",94,"^:",94,"^7E",2,"^7M",true,"^M",["^N",[["^7>"],["^7>",["^ ","^7?",["^7@"],"^1F","^7O"]]]],"^6","Deregister a mounted root that should no longer be managed."],"~$render-roots!",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",107,"^9",7,"^:",107,"^;",20,"^M",["^N",["^7=",["^N",[["^7@","^7O"]]]]]],"^Q","^27","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",20,"^7F",["^N",[["^7@","^7O"]]],"^7H",null,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^8",107,"~:ret-tag","^7L","^:",107,"^7E",2,"^7M",true,"^M",["^N",["^7=",["^N",[["^7@","^7O"]]]]]],"~$render-stale-components!",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",118,"^9",7,"^:",118,"^;",31,"^M",["^N",["^7=",["^N",[["^7@","^7O"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^Q","^29","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",31,"^7F",["^N",[["^7@","^7O"]]],"^7H",null,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^8",118,"^7Q","^7L","^:",118,"^7E",2,"^7M",true,"^M",["^N",["^7=",["^N",[["^7@","^7O"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^M",["^N",["^7=",["^N",[["^7@"],["^7@",["^ ","^7?",["~$force-root?","~$root-props-changed?"],"^1F","^7O"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.","^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]],"^M",["^N",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]]],"^7G",["^N",[null,null]]]],"^Q","^2G","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",14,"^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]],"^M",["^N",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]]],"^7G",["^N",[null,null]]],"^7F",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]],"^7H",null,"^7D",2,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^7I",[["^ ","^7D",1,"^7C",false,"^7J","^7K"],["^ ","^7D",2,"^7C",false,"^7J",["^K",[null,"^7L"]]]],"^8",132,"^:",132,"^7E",2,"^7M",true,"^M",["^N",[["^7@"],["^7@",["^ ","^7?",["^7T","^7U"],"^1F","^7O"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents."],"~$floating-root-react-class",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",173,"^9",7,"^:",173,"^;",32,"^M",["^N",["^7=",["^N",[["~$UIRoot","^O"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"^Q","^1Z","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",32,"^7F",["^N",[["^7W","^O"]]],"^7H",null,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^8",173,"^7Q","~$function","^:",173,"^7E",2,"^7M",true,"^M",["^N",["^7=",["^N",[["^7W","^O"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"~$floating-root-factory",["^ ","^7<",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",207,"^9",7,"^:",207,"^;",28,"^M",["^N",["^7=",["^N",[["~$UIClass"],["^7Z","^7O"]]]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  ","^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7Z"],["^7Z","^7O"]],"^M",["^N",[["^7Z"],["^7Z","^7O"]]],"^7G",["^N",[null,null]]]],"^Q","^2A","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",28,"^7B",["^ ","^7C",false,"^7D",2,"^7E",2,"^7F",[["^7Z"],["^7Z","^7O"]],"^M",["^N",[["^7Z"],["^7Z","^7O"]]],"^7G",["^N",[null,null]]],"^7F",[["^7Z"],["^7Z","^7O"]],"^7H",null,"^7D",2,"^7G",["^N",[null,null]],"^9",1,"^7C",false,"^7I",[["^ ","^7D",1,"^7C",false,"^7J","^7K"],["^ ","^7D",2,"^7C",false,"^7J",["^K",["~$clj","~$cljs.core/MetaFn","^7L"]]]],"^8",207,"^:",207,"^7E",2,"^7M",true,"^M",["^N",[["^7Z"],["^7Z","^7O"]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  "]],"^1A",["^ ","^I","^I","^19","^19","^[","^10","^15","^16","^16","^16","^10","^10"],"~:cljs.analyzer/constants",["^ ","^1?",["^K",["~:js-props","~:initialize-state!","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper","~:debug","~:force-root?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:shouldComponentUpdate","~:render","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:app","~:info","~:error","~:initialize?","~:auto","~:p","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t"]],"~:order",["^8B","^8?","^83","^88","^8>","^84","^87","^86","~:p","^8C","^8A","^89","^8:","^8=","^8@","^8;","^8<","^8D","^82","^85"]],"^1G",["^ ","^1A",["^K",[]],"^1@",["^K",[]]],"^1H",["^ "],"^1I",["^1<","^19","^14","^12","^18","^16","^Y","^Z","^10","^1=","^1;"]],"^S","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2L",[["^8H","~:static-fns"],true,["^8H","~:shadow-tweaks"],null,["^8H","~:source-map-inline"],null,["^8H","~:elide-asserts"],false,["^8H","~:optimize-constants"],null,["^8H","^1N"],null,["^8H","~:external-config"],null,["^8H","~:tooling-config"],null,["^8H","~:emit-constants"],null,["^8H","~:load-tests"],null,["^8H","~:form-size-threshold"],null,["^8H","~:data-readers"],null,["^8H","~:infer-externs"],"^8C",["^8H","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8H","~:fn-invoke-direct"],null,["^8H","~:source-map"],"/dev/null"]]]