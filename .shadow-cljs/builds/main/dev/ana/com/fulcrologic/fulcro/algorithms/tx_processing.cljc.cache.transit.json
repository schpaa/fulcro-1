["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517)], null);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__59905){\nreturn cljs.core.vector_QMARK_(G__59905);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null))], null);\n\nvar parallel_QMARK_ = (function (p__59907){\nvar map__59908 = p__59907;\nvar map__59908__$1 = (((((!((map__59908 == null))))?(((((map__59908.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59908.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59908):map__59908);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59908__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__59906 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__59906__$1 = (((((!((map__59906 == null))))?(((((map__59906.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59906.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59906):map__59906);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59906__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59906__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),cljs.core.fn_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59913_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59913_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59917_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59917_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null);\n\nvar vec__59918 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59918,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59918,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__59921 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,id){\nvar vec__59922 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__59923 = cljs.core.seq(vec__59922);\nvar first__59924 = cljs.core.first(seq__59923);\nvar seq__59923__$1 = cljs.core.next(seq__59923);\nvar map__59926 = first__59924;\nvar map__59926__$1 = (((((!((map__59926 == null))))?(((((map__59926.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59926.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59926):map__59926);\nvar n = map__59926__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59926__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__59923__$1;\nvar cluster = vec__59922;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__59921__$1 = (((((!((map__59921 == null))))?(((((map__59921.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59921.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59921):map__59921);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59921__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59921__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__59932){\nvar map__59933 = p__59932;\nvar map__59933__$1 = (((((!((map__59933 == null))))?(((((map__59933.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59933.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59933):map__59933);\nvar ast = map__59933__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59933__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59933__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59933__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__59936){\nreturn cljs.core.coll_QMARK_(G__59936);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796))], null),null)], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__59940){\nreturn cljs.core.map_QMARK_(G__59940);\n}),(function (G__59940){\nreturn cljs.core.contains_QMARK_(G__59940,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\n})], null),(function (G__59940){\nreturn ((cljs.core.map_QMARK_(G__59940)) && (cljs.core.contains_QMARK_(G__59940,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421))));\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null)]))], null);\n\nvar vec__59946 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59946,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59946,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__59949 = cljs.core.split_with((function (p1__59937_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__59937_SHARP_));\n}),send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59949,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59949,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__59952){\nvar map__59953 = p__59952;\nvar map__59953__$1 = (((((!((map__59953 == null))))?(((((map__59953.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59953.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59953):map__59953);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59953__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n}),cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),(function (p__59955){\nvar map__59956 = p__59955;\nvar map__59956__$1 = (((((!((map__59956 == null))))?(((((map__59956.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59956.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59956):map__59956);\nvar combined_result = map__59956__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59956__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__59961 = cljs.core.seq(to_send);\nvar chunk__59962 = null;\nvar count__59963 = (0);\nvar i__59964 = (0);\nwhile(true){\nif((i__59964 < count__59963)){\nvar map__59969 = chunk__59962.cljs$core$IIndexed$_nth$arity$2(null,i__59964);\nvar map__59969__$1 = (((((!((map__59969 == null))))?(((((map__59969.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59969.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59969):map__59969);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59969__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__60613 = seq__59961;\nvar G__60614 = chunk__59962;\nvar G__60615 = count__59963;\nvar G__60616 = (i__59964 + (1));\nseq__59961 = G__60613;\nchunk__59962 = G__60614;\ncount__59963 = G__60615;\ni__59964 = G__60616;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__59961);\nif(temp__5735__auto__){\nvar seq__59961__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59961__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__59961__$1);\nvar G__60617 = cljs.core.chunk_rest(seq__59961__$1);\nvar G__60618 = c__4556__auto__;\nvar G__60619 = cljs.core.count(c__4556__auto__);\nvar G__60620 = (0);\nseq__59961 = G__60617;\nchunk__59962 = G__60618;\ncount__59963 = G__60619;\ni__59964 = G__60620;\ncontinue;\n} else {\nvar map__59971 = cljs.core.first(seq__59961__$1);\nvar map__59971__$1 = (((((!((map__59971 == null))))?(((((map__59971.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59971.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59971):map__59971);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59971__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__60621 = cljs.core.next(seq__59961__$1);\nvar G__60622 = null;\nvar G__60623 = (0);\nvar G__60624 = (0);\nseq__59961 = G__60621;\nchunk__59962 = G__60622;\ncount__59963 = G__60623;\ni__59964 = G__60624;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),(function (p__59975){\nvar map__59976 = p__59975;\nvar map__59976__$1 = (((((!((map__59976 == null))))?(((((map__59976.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59976.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59976):map__59976);\nvar combined_result = map__59976__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59976__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__59980_60625 = cljs.core.seq(to_send);\nvar chunk__59981_60626 = null;\nvar count__59982_60627 = (0);\nvar i__59983_60628 = (0);\nwhile(true){\nif((i__59983_60628 < count__59982_60627)){\nvar map__59994_60629 = chunk__59981_60626.cljs$core$IIndexed$_nth$arity$2(null,i__59983_60628);\nvar map__59994_60630__$1 = (((((!((map__59994_60629 == null))))?(((((map__59994_60629.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59994_60629.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59994_60629):map__59994_60629);\nvar ast_60631__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59994_60630__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_60632 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59994_60630__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_60641 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60631__$1)):body);\nvar result_60642 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60641);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var map__59997_60647 = result_60642;\nvar map__59997_60648__$1 = (((((!((map__59997_60647 == null))))?(((((map__59997_60647.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59997_60647.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59997_60647):map__59997_60647);\nvar status_code_60649 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59997_60648__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_60650__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59997_60648__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60649)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60650__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60649));\n}\n}catch (e59996){var e_60651 = e59996;\n}} else {\n}\n\n(result_handler_60632.cljs$core$IFn$_invoke$arity$1 ? result_handler_60632.cljs$core$IFn$_invoke$arity$1(result_60642) : result_handler_60632.call(null,result_60642));\n\n\nvar G__60652 = seq__59980_60625;\nvar G__60653 = chunk__59981_60626;\nvar G__60654 = count__59982_60627;\nvar G__60655 = (i__59983_60628 + (1));\nseq__59980_60625 = G__60652;\nchunk__59981_60626 = G__60653;\ncount__59982_60627 = G__60654;\ni__59983_60628 = G__60655;\ncontinue;\n} else {\nvar temp__5735__auto___60656 = cljs.core.seq(seq__59980_60625);\nif(temp__5735__auto___60656){\nvar seq__59980_60657__$1 = temp__5735__auto___60656;\nif(cljs.core.chunked_seq_QMARK_(seq__59980_60657__$1)){\nvar c__4556__auto___60658 = cljs.core.chunk_first(seq__59980_60657__$1);\nvar G__60659 = cljs.core.chunk_rest(seq__59980_60657__$1);\nvar G__60660 = c__4556__auto___60658;\nvar G__60661 = cljs.core.count(c__4556__auto___60658);\nvar G__60662 = (0);\nseq__59980_60625 = G__60659;\nchunk__59981_60626 = G__60660;\ncount__59982_60627 = G__60661;\ni__59983_60628 = G__60662;\ncontinue;\n} else {\nvar map__59999_60663 = cljs.core.first(seq__59980_60657__$1);\nvar map__59999_60664__$1 = (((((!((map__59999_60663 == null))))?(((((map__59999_60663.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59999_60663.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59999_60663):map__59999_60663);\nvar ast_60665__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59999_60664__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_60666 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59999_60664__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_60764 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60665__$1)):body);\nvar result_60765 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60764);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var map__60003_60766 = result_60765;\nvar map__60003_60767__$1 = (((((!((map__60003_60766 == null))))?(((((map__60003_60766.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60003_60766.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60003_60766):map__60003_60766);\nvar status_code_60768 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60003_60767__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_60769__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60003_60767__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60768)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60769__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60768));\n}\n}catch (e60002){var e_60770 = e60002;\n}} else {\n}\n\n(result_handler_60666.cljs$core$IFn$_invoke$arity$1 ? result_handler_60666.cljs$core$IFn$_invoke$arity$1(result_60765) : result_handler_60666.call(null,result_60765));\n\n\nvar G__60771 = cljs.core.next(seq__59980_60657__$1);\nvar G__60772 = null;\nvar G__60773 = (0);\nvar G__60774 = (0);\nseq__59980_60625 = G__60771;\nchunk__59981_60626 = G__60772;\ncount__59982_60627 = G__60773;\ni__59983_60628 = G__60774;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar b2__46471__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__46471__auto__)){\nvar remote = b2__46471__auto__;\nvar b2__46471__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__46471__auto____$1)){\nvar transmit_BANG_ = b2__46471__auto____$1;\ntry{if(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_60801 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_60801);\n}catch (e60014){var e_60802 = e60014;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\n}catch (e60005){var e = e60005;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node))], null);\n}),null)),null,309264842);\n\ntry{if(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\n}catch (e60010){var e_60821__$1 = e60010;\n}} else {\n}\n\nvar G__60012 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__60011 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60011.cljs$core$IFn$_invoke$arity$1 ? fexpr__60011.cljs$core$IFn$_invoke$arity$1(G__60012) : fexpr__60011.call(null,G__60012));\n}catch (e60006){var e__$1 = e60006;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n}),null)),null,1012699954);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,1347802466);\n\nvar G__60016 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__60015 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60015.cljs$core$IFn$_invoke$arity$1 ? fexpr__60015.cljs$core$IFn$_invoke$arity$1(G__60016) : fexpr__60015.call(null,G__60016));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,-2880647);\n\nvar G__60018 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__60017 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60017.cljs$core$IFn$_invoke$arity$1 ? fexpr__60017.cljs$core$IFn$_invoke$arity$1(G__60018) : fexpr__60017.call(null,G__60018));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__60019){\nvar map__60020 = p__60019;\nvar map__60020__$1 = (((((!((map__60020 == null))))?(((((map__60020.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60020.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60020):map__60020);\nvar app__$1 = map__60020__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60020__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807)], null);\n\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__60022 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60022,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60022,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__60025_60843 = cljs.core.seq(p);\nvar chunk__60026_60844 = null;\nvar count__60027_60845 = (0);\nvar i__60028_60846 = (0);\nwhile(true){\nif((i__60028_60846 < count__60027_60845)){\nvar item_60849 = chunk__60026_60844.cljs$core$IIndexed$_nth$arity$2(null,i__60028_60846);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60025_60843,chunk__60026_60844,count__60027_60845,i__60028_60846,item_60849,send_queue,vec__60022,p,serial,front,send_queues,remote_names,operations,map__60020,map__60020__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60849,remote);\n});})(seq__60025_60843,chunk__60026_60844,count__60027_60845,i__60028_60846,item_60849,send_queue,vec__60022,p,serial,front,send_queues,remote_names,operations,map__60020,map__60020__$1,app__$1,runtime_atom))\n);\n\n\nvar G__60861 = seq__60025_60843;\nvar G__60862 = chunk__60026_60844;\nvar G__60863 = count__60027_60845;\nvar G__60864 = (i__60028_60846 + (1));\nseq__60025_60843 = G__60861;\nchunk__60026_60844 = G__60862;\ncount__60027_60845 = G__60863;\ni__60028_60846 = G__60864;\ncontinue;\n} else {\nvar temp__5735__auto___60865 = cljs.core.seq(seq__60025_60843);\nif(temp__5735__auto___60865){\nvar seq__60025_60866__$1 = temp__5735__auto___60865;\nif(cljs.core.chunked_seq_QMARK_(seq__60025_60866__$1)){\nvar c__4556__auto___60867 = cljs.core.chunk_first(seq__60025_60866__$1);\nvar G__60868 = cljs.core.chunk_rest(seq__60025_60866__$1);\nvar G__60869 = c__4556__auto___60867;\nvar G__60870 = cljs.core.count(c__4556__auto___60867);\nvar G__60871 = (0);\nseq__60025_60843 = G__60868;\nchunk__60026_60844 = G__60869;\ncount__60027_60845 = G__60870;\ni__60028_60846 = G__60871;\ncontinue;\n} else {\nvar item_60876 = cljs.core.first(seq__60025_60866__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60025_60843,chunk__60026_60844,count__60027_60845,i__60028_60846,item_60876,seq__60025_60866__$1,temp__5735__auto___60865,send_queue,vec__60022,p,serial,front,send_queues,remote_names,operations,map__60020,map__60020__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60876,remote);\n});})(seq__60025_60843,chunk__60026_60844,count__60027_60845,i__60028_60846,item_60876,seq__60025_60866__$1,temp__5735__auto___60865,send_queue,vec__60022,p,serial,front,send_queues,remote_names,operations,map__60020,map__60020__$1,app__$1,runtime_atom))\n);\n\n\nvar G__60885 = cljs.core.next(seq__60025_60866__$1);\nvar G__60886 = null;\nvar G__60887 = (0);\nvar G__60888 = (0);\nseq__60025_60843 = G__60885;\nchunk__60026_60844 = G__60886;\ncount__60027_60845 = G__60887;\ni__60028_60846 = G__60888;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__60035 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__60035__$1 = (((((!((map__60035 == null))))?(((((map__60035.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60035.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60035):map__60035);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60035__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60035__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,(function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n}));\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nvar seq__60037_60889 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__60038_60890 = null;\nvar count__60039_60891 = (0);\nvar i__60040_60892 = (0);\nwhile(true){\nif((i__60040_60892 < count__60039_60891)){\nvar op_60893 = chunk__60038_60890.cljs$core$IIndexed$_nth$arity$2(null,i__60040_60892);\n(op_60893.cljs$core$IFn$_invoke$arity$0 ? op_60893.cljs$core$IFn$_invoke$arity$0() : op_60893.call(null));\n\n\nvar G__60894 = seq__60037_60889;\nvar G__60895 = chunk__60038_60890;\nvar G__60896 = count__60039_60891;\nvar G__60897 = (i__60040_60892 + (1));\nseq__60037_60889 = G__60894;\nchunk__60038_60890 = G__60895;\ncount__60039_60891 = G__60896;\ni__60040_60892 = G__60897;\ncontinue;\n} else {\nvar temp__5735__auto___60898 = cljs.core.seq(seq__60037_60889);\nif(temp__5735__auto___60898){\nvar seq__60037_60899__$1 = temp__5735__auto___60898;\nif(cljs.core.chunked_seq_QMARK_(seq__60037_60899__$1)){\nvar c__4556__auto___60900 = cljs.core.chunk_first(seq__60037_60899__$1);\nvar G__60901 = cljs.core.chunk_rest(seq__60037_60899__$1);\nvar G__60902 = c__4556__auto___60900;\nvar G__60903 = cljs.core.count(c__4556__auto___60900);\nvar G__60904 = (0);\nseq__60037_60889 = G__60901;\nchunk__60038_60890 = G__60902;\ncount__60039_60891 = G__60903;\ni__60040_60892 = G__60904;\ncontinue;\n} else {\nvar op_60905 = cljs.core.first(seq__60037_60899__$1);\n(op_60905.cljs$core$IFn$_invoke$arity$0 ? op_60905.cljs$core$IFn$_invoke$arity$0() : op_60905.call(null));\n\n\nvar G__60906 = cljs.core.next(seq__60037_60899__$1);\nvar G__60907 = null;\nvar G__60908 = (0);\nvar G__60909 = (0);\nseq__60037_60889 = G__60906;\nchunk__60038_60890 = G__60907;\ncount__60039_60891 = G__60908;\ni__60040_60892 = G__60909;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__60044 = arguments.length;\nswitch (G__60044) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n})),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n}))),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__60048 = arguments.length;\nswitch (G__60048) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__60049,addl){\nvar map__60050 = p__60049;\nvar map__60050__$1 = (((((!((map__60050 == null))))?(((((map__60050.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60050.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60050):map__60050);\nvar tx_node = map__60050__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60050__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nvar map__60052 = options;\nvar map__60052__$1 = (((((!((map__60052 == null))))?(((((map__60052.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60052.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60052):map__60052);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60052__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60052__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__60054 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__60054__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60054,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__60054);\nvar G__60054__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60054__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__60054__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60054__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__60054__$2;\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__60055){\nvar map__60056 = p__60055;\nvar map__60056__$1 = (((((!((map__60056 == null))))?(((((map__60056.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60056.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60056):map__60056);\nvar tx_node = map__60056__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60056__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3);\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e60061){var e = e60061;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__60062 = env__$1;\nvar G__60062__$1 = (((G__60062 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__60062));\nif((G__60062__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__60062__$1);\n}\n})(),\"failed with an exception. No dispatch generated.\"], null);\n}),null)),null,2096212585);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__60063){\nvar map__60064 = p__60063;\nvar map__60064__$1 = (((((!((map__60064 == null))))?(((((map__60064.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60064.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60064):map__60064);\nvar ele = map__60064__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60064__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__60066 = original_ast_node;\nvar map__60066__$1 = (((((!((map__60066 == null))))?(((((map__60066.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60066.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60066):map__60066);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60066__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__60068 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60068,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__60068;\n}\n});\nvar dispatch_all = (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__60070,options){\nvar map__60071 = p__60070;\nvar map__60071__$1 = (((((!((map__60071 == null))))?(((((map__60071.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60071.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60071):map__60071);\nvar app__$1 = map__60071__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60071__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nif(cljs.core.truth_(cljs.core.some((function (p1__60069_SHARP_){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__60069_SHARP_)));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app__$1,(0)));\n} else {\nreturn null;\n}\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__60078){\nvar map__60079 = p__60078;\nvar map__60079__$1 = (((((!((map__60079 == null))))?(((((map__60079.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60079.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60079):map__60079);\nvar app__$1 = map__60079__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60079__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__60081 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar map__60081__$1 = (((((!((map__60081 == null))))?(((((map__60081.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60081.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60081):map__60081);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60081__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60081__$1,false);\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__60076_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__60076_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__60076_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),(function (p1__60077_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__60077_SHARP_,dispatched_nodes);\n})),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__60093 = arguments.length;\nswitch (G__60093) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__60095 = arguments.length;\nswitch (G__60095) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__60100 = arguments.length;\nswitch (G__60100) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__60101){\nvar map__60102 = p__60101;\nvar map__60102__$1 = (((((!((map__60102 == null))))?(((((map__60102.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60102.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60102):map__60102);\nvar node = map__60102__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60102__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60102__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__60104,element){\nvar map__60105 = p__60104;\nvar map__60105__$1 = (((((!((map__60105 == null))))?(((((map__60105.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60105.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60105):map__60105);\nvar acc = map__60105__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60105__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60105__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__60107 = element;\nvar map__60107__$1 = (((((!((map__60107 == null))))?(((((map__60107.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60107.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60107):map__60107);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60107__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60107__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60107__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60107__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__60108 = dispatch;\nvar map__60108__$1 = (((((!((map__60108 == null))))?(((((map__60108.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60108.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60108):map__60108);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60108__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4115__auto__ = action;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((function (){var or__4126__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})());\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4115__auto__ = (function (){var or__4126__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e60111){var e_61064 = e60111;\nvar mutation_symbol_61065 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,340,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61064,\"The `action` section of mutation\",mutation_symbol_61065,\"threw an exception.\"], null);\n}),null)),null,2053179383);\n}\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_61067 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_61067], null));\n}catch (e60112){var e_61072 = e60112;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__60113){\nvar map__60114 = p__60113;\nvar map__60114__$1 = (((((!((map__60114 == null))))?(((((map__60114.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60114.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60114):map__60114);\nvar node = map__60114__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60114__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60114__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_elements,element){\nvar map__60116 = element;\nvar map__60116__$1 = (((((!((map__60116 == null))))?(((((map__60116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60116):map__60116);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60116__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60116__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60116__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60116__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__60117 = dispatch;\nvar map__60117__$1 = (((((!((map__60117 == null))))?(((((map__60117.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60117.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60117):map__60117);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60117__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4115__auto__ = action;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e60120){var e_61128 = e60120;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,373,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61128,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n}),null)),null,-1200555411);\n}\nif(cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4115__auto__;\n}\n})())){\ntry{var tx_61130 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_61130], null));\n}catch (e60121){var e_61135 = e60121;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}),cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__60122){\nvar map__60123 = p__60122;\nvar map__60123__$1 = (((((!((map__60123 == null))))?(((((map__60123.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60123.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60123):map__60123);\nvar tx_node = map__60123__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60123__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nvar element_complete_QMARK_ = (function (p__60125){\nvar map__60126 = p__60125;\nvar map__60126__$1 = (((((!((map__60126 == null))))?(((((map__60126.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60126.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60126):map__60126);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60126__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60126__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__60128,remote,txn_id,ele_idx){\nvar map__60129 = p__60128;\nvar map__60129__$1 = (((((!((map__60129 == null))))?(((((map__60129.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60129.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60129):map__60129);\nvar app__$1 = map__60129__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60129__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__60131 = cljs.core.deref(runtime_atom);\nvar map__60131__$1 = (((((!((map__60131 == null))))?(((((map__60131.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60131.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60131):map__60131);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60131__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue = cljs.core.filterv((function (p__60133){\nvar map__60134 = p__60133;\nvar map__60134__$1 = (((((!((map__60134 == null))))?(((((map__60134.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60134.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60134):map__60134);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60134__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60134__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__60137 = arguments.length;\nswitch (G__60137) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__60138,txn_id,ele_idx,remote,result,result_key){\nvar map__60139 = p__60138;\nvar map__60139__$1 = (((((!((map__60139 == null))))?(((((map__60139.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60139.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60139):map__60139);\nvar app__$1 = map__60139__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60139__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__60141){\nvar map__60142 = p__60141;\nvar map__60142__$1 = (((((!((map__60142 == null))))?(((((map__60142.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60142.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60142):map__60142);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60142__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,421,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n}),null)),null,1425134771);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nnew cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app__$1,remote,tx_node,tx_element){\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nvar map__60144 = tx_element;\nvar map__60144__$1 = (((((!((map__60144 == null))))?(((((map__60144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60144):map__60144);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,442,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire], null);\n}),null)),null,-712440795);\n\nreturn remote_desire;\n})()\n\n))));\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar ast = (cljs.core.truth_((function (){var and__4115__auto__ = desired_ast;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn query_transform;\n} else {\nreturn and__4115__auto__;\n}\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\nvar G__60146 = tx_element;\nvar G__60146__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__60146,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__60146);\nif(cljs.core.truth_(ast)){\nreturn cljs.core.assoc_in(G__60146__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\n} else {\nreturn G__60146__$1;\n}\n});\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__60147,p__60148,ele_idx,remote){\nvar map__60149 = p__60147;\nvar map__60149__$1 = (((((!((map__60149 == null))))?(((((map__60149.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60149.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60149):map__60149);\nvar app__$1 = map__60149__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60149__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60150 = p__60148;\nvar map__60150__$1 = (((((!((map__60150 == null))))?(((((map__60150.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60150.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60150):map__60150);\nvar tx_node = map__60150__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60150__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60150__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),null)], null);\n\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__60153){\nvar map__60154 = p__60153;\nvar map__60154__$1 = (((((!((map__60154 == null))))?(((((map__60154.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60154.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60154):map__60154);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60154__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60154__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60154__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__60156){\nvar map__60157 = p__60156;\nvar map__60157__$1 = (((((!((map__60157 == null))))?(((((map__60157.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60157.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60157):map__60157);\nvar tx_node = map__60157__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60157__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn cljs.core.every_QMARK_((function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__60159){\nvar map__60160 = p__60159;\nvar map__60160__$1 = (((((!((map__60160 == null))))?(((((map__60160.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60160.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60160):map__60160);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60160__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60160__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n}),elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__60162){\nvar map__60163 = p__60162;\nvar map__60163__$1 = (((((!((map__60163 == null))))?(((((map__60163.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60163.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60163):map__60163);\nvar element = map__60163__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60163__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60163__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),null)], null);\n\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__60165){\nvar map__60166 = p__60165;\nvar map__60166__$1 = (((((!((map__60166 == null))))?(((((map__60166.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60166.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60166):map__60166);\nvar tx_node = map__60166__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60166__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__60168){\nvar map__60169 = p__60168;\nvar map__60169__$1 = (((((!((map__60169 == null))))?(((((map__60169.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60169.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60169):map__60169);\nvar tx_node = map__60169__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60169__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60169__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__60171,remote){\nvar map__60172 = p__60171;\nvar map__60172__$1 = (((((!((map__60172 == null))))?(((((map__60172.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60172.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60172):map__60172);\nvar tx_element = map__60172__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60172__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60172__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60172__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60172__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60172__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_61195 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_61196 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_61196)){\nvar env_61197 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_61195], null));\ntry{(handler_61196.cljs$core$IFn$_invoke$arity$1 ? handler_61196.cljs$core$IFn$_invoke$arity$1(env_61197) : handler_61196.call(null,env_61197));\n}catch (e60174){var e_61217 = e60174;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,574,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61217,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n}),null)),null,-1783640488);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__60175){\nvar map__60176 = p__60175;\nvar map__60176__$1 = (((((!((map__60176 == null))))?(((((map__60176.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60176.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60176):map__60176);\nvar tx_element = map__60176__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60176__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60176__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__60178){\nvar map__60179 = p__60178;\nvar map__60179__$1 = (((((!((map__60179 == null))))?(((((map__60179.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60179.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60179):map__60179);\nvar tx_node = map__60179__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60179__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n}),elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__60181){\nvar map__60182 = p__60181;\nvar map__60182__$1 = (((((!((map__60182 == null))))?(((((map__60182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60182):map__60182);\nvar tx_node = map__60182__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60182__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar get_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,p__60184){\nvar map__60185 = p__60184;\nvar map__60185__$1 = (((((!((map__60185 == null))))?(((((map__60185.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60185.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60185):map__60185);\nvar element = map__60185__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60185__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60185__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60185__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60185__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar seq__60187_61240 = cljs.core.seq(progress);\nvar chunk__60188_61241 = null;\nvar count__60189_61242 = (0);\nvar i__60190_61243 = (0);\nwhile(true){\nif((i__60190_61243 < count__60189_61242)){\nvar vec__60206_61244 = chunk__60188_61241.cljs$core$IIndexed$_nth$arity$2(null,i__60190_61243);\nvar remote_61245 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60206_61244,(0),null);\nvar value_61246 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60206_61244,(1),null);\nvar env_61248 = get_env(remote_61245,value_61246);\nvar action_61249 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_61249)){\ntry{(action_61249.cljs$core$IFn$_invoke$arity$1 ? action_61249.cljs$core$IFn$_invoke$arity$1(env_61248) : action_61249.call(null,env_61248));\n}catch (e60210){var e_61252 = e60210;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60187_61240,chunk__60188_61241,count__60189_61242,i__60190_61243,e_61252,env_61248,action_61249,vec__60206_61244,remote_61245,value_61246,map__60185,map__60185__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60182,map__60182__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61252,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__60187_61240,chunk__60188_61241,count__60189_61242,i__60190_61243,e_61252,env_61248,action_61249,vec__60206_61244,remote_61245,value_61246,map__60185,map__60185__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60182,map__60182__$1,tx_node,elements))\n,null)),null,1372182227);\n}} else {\n}\n\n\nvar G__61259 = seq__60187_61240;\nvar G__61260 = chunk__60188_61241;\nvar G__61261 = count__60189_61242;\nvar G__61262 = (i__60190_61243 + (1));\nseq__60187_61240 = G__61259;\nchunk__60188_61241 = G__61260;\ncount__60189_61242 = G__61261;\ni__60190_61243 = G__61262;\ncontinue;\n} else {\nvar temp__5735__auto___61264 = cljs.core.seq(seq__60187_61240);\nif(temp__5735__auto___61264){\nvar seq__60187_61265__$1 = temp__5735__auto___61264;\nif(cljs.core.chunked_seq_QMARK_(seq__60187_61265__$1)){\nvar c__4556__auto___61266 = cljs.core.chunk_first(seq__60187_61265__$1);\nvar G__61267 = cljs.core.chunk_rest(seq__60187_61265__$1);\nvar G__61268 = c__4556__auto___61266;\nvar G__61269 = cljs.core.count(c__4556__auto___61266);\nvar G__61270 = (0);\nseq__60187_61240 = G__61267;\nchunk__60188_61241 = G__61268;\ncount__60189_61242 = G__61269;\ni__60190_61243 = G__61270;\ncontinue;\n} else {\nvar vec__60212_61271 = cljs.core.first(seq__60187_61265__$1);\nvar remote_61272 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60212_61271,(0),null);\nvar value_61273 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60212_61271,(1),null);\nvar env_61274 = get_env(remote_61272,value_61273);\nvar action_61275 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_61275)){\ntry{(action_61275.cljs$core$IFn$_invoke$arity$1 ? action_61275.cljs$core$IFn$_invoke$arity$1(env_61274) : action_61275.call(null,env_61274));\n}catch (e60215){var e_61276 = e60215;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60187_61240,chunk__60188_61241,count__60189_61242,i__60190_61243,e_61276,env_61274,action_61275,vec__60212_61271,remote_61272,value_61273,seq__60187_61265__$1,temp__5735__auto___61264,map__60185,map__60185__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60182,map__60182__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61276,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__60187_61240,chunk__60188_61241,count__60189_61242,i__60190_61243,e_61276,env_61274,action_61275,vec__60212_61271,remote_61272,value_61273,seq__60187_61265__$1,temp__5735__auto___61264,map__60185,map__60185__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60182,map__60182__$1,tx_node,elements))\n,null)),null,-859484495);\n}} else {\n}\n\n\nvar G__61277 = cljs.core.next(seq__60187_61265__$1);\nvar G__61278 = null;\nvar G__61279 = (0);\nvar G__61280 = (0);\nseq__60187_61240 = G__61277;\nchunk__60188_61241 = G__61278;\ncount__60189_61242 = G__61279;\ni__60190_61243 = G__61280;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__60218){\nvar map__60219 = p__60218;\nvar map__60219__$1 = (((((!((map__60219 == null))))?(((((map__60219.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60219.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60219):map__60219);\nvar tx_node = map__60219__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60219__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),null)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__60221 = tx_node;\nvar G__60221__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__60221):G__60221);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__60221__$1);\n} else {\nreturn G__60221__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__60222){\nreturn cljs.core.coll_QMARK_(G__60222);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.set_QMARK_], null);\n\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,element){\nvar map__60223 = element;\nvar map__60223__$1 = (((((!((map__60223 == null))))?(((((map__60223.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60223.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60223):map__60223);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60223__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n}),outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__60225,remotes){\nvar map__60226 = p__60225;\nvar map__60226__$1 = (((((!((map__60226 == null))))?(((((map__60226.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60226.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60226):map__60226);\nvar tx_node = map__60226__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60226__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nvar active_on_element = (function (p__60228){\nvar map__60229 = p__60228;\nvar map__60229__$1 = (((((!((map__60229 == null))))?(((((map__60229.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60229.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60229):map__60229);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60229__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60229__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n}),cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__60231){\nvar map__60232 = p__60231;\nvar map__60232__$1 = (((((!((map__60232 == null))))?(((((map__60232.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60232.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60232):map__60232);\nvar app__$1 = map__60232__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60232__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar new_node = temp__5733__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n/**\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n * are allowed to).\n * \n * NOTE: any *remote* behaviors of `tx` will *still be async*.\n * \n * This function:\n * \n * * Runs the optimistic side of the mutation(s)\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n *   but with the optimistic part already done.\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n * \n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n * component so it can refresh immediately and avoid DOM input issues.\n * \n * Returns the new component props or the final state map if no component was used in the transaction.\n * \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app__$1,tx,p__60235){\nvar map__60236 = p__60235;\nvar map__60236__$1 = (((((!((map__60236 == null))))?(((((map__60236.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60236.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60236):map__60236);\nvar options = map__60236__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60236__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (ast_node){\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\n}),mutation_nodes));\nvar map__60238 = cljs.core.group_by((function (p1__60234_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__60234_SHARP_) : ast_node__GT_operation.call(null,p1__60234_SHARP_)))));\n}),mutation_nodes);\nvar map__60238__$1 = (((((!((map__60238 == null))))?(((((map__60238.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60238.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60238):map__60238);\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60238__$1,true);\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60238__$1,false);\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nif(cljs.core.truth_(optimistic_tx_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,optimistic_tx_node);\n} else {\n}\n\nif(cljs.core.truth_(mixed_tx_node)){\nvar node_61328 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,mixed_tx_node);\nvar runtime_atom_61329 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_61328));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_61329,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_61328], 0));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(20));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = component;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,743,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\"], null);\n}),null)),null,1266421938);\n} else {\n}\n}\n\nreturn cljs.core.deref(resulting_node_id);\n});\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\nvar G__60242 = arguments.length;\nswitch (G__60242) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__60243,tx,p__60244){\nvar map__60245 = p__60243;\nvar map__60245__$1 = (((((!((map__60245 == null))))?(((((map__60245.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60245.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60245):map__60245);\nvar app__$1 = map__60245__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60245__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60246 = p__60244;\nvar map__60246__$1 = (((((!((map__60246 == null))))?(((((map__60246.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60246.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60246):map__60246);\nvar options = map__60246__$1;\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60246__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nif(cljs.core.truth_(synchronous_QMARK_)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app__$1,tx,options);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\n\nvar map__60249 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__60249__$1 = (((((!((map__60249 == null))))?(((((map__60249.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60249.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60249):map__60249);\nvar options__$1 = map__60249__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60249__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60249__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60249__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__60240_SHARP_){\nreturn (((p1__60240_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__60240_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__60251 = cljs.core.set(refresh);\nvar G__60251__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__60251,follow_on_reads):G__60251);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__60251__$1,ref);\n} else {\nreturn G__60251__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__60252 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (v,n){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\n}),node);\nvar G__60252__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60252,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__60252);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60252__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__60252__$1;\n}\n}));\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__60253,send_queue,abort_id){\nvar map__60254 = p__60253;\nvar map__60254__$1 = (((((!((map__60254 == null))))?(((((map__60254.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60254.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60254):map__60254);\nvar remote = map__60254__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60254__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__60256){\nvar map__60257 = p__60256;\nvar map__60257__$1 = (((((!((map__60257 == null))))?(((((map__60257.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60257.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60257):map__60257);\nvar send_node = map__60257__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60257__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60257__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60257__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__4126__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\nvar G__60259_61347 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60259_61347) : result_handler.call(null,G__60259_61347));\n\nreturn result;\n\n}\n}\n}),cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,821,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support!\"], null);\n}),null)),null,-1593980424);\n\nreturn send_queue;\n}\n});\n/**\n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app__$1,abort_id){\nvar map__60260 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__60260__$1 = (((((!((map__60260 == null))))?(((((map__60260.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60260.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60260):map__60260);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60260__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__60261 = runtime_state;\nvar map__60261__$1 = (((((!((map__60261 == null))))?(((((map__60261.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60261.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60261):map__60261);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60261__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60261__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n});\n/**\n * Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n *   items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n *   that is in the send queue of the given remote.\n * \n *   This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_remote_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_remote_BANG_(app_ish,remote){\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nvar map__60264 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__60264__$1 = (((((!((map__60264 == null))))?(((((map__60264.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60264.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60264):map__60264);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60265 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote], null));\nvar map__60265__$1 = (((((!((map__60265 == null))))?(((((map__60265.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60265.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60265):map__60265);\nvar the_remote = map__60265__$1;\nvar abort_network_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60265__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nvar old_send_queue = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.PersistentVector.EMPTY);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([remote], 0));\n\nvar seq__60268 = cljs.core.seq(old_send_queue);\nvar chunk__60273 = null;\nvar count__60274 = (0);\nvar i__60275 = (0);\nwhile(true){\nif((i__60275 < count__60274)){\nvar map__60328 = chunk__60273.cljs$core$IIndexed$_nth$arity$2(null,i__60275);\nvar map__60328__$1 = (((((!((map__60328 == null))))?(((((map__60328.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60328.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60328):map__60328);\nvar send_node = map__60328__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60328__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60328__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60328__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__60276_61357 = cljs.core.seq((function (){var or__4126__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__60277_61358 = null;\nvar count__60278_61359 = (0);\nvar i__60279_61360 = (0);\nwhile(true){\nif((i__60279_61360 < count__60278_61359)){\nvar aid_61361 = chunk__60277_61358.cljs$core$IIndexed$_nth$arity$2(null,i__60279_61360);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61361) : abort_network_BANG_.call(null,the_remote,aid_61361));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,aid_61361,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,aid_61361,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1698100537);\n}\n} else {\n}\n\nvar G__60347_61362 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60347_61362) : result_handler.call(null,G__60347_61362));\n}catch (e60346){var e_61372 = e60346;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,e_61372,aid_61361,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61372,\"Failed to abort send node\"], null);\n});})(seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,e_61372,aid_61361,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1166729072);\n}\n\nvar G__61373 = seq__60276_61357;\nvar G__61374 = chunk__60277_61358;\nvar G__61375 = count__60278_61359;\nvar G__61376 = (i__60279_61360 + (1));\nseq__60276_61357 = G__61373;\nchunk__60277_61358 = G__61374;\ncount__60278_61359 = G__61375;\ni__60279_61360 = G__61376;\ncontinue;\n} else {\nvar temp__5735__auto___61377 = cljs.core.seq(seq__60276_61357);\nif(temp__5735__auto___61377){\nvar seq__60276_61378__$1 = temp__5735__auto___61377;\nif(cljs.core.chunked_seq_QMARK_(seq__60276_61378__$1)){\nvar c__4556__auto___61379 = cljs.core.chunk_first(seq__60276_61378__$1);\nvar G__61380 = cljs.core.chunk_rest(seq__60276_61378__$1);\nvar G__61381 = c__4556__auto___61379;\nvar G__61382 = cljs.core.count(c__4556__auto___61379);\nvar G__61383 = (0);\nseq__60276_61357 = G__61380;\nchunk__60277_61358 = G__61381;\ncount__60278_61359 = G__61382;\ni__60279_61360 = G__61383;\ncontinue;\n} else {\nvar aid_61384 = cljs.core.first(seq__60276_61378__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61384) : abort_network_BANG_.call(null,the_remote,aid_61384));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,aid_61384,seq__60276_61378__$1,temp__5735__auto___61377,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,aid_61384,seq__60276_61378__$1,temp__5735__auto___61377,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,995706467);\n}\n} else {\n}\n\nvar G__60357_61385 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60357_61385) : result_handler.call(null,G__60357_61385));\n}catch (e60348){var e_61386 = e60348;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,e_61386,aid_61384,seq__60276_61378__$1,temp__5735__auto___61377,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61386,\"Failed to abort send node\"], null);\n});})(seq__60276_61357,chunk__60277_61358,count__60278_61359,i__60279_61360,seq__60268,chunk__60273,count__60274,i__60275,e_61386,aid_61384,seq__60276_61378__$1,temp__5735__auto___61377,map__60328,map__60328__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-444363670);\n}\n\nvar G__61387 = cljs.core.next(seq__60276_61378__$1);\nvar G__61388 = null;\nvar G__61389 = (0);\nvar G__61390 = (0);\nseq__60276_61357 = G__61387;\nchunk__60277_61358 = G__61388;\ncount__60278_61359 = G__61389;\ni__60279_61360 = G__61390;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__61393 = seq__60268;\nvar G__61394 = chunk__60273;\nvar G__61395 = count__60274;\nvar G__61396 = (i__60275 + (1));\nseq__60268 = G__61393;\nchunk__60273 = G__61394;\ncount__60274 = G__61395;\ni__60275 = G__61396;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__60268);\nif(temp__5735__auto__){\nvar seq__60268__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__60268__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__60268__$1);\nvar G__61397 = cljs.core.chunk_rest(seq__60268__$1);\nvar G__61398 = c__4556__auto__;\nvar G__61399 = cljs.core.count(c__4556__auto__);\nvar G__61400 = (0);\nseq__60268 = G__61397;\nchunk__60273 = G__61398;\ncount__60274 = G__61399;\ni__60275 = G__61400;\ncontinue;\n} else {\nvar map__60358 = cljs.core.first(seq__60268__$1);\nvar map__60358__$1 = (((((!((map__60358 == null))))?(((((map__60358.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60358.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60358):map__60358);\nvar send_node = map__60358__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60358__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60358__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60358__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__60269_61406 = cljs.core.seq((function (){var or__4126__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__60270_61407 = null;\nvar count__60271_61408 = (0);\nvar i__60272_61409 = (0);\nwhile(true){\nif((i__60272_61409 < count__60271_61408)){\nvar aid_61410 = chunk__60270_61407.cljs$core$IIndexed$_nth$arity$2(null,i__60272_61409);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61410) : abort_network_BANG_.call(null,the_remote,aid_61410));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,aid_61410,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,aid_61410,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1556733107);\n}\n} else {\n}\n\nvar G__60371_61413 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60371_61413) : result_handler.call(null,G__60371_61413));\n}catch (e60368){var e_61417 = e60368;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,e_61417,aid_61410,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61417,\"Failed to abort send node\"], null);\n});})(seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,e_61417,aid_61410,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-761477174);\n}\n\nvar G__61418 = seq__60269_61406;\nvar G__61419 = chunk__60270_61407;\nvar G__61420 = count__60271_61408;\nvar G__61421 = (i__60272_61409 + (1));\nseq__60269_61406 = G__61418;\nchunk__60270_61407 = G__61419;\ncount__60271_61408 = G__61420;\ni__60272_61409 = G__61421;\ncontinue;\n} else {\nvar temp__5735__auto___61422__$1 = cljs.core.seq(seq__60269_61406);\nif(temp__5735__auto___61422__$1){\nvar seq__60269_61423__$1 = temp__5735__auto___61422__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__60269_61423__$1)){\nvar c__4556__auto___61424 = cljs.core.chunk_first(seq__60269_61423__$1);\nvar G__61425 = cljs.core.chunk_rest(seq__60269_61423__$1);\nvar G__61426 = c__4556__auto___61424;\nvar G__61427 = cljs.core.count(c__4556__auto___61424);\nvar G__61428 = (0);\nseq__60269_61406 = G__61425;\nchunk__60270_61407 = G__61426;\ncount__60271_61408 = G__61427;\ni__60272_61409 = G__61428;\ncontinue;\n} else {\nvar aid_61430 = cljs.core.first(seq__60269_61423__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61430) : abort_network_BANG_.call(null,the_remote,aid_61430));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,aid_61430,seq__60269_61423__$1,temp__5735__auto___61422__$1,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,aid_61430,seq__60269_61423__$1,temp__5735__auto___61422__$1,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-36916215);\n}\n} else {\n}\n\nvar G__60381_61435 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60381_61435) : result_handler.call(null,G__60381_61435));\n}catch (e60374){var e_61436 = e60374;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,e_61436,aid_61430,seq__60269_61423__$1,temp__5735__auto___61422__$1,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61436,\"Failed to abort send node\"], null);\n});})(seq__60269_61406,chunk__60270_61407,count__60271_61408,i__60272_61409,seq__60268,chunk__60273,count__60274,i__60275,e_61436,aid_61430,seq__60269_61423__$1,temp__5735__auto___61422__$1,map__60358,map__60358__$1,send_node,active_QMARK_,options,result_handler,seq__60268__$1,temp__5735__auto__,app__$1,map__60264,map__60264__$1,state_atom,runtime_atom,map__60265,map__60265__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,995503364);\n}\n\nvar G__61444 = cljs.core.next(seq__60269_61423__$1);\nvar G__61445 = null;\nvar G__61446 = (0);\nvar G__61447 = (0);\nseq__60269_61406 = G__61444;\nchunk__60270_61407 = G__61445;\ncount__60271_61408 = G__61446;\ni__60272_61409 = G__61447;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__61452 = cljs.core.next(seq__60268__$1);\nvar G__61453 = null;\nvar G__61454 = (0);\nvar G__61455 = (0);\nseq__60268 = G__61452;\nchunk__60273 = G__61453;\ncount__60274 = G__61454;\ni__60275 = G__61455;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^I","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^Y","^?","^@","^L","^L","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^Y","~$com.fulcrologic.fulcro.algorithms.denormalize","^13","~$cljs.core","^14","^I","^I","~$goog","^15","~$com.fulcrologic.fulcro.specs","^16","~$inspect","^I","^X","^X","~$com.fulcrologic.fulcro.algorithms.tempid","^18","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1:","~$sched","^1:","~$enc","~$taoensso.encore","^19","^19","~$s","^@","^V","^V","^11","^11","^[","^[","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1=","^1=","^@","^@","~$fdn","^13","~$tempid","^18","^1?","^1?"],"~:seen",["^N",["~:require"]],"~:uses",["^ ","~$schedule!","^1:","^H","^I","^J","^I","^K","^L","~$=>","^L","~$|","^L"],"~:require-macros",["^ ","^?","^@","^L","^L","^Z","^[","^10","^11","^14","^14","^I","^I","^17","^I","~$m","^19","^1<","^1=","^19","^19","~$s","^@","^11","^11","^[","^[","^1=","^1=","^@","^@"],"~:form",["~#list",["~$ns","^P","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1I",["^1C",["^X","~:as","^W"],["^?","^1K","~$s"],["^V","^1K","^U"],["^18","^1K","^1A"],["^13","^1K","^1@"],["^1?","^1K","^1>"],["^1:","^1K","^1;","~:refer",["^1E"]],["^19","^1K","~$m"],["^11","^1K","^10"],["^16"],["^I","^1K","^17","^1L",["^H","^J"]],"^16",["^L","^1L",["^K","^1F","~$|"]],["^Y","^1K","^12"],["^1=","^1K","^1<"],["^[","^1K","^Z"]]]]],"~:flags",["^ ","^1C",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^15","^14","^X","^@","^V","^18","^13","^1?","^1:","^19","^11","^16","^I","^L","^Y","^1=","^["]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1609098958042,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)))\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name)\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated.\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-id-before (inspect/current-history-id app)\n                                 state           (:com.fulcrologic.fulcro.application/state-atom app)\n                                 state-before    @state\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception.\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                               :state-id-before state-id-before\n                                                                               :db-before       state-before\n                                                                               :db-after        @state\n                                                                               :tx              tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?           (and action (not (complete? :action)))\n                               state-id-before (inspect/current-history-id app)\n                               state           (:com.fulcrologic.fulcro.application/state-atom app)\n                               state-before    @state\n                               updated-node    (if exec? (-> element\n                                                           (assoc ::state-before-action state-before)\n                                                           (update ::complete? conj :action)) element)\n                               new-acc         (conj new-elements updated-node)\n                               env             (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node))))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                             :state-id-before state-id-before\n                                                                             :db-before       state-before\n                                                                             :db-after        @state\n                                                                             :tx              tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire)\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node)))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (if (and component (comp/component? component) (comp/has-ident? component))\n      (comp/refresh-component! component)\n      (when #?(:cljs js/goog.DEBUG :clj true)\n        (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support!\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn abort-remote!\n  \"Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \\\"received\\\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\"\n  [app-ish remote]\n  (let [app            (comp/any->app app-ish)\n        {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (comp/any->app app)\n        {abort-network! :abort!\n         :as            the-remote} (get @runtime-atom [:com.fulcrologic.fulcro.application/remotes remote])\n        old-send-queue (get-in @runtime-atom [::send-queues remote])]\n    (swap! runtime-atom assoc-in [::send-queues remote] [])\n    (swap! state-atom update :com.fulcrologic.fulcro.application/active-remotes (fnil disj #{}) remote)\n    (doseq [{::keys [active? options result-handler] :as send-node} old-send-queue\n            aid (or (-> options ::abort-id) (-> options :abort-id))]\n      (try\n        (when active?\n          (if abort-network!\n            (abort-network! the-remote aid)\n            (log/warn \"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\")))\n        (result-handler {:status-code 500\n                         :body        {}\n                         :status-text \"Globally Aborted\"\n                         ::aborted?   true})\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Failed to abort send node\"))))))","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAuBA,AAAA;AAAA;AAAA,AAEA;;;AAAA,AAAMA,AAEHC;AAFH,AAAA,AAAA,AAAA,AAG2CC;;AACzC,AAAA,AAAA,AAAA,AAAA,AAAID,AAAqDE;;AAE3D;;;AAAA,AAAMC,AAEHH;AAFH,AAAA,AAAA,AAAA,AAG2CC;;AACzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID,AAAqDE,AAAkDE,AAAKC;;AAElH;;;;AAAA,AAAMC,AAGHC;AAHH,AAAA,AAIG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAA6BC;AAA7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA6BA,AAAST,AAAG,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAC1C,AAAMM,AAAU,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAAC,AAAA,AAAAJ,AAAAG,AAAA;AAAA,AACE,AAACE,AAAQ,AAAAC,AAAI,AAAA,AAAYF;AAAhB,AAAA,AAAAE;AAAAA;;AAAyB,AAAA,AAAaF;;;;AADjER,AAGyB,AAACa,AAASR,AAAUV;AAH7CK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEOW;AAFP,AAAAP,AAAAJ,AAAA,AAGOY;AAHP,AAAA,AAIG,AAACE,AAAIH,AAAU,AAACG,AAAIF;;AAEzB;;;AAAA,AAAMG,AAEHC,AAAiBC;AAFpB,AAAA,AAAA,AAGSC,AAAI7B,AAAG8B;;AACd,AAAI,AAAA,AAACC,AAAQ,AAAA,AAAOJ;AAClB,AAACK,AAAOJ,AAAK,AAAA,AAAWD;;AACxB,AAACC,AAAAA,AAAAA,AAAKD,AAAAA;;;AAEV;;;AAAA,AAAMM,AAEHN;AAFH,AAAA,AAAA,AAGS3B,AAAG8B;;AACV,AAAA,AAAAI,AAACR,AAAWC;AAAZ,AAA8B,AAAA,AAACI,AAAQ,AAAA,AAAAG;;;AAEzC;;;AAAA,AAAMC,AAEHR;AAFH,AAAA,AAAA,AAGS3B,AAAG8B;;AACV,AAAA,AAAAM,AAACV,AAAWC;AAAZ,AAA8B,AAAA,AAACU,AAAW,AAAA,AAAAD;;;AAE5C;;;;AAAA,AAAME,AAGHC;AAHH,AAAA,AAAA,AAAA,AAIgBvC;;AACd,AAAAwC,AAAgC,AAAA,AAACI,AAAqBL;AAAtD,AAAAE,AAAAD,AAAA,AAAA,AAAOG;AAAP,AAAAF,AAAAD,AAAA,AAAA,AAAoBD;AACdM,AAAY,AAACC,AAAK,AAAKC;AAAL,AAAQ,AAAA,AAAA,AAAIA,AAAEC;AAAa,AAAA,AAACC,AAAkBV;AAChEW,AAAY,AAAA,AAAC1B,AAAc,AAACC,AAAIc;AAFtCG,AAG6B,AAACW,AACC,AAAKC,AAAOC;AAAZ,AACE,AAAAC,AAA8C,AAACzC,AAAImC,AAASK;AAA5DE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAX,AAAAS;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjD,AAAA,AAAAiD,AAAA,AAAA,AAAA,AAAA,AAAAhD,AAAAC,AAAA+C,AAAAA;AAAAA,AAA0Bd;AAA1Be,AAAA,AAAA/C,AAAA8C,AAAA;AAAAJ,AAA+BM;AAA/BP,AAAqCQ;AAArC,AACE,AACE,AAAA,AAAMF;AAAKR;;AADb,AAEE,AAACnB,AAAW2B;AAAK,AAAA,AAACG,AAAOX,AAAcY,AAAKF;;AAF9C,AAGE,AAAC/B,AAAc6B;AAAK,AAAA,AAACG,AAAOX,AAAeY,AAAKF;;AAHlD,AAIQV;;;;;AAPd,AAAA,AAAA,AAAA,AAAA,AASET;AAZ/BH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9B,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAC,AAAA4B,AAAAA;AAAA,AAAA3B,AAAA2B,AAAA,AAGcS;AAHd,AAAApC,AAAA2B,AAAA,AAGoBU;AAUdb,AAAY,AAAA,AAAC4B,AAAQ,AAACC,AAAOzB,AAAaS,AAAOD;AAbvD,AAcEZ;;AAEJ,AAAA,AAAA8B,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1D,AAAA,AAAA0D,AAAA,AAAA,AAAA,AAAA,AAAAzD,AAAAC,AAAAwD,AAAAA;AAAAA,AACkCR;AADlC,AAAA/C,AAAAuD,AAAA,AACWE;AADX,AAAAzD,AAAAuD,AAAA,AACgBG;AADhB,AAAA1D,AAAAuD,AAAA,AACoBI;AADpB,AAAA,AAAA,AAES1E,AAAG,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAoE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AACV,AAAI,AAAA,AAAC5C,AAAQyC;AACX,AAAA,AAACL,AAAS,AAAA,AAACU,AAAUH;;AADvB,AAEID;;;AAEN;;;;AAAA,AAAMK,AAGH/E,AAAIgF,AAAYxC;AAHnB,AAAA,AAAA,AAAA,AAAA,AAIwGvC,AAAG,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AACzG,AAAAG,AAAgC,AAAA,AAACxC,AAAqBL;AAAtD,AAAAE,AAAA2C,AAAA,AAAA,AAAOE;AAAP,AAAA7C,AAAA2C,AAAA,AAAA,AAAoB7C;AACdA,AAAkB,AAACD,AAA+B,AAACb,AAAIc;AACvDgD,AAAkB,AAAA,AAAA,AAAIhD,AAAWS;AACjC7B,AAAkB,AAAA,AAAA,AAAIoB,AAAWS;AAHvCqC,AAIyB,AAAA,AAAAK,AAAC9C;AAAD,AAAa,AAACb,AAAEwD,AAAW,AAAA,AAAAG;AAAUnD;AAJ9D,AAAAE,AAAA4C,AAAA,AAAA,AAIOG;AAJP,AAAA/C,AAAA4C,AAAA,AAAA,AAIeI;AACTE,AAAkB,AAACtC,AACC,AAAAuC,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjF,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAAhF,AAAAC,AAAA+E,AAAAA;AAAA/B,AAAA,AAAA/C,AAAA8E,AAAA;AAAA,AACE,AAAMF,AAAG,AAACI,AAAiBjC;AAA3B,AACE,AAACK,AAAK2B,AAAIH;AAHhB,AAKEH;AACpB1B,AAAkB,AAACkC,AAAeL;AAClCM,AAAkB,AAACC;AAZzB,AAaMC;AAbN,AAAA,AAAA,AAAA,AAAA,AAAA,AAcMC,AAAoCH,AACAE,AACArC,AACA3C,AACA,AAAAkF;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1F,AAAA,AAAA0F,AAAA,AAAA,AAAA,AAAA,AAAAzF,AAAAC,AAAAwF,AAAAA;AAAAA,AAAuBE;AAAvB,AAAAzF,AAAAuF,AAAA,AAAaC;AAAb,AACE,AAAAE,AAAA,AAAA/C,AAAkC8B;AAAlCkB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjG,AAAA,AAAAiG,AAAA,AAAA,AAAA,AAAA,AAAAhG,AAAAC,AAAA+F,AAAAA;AAAA,AAAA9F,AAAA8F,AAAA,AAAiBQ;AAAjB,AAAA,AACE,AAAMA;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAeb,AAAAA;;AADlB;;AADF;AAAA,AAAAC;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAE,AAAA,AAAApD,AAAA+C;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAI,AAAA,AAAApE,AAAAyD;AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAvG,AAAAC,AAAAsG,AAAAA;AAAA,AAAArG,AAAAqG,AAAA,AAAiBC;AAAjB,AAAA,AACE,AAAMA;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAeb,AAAAA;;AADlB;;AADF;AAAA,AAAA,AAAA5C,AAAA6C;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAnB5C,AAsB0C,AAAAa;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3G,AAAA,AAAA2G,AAAA,AAAA,AAAA,AAAA,AAAA1G,AAAAC,AAAAyG,AAAAA;AAAAA,AAAuBf;AAAvB,AAAAzF,AAAAwG,AAAA,AAAahB;AAAb,AACE,AAAAiB,AAAA,AAAA9D,AAAsC8B;AAAtCiC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhH,AAAA,AAAAgH,AAAA,AAAA,AAAA,AAAA,AAAA/G,AAAAC,AAAA8G,AAAAA;AAAA,AAAA7G,AAAA6G,AAAA,AAAiB9D;AAAjB,AAAA/C,AAAA6G,AAAA,AAAqBE;AAArB,AAAA,AACE,AAAMC,AAAS,AAAI,AAAC7C,AAAKqB,AACR,AAACyB,AAAYzB,AAAK,AAAChC,AAAST,AAC5ByC;AACXjD,AAAS,AAAA,AAAC2E,AAAMzB,AAAsBuB;AAH5C,AAIE,AAAA,AAAAG,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAA0C/E;AAA1C+E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzH,AAAA,AAAAyH,AAAA,AAAA,AAAA,AAAA,AAAAxH,AAAAC,AAAAuH,AAAAA;AAAA,AAAAtH,AAAAsH,AAAA,AAAuBK;AAAvB,AAAA3H,AAAAsH,AAAA,AAAmC9B;AAAnC,AACE,AAAI,AAAA,AAACxE,AAAM2G;AACT,AAACC,AAAuB5I,AAAIgF,AAAYkB,AAAiBM;;AACzD,AAACqC,AAAqB7I,AAAIkG,AAAiB,AAAKyC;;AAHpD,AAAAJ,AAAAC;AAAA,AAAA;AAAA;;AAIA,AAACT,AAAAA,AAAAA,AAAexE,AAAAA;;AATpB;AAAA,AAAAkE;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAb,AAAA,AAAApD,AAAA8D;AAAA,AAAA,AAAAV;AAAA,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAA,AAAAC,AAAAS;AAAA,AAAAR,AAAA,AAAAC,AAAAO;AAAA,AAAA,AAAA,AAAAN,AAAAM;AAAAR;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAa,AAAA,AAAA7E,AAAAwE;AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA,AAAAhH,AAAAC,AAAA+G,AAAAA;AAAA,AAAA9G,AAAA8G,AAAA,AAAiB/D;AAAjB,AAAA/C,AAAA8G,AAAA,AAAqBC;AAArB,AAAA,AACE,AAAMC,AAAS,AAAI,AAAC7C,AAAKqB,AACR,AAACyB,AAAYzB,AAAK,AAAChC,AAAST,AAC5ByC;AACXjD,AAAS,AAAA,AAAC2E,AAAMzB,AAAsBuB;AAH5C,AAIE,AAAA,AAAAG,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAM,AAA0ClF;AAA1CkF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5H,AAAA,AAAA4H,AAAA,AAAA,AAAA,AAAA,AAAA3H,AAAAC,AAAA0H,AAAAA;AAAA,AAAAzH,AAAAyH,AAAA,AAAuBE;AAAvB,AAAA3H,AAAAyH,AAAA,AAAmCjC;AAAnC,AACE,AAAI,AAAA,AAACxE,AAAM2G;AACT,AAACC,AAAuB5I,AAAIgF,AAAYkB,AAAiBM;;AACzD,AAACqC,AAAqB7I,AAAIkG,AAAiB,AAAKyC;;AAHpD,AAAAJ,AAAAG;AAAA,AAAA;AAAA;;AAIA,AAACX,AAAAA,AAAAA,AAAexE,AAAAA;;AATpB;AAAA,AAAA,AAAAM,AAAA4D;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAUA,AAACqB,AAAAA,AAAAA,AAAa9I,AAAAA,AAAIgF,AAAAA,AAAYkB,AAAAA,AAAiBE,AAAAA;AAjC3F,AAAA;AAAA,AAmCE,AAAI,AAACzC,AAAI8B;AAAT,AAAA,AAAA,AACgBY,AACA,AAAA,AAACjC,AAAQ,AAAA,AAACC,AAAOkB,AAAcc,AAAeX;;AAF9D,AAAA,AAGgBlD;;;AAEpB;;;;AAAA,AAAMuG,AAGH/I,AAAIgJ,AAAUhE;AAHjB,AAAA,AAAA,AAAA,AAAA,AAIuG/E,AAAGgJ;;AACxG,AAAAC,AAAuB,AAAClI,AAAI,AAACjB,AAAaC,AAAKgF;AAA/C,AAAA,AAAAkE;AAAA,AAAAA,AAAaC;AAAb,AAAA,AAAAD,AACuB,AAAA,AAAClI,AAAImI;AAD5B,AAAA,AAAAD;AAAA,AAAAA,AACaE;AADb,AAEE,AAAA,AACE,AAAA,AAAAjB,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAevC,AAAG,AAACI,AAAiB,AAAA,AAAOgD;AAA3C,AACE,AAACO,AAAsBvJ,AAAIgF,AAAY,AAAA,AAAMgE,AAAWpD;AAD1D,AAAA2C,AAAAe;AAAA,AAAA;AAAA;;AAEA,AAACF,AAAAA,AAAAA,AAAUD,AAAAA,AAAOH,AAAAA;AAHpB,AAAAK,AAI2Cd;AAJ3C,AAKI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAWnB,AAAoC,AAACvC,AAAiB,AAAA,AAAOgD;AAAxE,AAAA,AAAA;;AACA,AAAA,AACE,AAAA,AAAAb,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AACE,AAAA,AAACU,AAAqB7I,AAAI,AAAA,AAAMgJ;AADlC,AAAAT,AAAAqB;AAAA,AAAA;AAAA;;AAEA,AAAAC,AAAA,AAAA,AAAA,AAAA,AACiDtB;AADjDuB,AAAC,AAAA,AAAkBd;AAAnB,AAAA,AAAAc,AAAAA,AAAAD,AAAAC,AAAAD;AAHF,AAAAF,AAK2CpB;AAL3C,AAMI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAWnB;AAAX,AAAA,AAAA;;AACR,AACE,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAgD1E;AAAhD,AAAA,AAAA;;AACA,AAAA+E,AAAA,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAC,AAAA,AAAkBhB;AAAnB,AAAA,AAAAgB,AAAAA,AAAAD,AAAAC,AAAAD;;;AAFF,AACE,AAAAP,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAgD1E;AAAhD,AAAA,AAAA;;AACA,AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAC,AAAA,AAAkBlB;AAAnB,AAAA,AAAAkB,AAAAA,AAAAD,AAAAC,AAAAD;;;AAGN;;;AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvJ,AAAA,AAAAuJ,AAAA,AAAA,AAAA,AAAA,AAAAtJ,AAAAC,AAAAqJ,AAAAA;AAAAA,AAEgEpK;AAFhE,AAAAgB,AAAAoJ,AAAA,AAE8CE;AAF9C,AAAA,AAAA,AAAA,AAG2CrK;;AACzC,AAAMsK,AAAgB,AAAA,AAAA,AAAID,AAAapK;AACjCsK,AAAgB,AAACrK,AAAkBH;AACnCyK,AAAgB,AAAA,AAACC;AACjBC,AAAgB,AAACrH,AACC,AAAKqH,AAAgBxB;AAArB,AACE,AAAM3G,AAAW,AAAA,AAACxB,AAAIuJ,AAAYpB;AAAlCyB,AACiB,AAACtK,AAAiBkC;AADnC,AAAAE,AAAAkI,AAAA,AAAA,AACOC;AADP,AAAAnI,AAAAkI,AAAA,AAAA,AACSE;AACHC,AAAW,AAAC9H,AAAM6H;AAFxB,AAIE,AAAAE,AAAA,AAAArH,AAAakH;AAAbI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAAA,AAACC,AAAMZ,AAAWa;;AAAlB,AAAwB,AAACvC,AAAU/I,AAAIoL,AAAKjC;;;;AAD9C;AAAA,AAAA6B;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApE,AAAA,AAAApD,AAAAqH;AAAA,AAAA,AAAAjE;AAAA,AAAA,AAAAiE,AAAAjE;AAAA,AAAA,AAAA,AAAAC,AAAAgE;AAAA,AAAA/D,AAAA,AAAAC,AAAA8D;AAAA,AAAA,AAAA,AAAA7D,AAAA6D;AAAA/D;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAhE,AAAA+H,AAAQI;AAAR,AAAA,AACE,AAAA,AAACC,AAAMZ,AAAWa;;AAAlB,AAAwB,AAACvC,AAAU/I,AAAIoL,AAAKjC;;;;AAD9C;AAAA,AAAA,AAAAtF,AAAAmH;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAGA,AAAI,AAAA,AAAWD;AACb,AAAC7C,AAAMyC,AAAgBxB,AAAO2B;;AAC9B,AAAAS,AAAsC,AAACxG,AAAc/E,AAAImJ,AAAO2B;AAAhES,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1K,AAAA,AAAA0K,AAAA,AAAA,AAAA,AAAA,AAAAzK,AAAAC,AAAAwK,AAAAA;AAAA,AAAAvK,AAAAuK,AAAA,AAAe/I;AAAf,AAAAxB,AAAAuK,AAAA,AAA0BvC;AAA1B,AACE,AAAMA;AAAN,AACE,AAAA,AAACqC,AAAMZ,AAAWa;AAAlB,AAAwB,AAACvC,AAAU/I,AAAIgJ,AAAUG;;;AADnD;;AAEA,AAACjB,AAAMyC,AAAgBxB,AAAO3G;;AAdxC,AAgBEgI;AAnBxB,AAoBE,AAAA,AAACa,AAAMf,AAAakB,AAAoBb;;AAIxC,AAAAc,AAAA,AAAA9H,AAAA,AAAAzD,AAAYuK;AAAZiB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAACA,AAAAA,AAAAA;;AADH;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA7E,AAAA,AAAApD,AAAA8H;AAAA,AAAA,AAAA1E;AAAA,AAAA,AAAA0E,AAAA1E;AAAA,AAAA,AAAA,AAAAC,AAAAyE;AAAA,AAAAxE,AAAA,AAAAC,AAAAuE;AAAA,AAAA,AAAA,AAAAtE,AAAAsE;AAAAxE;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAhE,AAAAwI,AAAQI;AAAR,AAAA,AACE,AAACA,AAAAA,AAAAA;;AADH;AAAA,AAAA,AAAAhI,AAAA4H;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEAd;;AAEJ,AAAA,AAAA,AAAAmB,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFpG;AADJ,AAAA,AAAA,AAAA,AAES3F;;AACN,AAAA,AAACiM,AAAQtG;;;AAHZ,AAAA,AAAA,AAAMoG,AAIFpG,AAAGxE;AAJP,AAAA,AAAA,AAAA,AAAA,AAKmBnB;;AAChB,AAAM8D,AAAU,AAACkC,AAAeL;AAC1BuG,AAAU,AAAA,AAAWpI;AACrBqI,AAAU,AAAA,AAAChI,AACC,AAACiI,AACC,AAACC,AAAO,AAAatJ;AAAb,AAAgB,AAAA,AAAChB,AAAQ,AAAA,AAAOgB;AACxC,AAACuJ,AACC,AAAeC,AAAIC;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACuBD,AACAC;AAK3BN;AAblB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAcc,AAAChG,AACD,AAACuG,AACDtL,AACAwE,AACAwG;;;AAxBjB,AAAA,AAAA,AAAMJ;;AAAN,AA0BA,AAAA,AAAA,AAAAF,AAAMc;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAAY,AAAMD,AACF5M,AAAmCkN;AADvC,AAAA,AAAAJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjM,AAAA,AAAAiM,AAAA,AAAA,AAAA,AAAA,AAAAhM,AAAAC,AAAA+L,AAAAA;AAAAA,AAC8BG;AAD9B,AAAAjM,AAAA8L,AAAA,AACiB1L;AADjB,AAAA,AAAA,AAAA,AAEsD+D,AAAKlF,AAAGkF;;AAC3D,AAAAgI,AAA8B/L;AAA9B+L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtM,AAAA,AAAAsM,AAAA,AAAA,AAAA,AAAA,AAAArM,AAAAC,AAAAoM,AAAAA;AAAA,AAAAnM,AAAAmM,AAAA,AAAcC;AAAd,AAAApM,AAAAmM,AAAA,AAAkBE;AAAlB,AACE,AAAAC,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAML,AAAa,AAAA,AAAIlN,AACJA;AAD5BsN,AAAA,AAAAA,AAEElM,AAAQ,AAAAkM,AAAA,AAACpF,AAAgB9G;AAF3BkM,AAAA,AAAAA,AAGEF,AAAI,AAAAE,AAAA,AAACpF,AAAWkF;AAHlB,AAAA,AAIEC;AAAU,AAAAC,AAAA,AAACpF,AAAiBmF;;AAJ9BC;;;;AAJL,AAAA,AAAA,AAAAP,AAAMH,AASF5M;AATJ,AAAA,AAAAgN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnM,AAAA,AAAAmM,AAAA,AAAA,AAAA,AAAA,AAAAlM,AAAAC,AAAAiM,AAAAA;AAAAA,AAS+BC;AAT/B7L,AAAA,AAAAJ,AAAAgM,AAAA;AAAA,AAAA,AAAA,AAAA,AAUsD/M,AAAGkF;;AACtD,AAAA,AAACqI,AAAUxN,AAAIiN;;;AAXlB,AAAA,AAAA,AAAML;;AAAN,AAaA;;;;AAAA,AAAMa,AAGHR,AAAQS,AAAIC;AAHf,AAAA,AAAA,AAAA,AAIaxI,AAAK8D,AAAKhJ;;AACrB,AAAM2N,AAAa,AAAUF;AAAV,AACE,AAAA,AACE,AAACC,AAAAA,AAAAA,AAAYD,AAAAA;AADf,AAAAG,AAE2CtF;AAF3C,AAGI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAWnB,AAA0B,AAAAuF,AAAQJ;AAARI,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAAiB9H;;AAAtD;AAAA,AAAA,AAAA;;AAHJ;;AAKf+H,AAAa,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApN,AAAA,AAAAoN,AAAA,AAAA,AAAA,AAAA,AAAAnN,AAAAC,AAAAkN,AAAAA;AAAAA,AAAgDE;AAAhDD,AAAA,AAAAlN,AAAAiN,AAAA;AAAA,AACE,AAAAG,AAAqBF;AAArBE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvN,AAAA,AAAAuN,AAAA,AAAA,AAAA,AAAA,AAAAtN,AAAAC,AAAAqN,AAAAA;AAAA,AAAApN,AAAAoN,AAAA,AAAc3J;AACRiJ,AAAI,AAAA,AAACxF,AAAMwF,AAASQ;AAD1B,AAEE,AAAAG,AAAQF;AAAR,AAAA,AACE,AAAA,AAACnM,AAAQyC;AAAM,AAAA4J,AAAA,AAACnG,AAAiB,AAAC0F,AAAYF;;AADhDW;;;AAEjBC,AAAa,AAAKC;AAAL,AAAW,AAACxL,AAAKgL,AAASQ;;AAX7C,AAYE,AAAA,AAACrK,AAAO+I,AAAmBqB;;AAE/B;;;;AAAA,AAAAE,AAAME,AAGgEtN;AAHtE,AAAA,AAAAqN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5N,AAAA,AAAA4N,AAAA,AAAA,AAAA,AAAA,AAAA3N,AAAAC,AAAA0N,AAAAA;AAAAA,AAGiEzO;AAHjEsK,AAAA,AAAAtJ,AAAAyN,AAAA;AAAA,AAIE,AAAM,AAAA,AAAAE,AAACC;AAAD,AAAO,AAACvN,AAAQ,AAAA,AAAA,AAAA,AAAAsN;AAAiC,AAAA,AAAA,AAAIrE,AAAapK;AAAxE,AACE,AAAA,AAACmL,AAAMf,AAAauE,AAClB,AAAKC;AAAL,AAAY,AAAC/L,AAAK,AAAKgM;AAAL,AAAW,AAAA,AAAA,AAAC7K,AAAO6K,AAAeC;AAAwBF;;;AAC9E,AAAA,AAAA,AAACG,AAAAA,AAAAA,AAAqBjP,AAAAA;;AAHxB;;;AAKF;;;;;;AAAA,AAAAkP,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtO,AAAA,AAAAsO,AAAA,AAAA,AAAA,AAAA,AAAArO,AAAAC,AAAAoO,AAAAA;AAAAA,AAKiEnP;AALjEsK,AAAA,AAAAtJ,AAAAmO,AAAA;AAAA,AAAA,AAAA,AAM2ClP,AAAGgJ;;AAC5C,AAAAoG,AAAiC,AAAC5N,AAAS,AAAA,AAAA,AAAC4K,AAAKhL,AAAkC,AAAA,AAAA,AAAAnB,AAAqBoK;AAAxG+E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxO,AAAA,AAAAwO,AAAA,AAAA,AAAA,AAAA,AAAAvO,AAAAC,AAAAsO,AAAAA;AAAA,AAAArO,AAAAqO,AAAA,AAAOC;AAAP,AAAAtO,AAAAqO,AAAA,AAAoBE;AACdC,AAAiB,AAAA,AAAAC,AAAC1M;AAAD,AAAO,AAAA0M,AAAChC,AAAoB,AAAAgC,AAACjC,AAAUxN,AAAO0P;AAAUH;AAD/E,AAEE,AAAClE,AAAMf,AAAa,AAAKqF;AAAL,AACMA,AACF,AAAA,AAAA,AAAAC,AAAC1L,AACD,AAACgE;AADD,AAAwB,AAAA0H,AAACtM,AAAOgI,AAAOkE;AACvC,AAA0B,AAAC9N,AAAI4N;;;AACvD,AAACO,AAAAA,AAAAA,AAAe7P,AAAAA;;AAEpB,AAAA;;;;AAAA,AAAA8L,AAAMmD;AAAN,AAAA,AAAAa,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhD,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMgD,AAGFjP,AAAI+P;AAHR,AAAA,AAAA,AAI4CC,AAAK/P,AAAGgJ;;AACjD,AAAA,AAACgH,AAAUjQ,AAA4BoP,AAAsBW;;;AALhE,AAAA,AAAA,AAAMd,AAMFjP;AANJ,AAAA,AAAA,AAO4CC,AAAGgJ;;AAC5C,AAAA,AAACiH,AAAqBlQ;;;AARzB,AAAA,AAAA,AAAMiP;;AAAN,AAUA,AAAA;;;;AAAA,AAAAnD,AAAMsE;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAnE,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMmE,AAGFpQ,AAAI+P;AAHR,AAAA,AAAA,AAI4CC,AAAK/P,AAAGgJ;;AACjD,AAAA,AAACgH,AAAUjQ,AAAkC6P,AAAeE;;;AAL/D,AAAA,AAAA,AAAMK,AAMFpQ;AANJ,AAAA,AAAA,AAO4CC,AAAGgJ;;AAC5C,AAAA,AAACoH,AAA2BrQ;;;AAR/B,AAAA,AAAA,AAAMoQ;;AAAN,AAUA,AAAA;;;AAAA,AAAAtE,AAAMyE;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAtE,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMsE,AAEFvQ,AAAI+P;AAFR,AAAA,AAAA,AAG4CC,AAAK/P,AAAGgJ;;AACjD,AAAA,AAACgH,AAAUjQ,AAAuBqK,AAAqB0F;;;AAJ1D,AAAA,AAAA,AAAMQ,AAKFvQ;AALJ,AAAA,AAAA,AAM4CC,AAAGgJ;;AAC5C,AAAA,AAACuH,AAAgBxQ;;;AAPpB,AAAA,AAAA,AAAMuQ;;AAAN,AASA;;;AAAA,AAAAE,AAAME,AAEH3Q;AAFH,AAAA,AAAA0Q,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7P,AAAA,AAAA6P,AAAA,AAAA,AAAA,AAAA,AAAA5P,AAAAC,AAAA2P,AAAAA;AAAAA,AAEiC3B;AAFjC,AAAA/N,AAAA0P,AAAA,AAEgBlN;AAFhB,AAAAxC,AAAA0P,AAAA,AAEmBtE;AAFnB,AAAA,AAAA,AAAA,AAAA,AAGqDnM;;AACnD,AAAM2Q,AAAa,AAACzQ,AAAkBH;AAChC6Q,AAAa,AAACvN,AACC,AAAAwN,AAA0CI;AAA1C,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlQ,AAAA,AAAAkQ,AAAA,AAAA,AAAA,AAAA,AAAAjQ,AAAAC,AAAAgQ,AAAAA;AAAAA,AAAqChL;AAArC,AAAA/E,AAAA+P,AAAA,AAAaC;AAAb,AAAAhQ,AAAA+P,AAAA,AAAmBE;AAAnB,AACE,AAAID;AACF,AAAA,AAAC9M,AAAO6B,AAAkBuF,AAAK4F;;AAC/B,AAAAC,AAA0DD;AAA1DC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtQ,AAAA,AAAAsQ,AAAA,AAAA,AAAA,AAAA,AAAArQ,AAAAC,AAAAoQ,AAAAA;AAAA,AAAAnQ,AAAAmQ,AAAA,AAAeE;AAAf,AAAArQ,AAAAmQ,AAAA,AAAyBpD;AAAzB,AAAA/M,AAAAmQ,AAAA,AAAkCjD;AAAlC,AAAAlN,AAAAmQ,AAAA,AAAoD3E;AAApD4E,AACuBrD;AADvBqD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvQ,AAAA,AAAAuQ,AAAA,AAAA,AAAA,AAAA,AAAAtQ,AAAAC,AAAAqQ,AAAAA;AAAA,AAAApQ,AAAAoQ,AAAA,AACcE;AACRC,AAAgB,AAACC,AAAiBZ,AAAQ,AAACvQ,AAAI,AAACD,AAAK2N;AACrD0D,AAAgB,AAAAtJ,AAAKmJ;AAAL,AAAA,AAAAnJ;AAAY,AAACuJ,AAAI,AAAApQ,AAAI0P;AAAJ,AAAA,AAAA1P;AAAAA;;AAAU,AAAA,AAAA,AAAC+P,AAAAA,AAAAA;;;;AAA5BlJ;;;AAChBwJ,AAAgB,AAAAxJ,AAAK,AAAA7G,AAAImQ;AAAJ,AAAA,AAAAnQ;AAAAA;;AAAU,AAAA,AAAA,AAAC+P,AAAAA,AAAAA;;;AAAhB,AAAA,AAAAlJ;AAAoC,AAACyJ,AAAO,AAACC,AAAeN,AAAWF;;AAAvElJ;;;AAChB2J,AAAgB,AAACC,AAA2B/R;AAC5CgS,AAAgB,AAAA,AAAgDhS;AANtE,AAAAE,AAOM+R,AAAiBD;AACjBE,AAAgB,AAAIT,AAAUP,AACF,AAAA,AAAChJ,AAA4B+J,AAC7B,AAAA,AAAA,AAAC/N,AAAmBoH,AAAe4F;AAC/DF,AAAgB,AAACU,AAAIC;AAX3B,AAAA,AAAA,AAYMQ,AAA+BnB,AACA,AAACoB,AAAKnB,AAAaiB;AAClDxE,AAAgB,AAAA,AAAA,AAACF,AAAUxN,AAAI+O,AAAWb;AAdhD,AAeE,AAAMuD;AAAN,AACE,AAAA,AACE,AAAMH;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAO5D,AAAAA;;AADV;AADF,AAAA2E,AAG2C9J;AAH3C,AAII,AAAM+J,AAAgB,AAAA,AAAepE;AAArC,AACE,AAAA1E,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAWnB,AAAqC+J;AAAhD,AAAA,AAAA;;AACN,AAAA,AAAAnK,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOvC,AAAG,AAAA,AAAC4M,AAActE;AAAzB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhO,AAAA,AAACuS,AAAoCzS,AAAI0N,AAAsB,AAAA,AAAKlK,AAAOgJ,AACZsF,AACAG,AACCD,AACDpM;AALjE,AAAA2C,AAAAgK;AAAA,AAAA;AAAA;;AAPF;;AAaAJ;;AAhCR,AAAA,AAAA,AAAA,AAAA,AAkCE/F;AACf6E,AAAa,AAAA,AAAeJ;AApClC,AAqCE,AAAA,AAAC3I,AAAM6G,AAAgBkC;;AAE3B,AAAA,AAAAyB,AAAME,AACH5S;AADH,AAAA,AAAA2S,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9R,AAAA,AAAA8R,AAAA,AAAA,AAAA,AAAA,AAAA7R,AAAAC,AAAA4R,AAAAA;AAAAA,AACiC5D;AADjC,AAAA/N,AAAA2R,AAAA,AACgBnP;AADhB,AAAAxC,AAAA2R,AAAA,AACmBvG;AADnB,AAAA,AAAA,AAAA,AAAA,AAEqDnM;;AACnD,AAAMgR,AAAa,AAAC3N,AACC,AAAK2N,AAAaC;AAAlB,AACE,AAAA2B,AAA0D3B;AAA1D2B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhS,AAAA,AAAAgS,AAAA,AAAA,AAAA,AAAA,AAAA/R,AAAAC,AAAA8R,AAAAA;AAAA,AAAA7R,AAAA6R,AAAA,AAAerG;AAAf,AAAAxL,AAAA6R,AAAA,AAAmBxB;AAAnB,AAAArQ,AAAA6R,AAAA,AAA6B9E;AAA7B,AAAA/M,AAAA6R,AAAA,AAAsC3E;AAAtC4E,AACuB/E;AADvB+E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjS,AAAA,AAAAiS,AAAA,AAAA,AAAA,AAAA,AAAAhS,AAAAC,AAAA+R,AAAAA;AAAA,AAAA9R,AAAA8R,AAAA,AACcxB;AACRG,AAAgB,AAAAtJ,AAAKmJ;AAAL,AAAA,AAAAnJ;AAAY,AAACuJ,AAAI,AAAA,AAAA,AAACL,AAAAA,AAAAA;;AAAlBlJ;;;AAChB2J,AAAgB,AAACC,AAA2B/R;AAC5CgS,AAAgB,AAAA,AAAgDhS;AAJtE,AAAAE,AAKM+R,AAAiBD;AACjBe,AAAgB,AAAItB,AAAUP,AACF,AAAA,AAAChJ,AAA4B+J,AAC7B,AAAA,AAAA,AAAC/N,AAAmBoH,AAAe4F;AAC/DiB,AAAgB,AAACC,AAAKnB,AAAa8B;AACnCrF,AAAgB,AAAA,AAAA,AAACF,AAAUxN,AAAI+O,AAAWb;AAVhD,AAWE,AAAMuD;AAAN,AACE,AAAA,AACE,AAACH,AAAAA,AAAAA,AAAO5D,AAAAA;AADV,AAAAsF,AAE2CzK;AAF3C,AAGI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAWnB,AAA2D,AAAA,AAAe2F;AAArF,AAAA,AAAA;;AACJ,AAAA,AAAA/F,AAAA,AAAA7G,AAAA8G;AAAA,AAAA,AAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,AAAAF;AAAA,AAAA7F,AAAA,AAAA+F;;AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOvC,AAAG,AAAA,AAAC4M,AAActE;AAAzB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhO,AAAA,AAACuS,AAAoCzS,AAAI0N,AAAsB,AAAA,AAAKlK,AAAOgJ,AACZsF,AACAG,AACCD,AACDpM;AALjE,AAAA2C,AAAA0K;AAAA,AAAA;AAAA;;AALF;;AAWAd;AAxBN,AA0BE/F;AA1BrB,AA2BE,AAAA,AAAClE,AAAM6G,AAAgBkC;;AAE3B,AAAA,AAAAiC,AAAME,AACHpT;AADH,AAAA,AAAAmT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtS,AAAA,AAAAsS,AAAA,AAAA,AAAA,AAAA,AAAArS,AAAAC,AAAAoS,AAAAA;AAAAA,AAC+BlG;AAD/Bb,AAAA,AAAApL,AAAAmS,AAAA;AAAA,AAAA,AAAA,AAAA,AAEqDlT,AAAG8B;;AACtD,AAAMsR,AAAkB,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1S,AAAA,AAAA0S,AAAA,AAAA,AAAA,AAAA,AAAAzS,AAAAC,AAAAwS,AAAAA;AAAAxF,AAAA,AAAA/M,AAAAuS,AAAA;AAAAlC,AAAA,AAAArQ,AAAAuS,AAAA;AAAA,AACE,AAAM3C,AAAY,AAACzQ,AAAkBH;AAC/BwT,AAAY,AAAA,AAAA,AAACC,AAAqB7C;AAClC8C,AAAY,AAAClC,AAAiBgC,AAAY,AAACnT,AAAI,AAACD,AAAK2N;AAF3D,AAGE,AAAC6D,AAAO,AAACC,AAAe6B,AAAYrC;;AAJhE,AAKE,AAACpP,AAAOoR,AAAkBjH;;AAE9B;;;AAAA,AAAAuH,AAAM7K,AAE+DK,AAAO0K,AAAOC;AAFnF,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/S,AAAA,AAAA+S,AAAA,AAAA,AAAA,AAAA,AAAA9S,AAAAC,AAAA6S,AAAAA;AAAAA,AAEgE5T;AAFhE,AAAAgB,AAAA4S,AAAA,AAE8CtJ;AAF9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsGrK,AAAGgJ;;AACvG,AAAA8K,AAAA,AAAA7T,AAA+BoK;AAA/ByJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlT,AAAA,AAAAkT,AAAA,AAAA,AAAA,AAAA,AAAAjT,AAAAC,AAAAgT,AAAAA;AAAAxJ,AAAA,AAAAvJ,AAAA+S,AAAA;AACMC,AAAU,AAAChT,AAAIuJ,AAAYpB;AAC3B2F,AAAU,AAACmF,AAAQ,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtT,AAAA,AAAAsT,AAAA,AAAA,AAAA,AAAA,AAAArT,AAAAC,AAAAoT,AAAAA;AAAA3Q,AAAA,AAAAxC,AAAAmT,AAAA;AAAA3H,AAAA,AAAAxL,AAAAmT,AAAA;AAAA,AACE,AAAK,AAAK,AAACnS,AAAE6R,AAAOrQ,AAAI,AAACxB,AAAE8R,AAAQtH;AAAQwH;AAHtE,AAIE,AAAA,AAAA,AAAC3I,AAAMf,AAAa8J,AAAwBjL,AAAQ2F;;AAExD,AAAA;;;;;AAAA,AAAAhD,AAAMwI;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAArI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAAsI,AAAMD,AAIgET,AAAOC,AAAQ3K,AAAO5F,AAAOkR;AAJnG,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3T,AAAA,AAAA2T,AAAA,AAAA,AAAA,AAAA,AAAA1T,AAAAC,AAAAyT,AAAAA;AAAAA,AAIiExU;AAJjE,AAAAgB,AAAAwT,AAAA,AAI+ClK;AAJ/C,AAAA,AAAA,AAAA,AAKiD0F,AAAK0E,AAASzL,AAAKyL,AAASzU,AAAGgJ;;AAC7E,AAAMrG,AAAa,AAAA,AAAA,AAAA1C,AAAiBoK;AAC9BqK,AAAa,AAACrR,AACC,AAAAsR,AAAKpI;AAAL,AAAA,AAAAqI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhU,AAAA,AAAAgU,AAAA,AAAA,AAAA,AAAA,AAAA/T,AAAAC,AAAA8T,AAAAA;AAAArR,AAAA,AAAAxC,AAAA6T,AAAA;AAAA,AACE,AAAI,AAAC7S,AAAEwB,AAAGqQ;AACR,AAACiB,AAAQtI;;AACT,AAAA,AAAKA;;AAJX,AAME5J;AACfmS,AAAa,AAAI,AAAIJ,AAAQ,AAACvN,AAAMxE,AAAe,AAACN,AAAKuR,AAAO,AAAA,AAAM,AAAC7S,AAAI4B,AAAa+R;AAR9F,AASE,AAAII;AACF,AAAAvL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAgCP;AAAhC,AAAA,AAAA;;AACA,AAAA,AAAA,AAAA,AAACkC,AAAMf,AAAa8J,AAAyBO,AAAmBb,AAAQW,AAAWtL,AAAQ5F;;;;AAjBlG,AAAA,AAAA,AAAM+Q,AAkBFtU,AAAI6T,AAAOC,AAAQ3K,AAAO5F;AAlB9B,AAAA,AAAA,AAAA,AAmBiDyM,AAAK0E,AAASzL,AAAKhJ,AAAGgJ;;AACpE,AAAA,AAAC+L,AAAehV,AAAI6T,AAAOC,AAAQ3K,AAAO5F;;;AApB7C,AAAA,AAAA,AAAM+Q;;AAAN,AAsBA;;;AAAA,AAAMW,AAEHjV,AAAImJ,AAAO8D,AAAQiI;AAFtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGkHjV;;AAChH,AAAAkV,AAAgED;AAAhEC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtU,AAAA,AAAAsU,AAAA,AAAA,AAAA,AAAA,AAAArU,AAAAC,AAAAoU,AAAAA;AAAA,AAAAnU,AAAAmU,AAAA,AAAepH;AAAf,AAAA/M,AAAAmU,AAAA,AAAwBjH;AAAxB,AAAAlN,AAAAmU,AAAA,AAA0CC;AACpC1H,AAAgB,AAAA,AAAA,AAAA,AAACF,AAAUxN,AAAIiN,AAA8BiB,AACAkH;AAC7DC,AAAgB,AAACrU,AAAI+M,AAAS5E;AAC9BmM,AAAgB,AAAA,AAAA,AAAMD,AAAU,AAACA,AAAAA,AAAAA,AAAU3H,AAAAA;AAC3C6H,AAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAAI,AAAQD,AAAe,AAAA,AAAMA,AACjC,AAAOA,AAAepH,AACtB,AAAK,AAAC/I,AAAKmQ,AAAe,AAAA,AAAClQ,AAAUkQ,AAAqB,AAAA,AAAMA,AAChE,AAAK,AAACnQ,AAAKmQ,AAAe,AAAA,AAAClQ,AAAUkQ,AAAsBA,AACrD;AACE,AAAA9L,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAiCP,AAAoCmM;AAArE,AAAA,AAAA;;AACAA;;;;AAK1BE,AAAgB,AAAA,AAACC,AAAiBzV;AAClC+D,AAAgB,AAAI,AAAAoE,AAAKoN;AAAL,AAAA,AAAApN;AAAiBqN;;AAAjBrN;;AACF,AAACqN,AAAAA,AAAAA,AAAgBD,AAAAA,AACjBA;AApBxB,AAqBE,AAAAG,AAAQR;AAARQ,AAAA,AAAAA,AACEH,AAAY,AAAAG,AAAA,AAAA,AAACtB,AAA8BjL,AAAQoM;AADrD,AAAA,AAEExR;AAAI,AAAA2R,AAAA,AAAA,AAACtB,AAAkCjL,AAAQpF;;AAFjD2R;;;AAIJ;;;AAAA,AAAAC,AAAAC,AAAMG,AAEiGjC,AAAQ3K;AAF/G,AAAA,AAAA0M,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhV,AAAA,AAAAgV,AAAA,AAAA,AAAA,AAAA,AAAA/U,AAAAC,AAAA8U,AAAAA;AAAAA,AAEgE7V;AAFhE,AAAAgB,AAAA6U,AAAA,AAE8CvL;AAF9CwL,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjV,AAAA,AAAAiV,AAAA,AAAA,AAAA,AAAA,AAAAhV,AAAAC,AAAA+U,AAAAA;AAAAA,AAE8F7I;AAF9F,AAAAjM,AAAA8U,AAAA,AAE8EtS;AAF9E,AAAAxC,AAAA8U,AAAA,AAEiF1U;AAFjF,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGnB,AAAG,AAAA+V,AAAA,AAAA,AAAA,AAAA;;AACJ,AAAM1O,AAAe,AAAuB/D;AAAvB,AACE,AAAA,AAACyR,AAAehV,AAAIwD,AAAGsQ,AAAQ3K,AAAO5F;;AACtC,AAAA,AAAC8M,AAA2BrQ;;AAC7C+D,AAAe,AAAA,AAAA,AAAA,AAACkS,AAAOhJ,AAAoB6G,AAAgC3K;AAC3E+M,AAAe,AAAqB3S;AAArB,AACE,AAACyR,AAAehV,AAAIwD,AAAGsQ,AAAQ3K,AAAO5F;;AACtC,AAACuF,AAAa9I,AAAImJ,AAAO3F,AAAGsQ;;AAC5B,AAAA,AAACtD,AAAgBxQ;;AACjB,AAAA,AAACqQ,AAA2BrQ;;AARnD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASMgJ,AAAiCxF,AACAsQ,AACA/P,AACA3C,AAEA8U,AACA5O;AAfvC,AAgBE,AAAIvD;AACF,AACE,AAAA,AAAA,AAACsH,AAAMf,AAAa6L,AAAyBhN,AAAQ,AAAA,AAACiN,AAAK9K,AAAStC;;AACpEA;;AACF,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkN;;AADH;;;AAIN;;;AAAA,AAAAG,AAAMG,AAEHxW,AAAIiN;AAFP,AAAA,AAAAqJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzV,AAAA,AAAAyV,AAAA,AAAA,AAAA,AAAA,AAAAxV,AAAAC,AAAAuV,AAAAA;AAAA9J,AAAA,AAAAxL,AAAAsV,AAAA;AAAAvI,AAAA,AAAA/M,AAAAsV,AAAA;AAAAC,AAAA,AAAAvV,AAAAsV,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGkErW;;AAChE,AAAM2Q,AAAY,AAACY,AAAiB,AAACnR,AAAI,AAACD,AAAK2N,AAAW,AAAC5N,AAAkBH;AACvEyW,AAAY,AAAC5E,AAAejB,AAAQ2F;AAD1C,AAEE,AAACjT,AACC,AAAKyL,AAAK5F;AAAV,AACE,AAAI,AAAC/D,AAAU,AAAA,AAAA,AAAA,AAAA,AAAC6Q,AAAOlH,AAAiBvC,AAAqBrD;AAC3D4F;;AACA,AAAMgE,AAAiBhE,AACF,AAAA,AAAA,AAAC2H,AAAsBlK,AAAK,AAAK0I,AACjC,AAACwB;AAD2B,AAAiB,AAACzB,AAAyBjV,AAAImJ,AAAO4F,AAAKmG;AACvF,AAAA,AAAA,AAAuB1I,AAAgBlB,AAAKnC;AAFjE,AAGE,AAAC4M,AAAU/V,AAAI+S,AAAavG,AAAIrD;;AAChC4J;;AACN9F,AACAwJ;;AAEN;;;AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/V,AAAA,AAAA+V,AAAA,AAAA,AAAA,AAAA,AAAA9V,AAAAC,AAAA6V,AAAAA;AAAAA,AAE2B3J;AAF3Bb,AAAA,AAAApL,AAAA4V,AAAA;AAAA,AAAA,AAAA,AAGa3W,AAAG8B;;AACd,AAACE,AACC,AAAA6U;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlW,AAAA,AAAAkW,AAAA,AAAA,AAAA,AAAA,AAAAjW,AAAAC,AAAAgW,AAAAA;AAAAR,AAAA,AAAAvV,AAAA+V,AAAA;AAAA1F,AAAA,AAAArQ,AAAA+V,AAAA;AAAA,AACE,AAAMC,AAAY,AAACnF,AAAe0E,AAASlF;AAA3C,AACE,AAACO,AAAOoF;AACZ5K;;AAEJ;;;;;;AAAA,AAAA6K,AAAME,AAKH3M;AALH,AAAA,AAAA0M,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArW,AAAA,AAAAqW,AAAA,AAAA,AAAA,AAAA,AAAApW,AAAAC,AAAAmW,AAAAA;AAAAA,AAKmDhG;AALnDnD,AAAA,AAAA/M,AAAAkW,AAAA;AAAAX,AAAA,AAAAvV,AAAAkW,AAAA;AAAA,AAAA,AAAA,AAAA,AAMiEjX,AAAG,AAAA+V,AAAA,AAAA,AAAA,AAAA;;AAClE,AAAMoB,AAAU,AAAC5F,AAAiBhH,AAAa,AAACnK,AAAI,AAACD,AAAK2N;AACpDsJ,AAAU,AAACxF,AAAeuF,AAAKb;AADrC,AAEE,AAAM,AAAC5S,AAAI0T;AAAX,AACEnG;;AADF;;;AAGJ;;;;;AAAA,AAAAoG,AAAME,AAIHxX;AAJH,AAAA,AAAAuX,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1W,AAAA,AAAA0W,AAAA,AAAA,AAAA,AAAA,AAAAzW,AAAAC,AAAAwW,AAAAA;AAAAA,AAI+BtK;AAJ/Bb,AAAA,AAAApL,AAAAuW,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAKqDtX;;AACnD,AAAI,AAAC4W,AAAW5J;AACd,AAAM2D,AAAU,AAACzQ,AAAkBH;AAC7ByX,AAAU,AAACC,AAAQP,AAAkBvG;AACrCM,AAAU,AAACtC,AAAK6I,AAAUrL;AAFhC,AAGE,AAAI8E;AACF,AAACsF,AAAqBxW,AAAIiN,AAAQiE;;AAClCjE;;;AACJA;;;AAEJ;;;;AAAA,AAAA0K,AAAME,AAGH7X;AAHH,AAAA,AAAA4X,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/W,AAAA,AAAA+W,AAAA,AAAA,AAAA,AAAA,AAAA9W,AAAAC,AAAA6W,AAAAA;AAAAA,AAGyC3K;AAHzC7L,AAAA,AAAAJ,AAAA4W,AAAA;AAAAxL,AAAA,AAAApL,AAAA4W,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAIqD3X;;AACnD,AAAM6X,AAAY,AAACzW,AAAQ,AAAA,AAAcD;AAAzC,AACE,AAAA,AAACoP,AAAgBxQ;;AACjB,AAAI8X;AACF,AAACxU,AACC,AAAKyL,AAAKmC;AAAV,AACE,AAACsF,AAAqBxW,AAAI+O,AAAKmC;AACjCjE,AACAb;;AACF,AAACoL,AAAiBxX,AAAIiN;;;AAE5B;;;;;;AAAA,AAAA8K,AAAME,AAKHjY,AAAIiN,AAA6G9D;AALpH,AAAA,AAAA6O,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnX,AAAA,AAAAmX,AAAA,AAAA,AAAA,AAAA,AAAAlX,AAAAC,AAAAiX,AAAAA;AAAAA,AAKwG9C;AALxG,AAAAlU,AAAAgX,AAAA,AAKwBE;AALxB,AAAAlX,AAAAgX,AAAA,AAKgCjK;AALhC,AAAA/M,AAAAgX,AAAA,AAKyCG;AALzC,AAAAnX,AAAAgX,AAAA,AAK2DI;AAL3D,AAAApX,AAAAgX,AAAA,AAKiF9J;AALjF,AAAA,AAAA,AAAA,AAAA,AAAA,AAMkEwG,AAASzU;;AACzE,AAAA,AAACoQ,AAA2BrQ;;AAC5B,AAAMuD,AAAQ,AAACvC,AAAIkX,AAAQ/O;AACrB+M,AAAQ,AAAA,AAAClV,AAAI+M;AADnB,AAEE,AAAMmI;AAAN,AACE,AAAMxI,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAAUxN,AAAIiN,AAA0Bc,AACAG,AACA,AAAClN,AAAImX,AAAkBhP,AACvB,AAACnI,AAAIoX,AAAsBjP,AAC3B5F;AAJnD,AAKE,AAAA,AACE,AAAC2S,AAAAA,AAAAA,AAAQxI,AAAAA;AADX,AAAA2K,AAE2C9P;AAF3C,AAGI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAWnB,AAAoD,AAAA,AAAe2F;AAA9E,AAAA,AAAA;;AATR;;AAUF,AAAA,AAAChK,AAAOgR,AAAuB5J,AAAKnC;;AAEtC;;;AAAA,AAAAmP,AAAME,AAEHxY,AAAIiN;AAFP,AAAA,AAAAsL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1X,AAAA,AAAA0X,AAAA,AAAA,AAAA,AAAA,AAAAzX,AAAAC,AAAAwX,AAAAA;AAAAA,AAEkDrD;AAFlDgD,AAAA,AAAAlX,AAAAuX,AAAA;AAAAlH,AAAA,AAAArQ,AAAAuX,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGkEtY;;AAChE,AAACqD,AACC,AAAKmV,AAAYtP;AAAjB,AACE,AAAI,AAACkI,AAAAA,AAAAA,AAAUlI,AAAAA;AACbsP;;AACA,AAACR,AAAiBjY,AAAIiN,AAAQwL,AAAYtP;;AAC9C+L,AACA,AAAC9U,AAAK8X;;AAEV;;;;AAAA,AAAAQ,AAAME,AAGH5Y;AAHH,AAAA,AAAA2Y,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9X,AAAA,AAAA8X,AAAA,AAAA,AAAA,AAAA,AAAA7X,AAAAC,AAAA4X,AAAAA;AAAAA,AAG+B1L;AAH/Bb,AAAA,AAAApL,AAAA2X,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAIqD1Y;;AACnD,AAAA,AAACiI,AAAM+E,AACM,AAAClK,AACC,AAAKmO;AAAL,AAAc,AAACsH,AAA4BxY,AAAIiN,AAAQiE;AACvD9E;;AAEjB;;;;AAAA,AAAAyM,AAAME,AAGH/Y;AAHH,AAAA,AAAA8Y,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjY,AAAA,AAAAiY,AAAA,AAAA,AAAA,AAAA,AAAAhY,AAAAC,AAAA+X,AAAAA;AAAAA,AAG+B7L;AAH/Bb,AAAA,AAAApL,AAAA8X,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAIqD7Y;;AACnD,AAAM+Y,AAAQ,AAAc7P,AAAO8P;AAArB,AAA+B,AAAA,AAAA,AAAA,AAACzL,AAAUxN,AAAIiN,AAAiB9D,AAAiB8P;;AAA9F,AACE,AAAC3V,AACC,AAAA4V,AAAKnK;AAAL,AAAA,AAAAoK,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtY,AAAA,AAAAsY,AAAA,AAAA,AAAA,AAAA,AAAArY,AAAAC,AAAAoY,AAAAA;AAAAA,AAAgEjI;AAAhE,AAAAlQ,AAAAmY,AAAA,AAAmB3M;AAAnB,AAAAxL,AAAAmY,AAAA,AAAuBF;AAAvB,AAAAjY,AAAAmY,AAAA,AAAgCpL;AAAhC,AAAA/M,AAAAmY,AAAA,AAAyCjL;AAAzC,AACE,AAAAkL,AAAA,AAAAzV,AAAuBsV;AAAvBI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA7W,AAAA8W,AAAA,AAAA,AAASrQ;AAAT,AAAAzG,AAAA8W,AAAA,AAAA,AAAgBE;AAAhB,AAAA,AACE,AAAMhM,AAAO,AAACsL,AAAQ7P,AAAOuQ;AACvBpI,AAAO,AAAA,AAACtQ,AAAI+M;AADlB,AAEE,AAAMuD;AAAN,AACE,AAAA,AACE,AAACA,AAAAA,AAAAA,AAAO5D,AAAAA;AADV,AAAAiM,AAE2CpR;AAF3C,AAGI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB,AAAmD,AAAA,AAAe2F;;AAA7E,AAAA,AAAA;;AAJN;;AAHJ;AAAA,AAAAkL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxS,AAAA,AAAApD,AAAAyV;AAAA,AAAA,AAAArS;AAAA,AAAA,AAAAqS,AAAArS;AAAA,AAAA,AAAA,AAAAC,AAAAoS;AAAA,AAAAnS,AAAA,AAAAC,AAAAkS;AAAA,AAAA,AAAA,AAAAjS,AAAAiS;AAAAnS;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAwS,AAAA,AAAAxW,AAAAmW;AAAA,AAAA1W,AAAA+W,AAAA,AAAA,AAAStQ;AAAT,AAAAzG,AAAA+W,AAAA,AAAA,AAAgBC;AAAhB,AAAA,AACE,AAAMhM,AAAO,AAACsL,AAAQ7P,AAAOuQ;AACvBpI,AAAO,AAAA,AAACtQ,AAAI+M;AADlB,AAEE,AAAMuD;AAAN,AACE,AAAA,AACE,AAACA,AAAAA,AAAAA,AAAO5D,AAAAA;AADV,AAAAkM,AAE2CrR;AAF3C,AAGI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB,AAAmD,AAAA,AAAe2F;;AAA7E,AAAA,AAAA;;AAJN;;AAHJ;AAAA,AAAA,AAAArK,AAAAuV;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAQA,AAAA,AAAA,AAAA,AAAC1C,AAAU3H,AAAiBvC,AAAKwC;AACnC/B,AACAb;;AAEN,AAAA,AAAAyN,AAAME,AACH/Z;AADH,AAAA,AAAA8Z,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjZ,AAAA,AAAAiZ,AAAA,AAAA,AAAA,AAAA,AAAAhZ,AAAAC,AAAA+Y,AAAAA;AAAAA,AAC8B7M;AAD9B7L,AAAA,AAAAJ,AAAA8Y,AAAA;AAAA,AAAA,AAAA,AAAA,AAEqD7Z,AAAG,AAAA+V,AAAA,AAAA,AAAA,AAAA;;AACtD,AAAM8B,AAAY,AAACzW,AAAQ,AAAA,AAAcD;AAAzC,AACE,AAAI,AAACgS,AAAgBpT,AAAIiN;AAAzB;;AAEMA,AACF,AAAA+M,AAIE,AAACnC,AAAa7X,AACd,AAAC+Y,AAAiB/Y,AAClB,AAAC4Y,AAAoB5Y;AANvBga,AAAA,AAAAA,AACElC,AAAY,AAAAkC,AAACpH,AAAa5S;AAD5B,AAAA,AAEE,AAAK8X;AAAa,AAAAkC,AAACrJ,AAAiB3Q;;AAFtCga;;;;;AAQR,AAAA,AAAMC,AAAqBja,AAAI8O;AAA/B,AAAA,AAAA,AAC2C,AAAAtO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA0Z;AAAA,AAAA,AAAArV,AAAAqV;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsBja,AAAGka;;AADpE;AAGE,AAAC7W,AACC,AAAK8W,AAAUnN;AAAf,AACE,AAAMS,AAAI,AAACF,AAAUxN,AAAIiN;AAAzB,AACE,AAAC3J,AACC,AAAKyC,AAAImL;AAAT,AACE,AAAAmJ,AAA0BnJ;AAA1BmJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxZ,AAAA,AAAAwZ,AAAA,AAAA,AAAA,AAAA,AAAAvZ,AAAAC,AAAAsZ,AAAAA;AAAA,AAAArZ,AAAAqZ,AAAA,AAAetM;AACTuM,AAAQ,AAAA,AAAUvM;AADxB,AAEE,AAAIuM;AACF,AAAClW,AAAK2B,AAAI,AAAC1F,AAAI,AAACia,AAAAA,AAAAA,AAAQ5M,AAAAA;;AACxB3H;;AACNqU,AACA,AAAA,AAAYnN;AAXpB,AAaE6B;;AAEJ;;;AAAA,AAAAyL,AAAME,AAE6B7J;AAFnC,AAAA,AAAA4J,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3Z,AAAA,AAAA2Z,AAAA,AAAA,AAAA,AAAA,AAAA1Z,AAAAC,AAAAyZ,AAAAA;AAAAA,AAE0BvN;AAF1B,AAAAjM,AAAAwZ,AAAA,AAEYpO;AAFZ,AAAA,AAAA,AAAA,AAAA,AAIGnM;;AACD,AAAMya,AAAkB,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/Z,AAAA,AAAA+Z,AAAA,AAAA,AAAA,AAAA,AAAA9Z,AAAAC,AAAA6Z,AAAAA;AAAA,AAAA5Z,AAAA4Z,AAAA,AAAc7M;AAAd,AAAA/M,AAAA4Z,AAAA,AAAuBvJ;AAAvB,AACE,AAAMT,AAAQ,AAACvQ,AAAIuQ;AAAnB,AACMA,AACF,AAACY,AAAiB,AAACnR,AAAI,AAACD,AAAK2N,AAC7B,AAAC8D,AAAeR;;AAJ9C,AAKE,AAAC/N,AACC,AAAKyC,AAAIoI;AAAT,AACE,AAACsF,AAAU1N,AAAI,AAAC2U,AAAkBvM;AAFtC,AAIE/B;;AAEN;;;AAAA,AAAMyO,AAEH/L,AAAM8B;AAFT,AAAA,AAAA,AAAA,AAAA,AAIG3Q;;AACD,AAACqD,AACC,AAAKwX,AAAG9X;AAAR,AACE,AAACyQ,AAAUqH,AAAG,AAACL,AAAuBzX,AAAE4N;AAF5C,AAIE9B;;AAEJ;;;AAAA,AAAAiM,AAAMlL;AAAN,AAAA,AAAAmL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAna,AAAA,AAAAma,AAAA,AAAA,AAAA,AAAA,AAAAla,AAAAC,AAAAia,AAAAA;AAAAA,AAE2Ehb;AAF3E,AAAAgB,AAAAga,AAAA,AAE8CC;AAF9C,AAAAja,AAAAga,AAAA,AAEyD1Q;AAFzD,AAAA,AAAA,AAG2CrK,AAAGgJ;;AAC5C,AAAMiS,AAAiB,AAAC5X,AACC,AAAY4X,AAAUlY;AAAtB,AACE,AAAAmY,AAAkB,AAACpB,AAAiB/Z,AAAIgD;AAAxC,AAAA,AAAAmY;AAAA,AAAAA,AAASC;AAAT,AACE,AAAChJ,AAAK8I,AAAUE;;AAChBF;;AAJN,AAME,AAAA,AAAA,AAAAhb,AAAiBoK;AACpC+Q,AAAiB,AAAKC,AAAEC;AAAP,AAAc,AAACnX,AAAK,AAAC/D,AAAIib,AAAGC;;AAC7C3K,AAAiB,AAACzQ,AAAkBH;AACpCwb,AAAiB,AAAA,AAAC/F,AAAiBzV;AACnCyb,AAAiB,AAACxB,AAAoBja,AAAIkb;AAC1CQ,AAAiB,AAACb,AAAeK,AAAUtK;AAXjD,AAYE,AAAA,AAACvF,AAAM4P,AAAWzP,AAAyDkQ;;AAC3E,AAAA,AAACrQ,AAAMf,AAAakB,AAAqB0P;;AACzC,AAAM,AAACvX,AAAI8X;AAAX,AACE,AAAA,AAACpQ,AAAMf,AAAauE,AAAsDwM,AAAWI;;AADvF;;AAEA,AAACD,AAAAA,AAAAA,AAAiBxb,AAAAA;;AAhBpB;;AAmBF;;;;;;;;;;;;;;;;;;;;AAAA,AAAA2b,AAAME,AAmBH7b,AAAI4F;AAnBP,AAAA,AAAAgW,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/a,AAAA,AAAA+a,AAAA,AAAA,AAAA,AAAA,AAAA9a,AAAAC,AAAA6a,AAAAA;AAAAA,AAmBiCxa;AAnBjC,AAAAJ,AAAA4a,AAAA,AAmBkBvO;AAnBlB,AAoBE,AAAM0O,AAAoB,AAAA,AAAW,AAAC9V,AAAeL;AAC/CoW,AAAoB,AAACC,AAAOF,AAAe,AAACjX,AAAI,AAAK2H;AAAL,AAAe,AAAA,AAAA,AAACiD,AAAejD;AAAYsP;AADjGD,AAGyB,AAAA,AAAAM,AAAC3a;AAAD,AAAW,AAAA,AAAA,AAAA,AAACO,AAA4B,AAAA,AAAI,AAAAoa,AAAAA,AAACJ,AAAAA,AAAAA,AAAuB5b,AAAKC;AAAM0b;AAHxGD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjb,AAAA,AAAAib,AAAA,AAAA,AAAA,AAAA,AAAAhb,AAAAC,AAAA+a,AAAAA;AAAA,AAAA9a,AAAA8a,AAAA,AAEOI;AAFP,AAAAlb,AAAA8a,AAAA,AAGOK;AACDE,AAAoB,AAAA,AAAM,AAAC1Y,AAAIuY,AACT,AAAMnN,AAAK,AAAC7C,AAAQ,AAAA,AAAA,AAAA,AAAA,AAACoQ,AAAsCJ,AAAa9a;AAAxE,AACE,AAACqM,AAAkBsB,AAAK,AAACvB,AAAUxN,AAAI+O,AAAMW;AAFjD;AAGpB6M,AAAoB,AAAA,AAAM,AAAC5Y,AAAIwY,AACT,AAAMpN,AAAK,AAAC7C,AAAQ,AAAA,AAAA,AAAA,AAAA,AAACoQ,AAAsCH,AAAQ/a;AAAnE,AACE,AAACqM,AAAkBsB,AAAK,AAACvB,AAAUxN,AAAI+O,AAAMW;AAFjD;AAGpB8M,AAAoB,AAAA,AAAC9R;AAV3B,AAWE,AAAM2R;AAAN,AAAyB,AAACzJ,AAAa5S,AAAIqc;;AAA3C;;AACA,AAAME;AAAN,AACE,AAAMxN,AAAa,AAAC6D,AAAa5S,AAAIuc;AAC/BjS,AAAa,AAAA,AAAkDtK;AADrE,AAEE,AAACyc,AAAOD,AAAkB,AAAA,AAAMzN;;AAChC,AAAA,AAAC1D,AAAMf,AAAauE,AAAsBvD,AAAKyD;;AAC/C,AAAA,AAACsB,AAA2BrQ;;AALhC;;AAMA,AAAI,AAAAmI,AAAKkF;AAAL,AAAA,AAAAlF;AAAA,AAAAA,AAAe,AAACuU,AAAAA,AAAAA,AAAgBrP,AAAAA;AAAhC,AAAA,AAAAlF;AAA2C,AAACwU,AAAgBtP;;AAA5DlF;;;AAAAA;;;AACF,AAACyU,AAAwBvP;;AACzB,AAAejF;AAAf,AACE,AAAAoB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AADF;;;AApBJ,AAAAxJ,AAsBGsc;;AAEL,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA1Q,AAAMgR;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA7Q,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM6Q,AA6BF9c,AAAI4F;AA7BR,AAAA,AAAA,AAAA,AAAA,AA8BiD3F;;AAC9C,AAAA,AAACkd,AAAYnd,AAAI4F;;;AA/BpB,AAAA,AAAA,AAAAmX,AAAAC,AAAMF,AAgCgElX;AAhCtE,AAAA,AAAAqX,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApc,AAAA,AAAAoc,AAAA,AAAA,AAAA,AAAA,AAAAnc,AAAAC,AAAAkc,AAAAA;AAAAA,AAgCiEjd;AAhCjE,AAAAgB,AAAAic,AAAA,AAgC+C3S;AAhC/C4S,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArc,AAAA,AAAAqc,AAAA,AAAA,AAAA,AAAA,AAAApc,AAAAC,AAAAmc,AAAAA;AAAAA,AAgCmG9b;AAhCnG,AAAAJ,AAAAkc,AAAA,AAgCiFE;AAhCjF,AAAA,AAAA,AAAA,AAAA,AAAA,AAiC2Dnd;;AACxD,AAAImd;AACF,AAACvB,AAAe7b,AAAI4F,AAAGxE;;AACvB,AACE,AAAC8O,AAAqBlQ;;AACtB,AAAAqd,AAAqD,AAAA,AAAA,AAAA,AAAC9P,AAA0BnM;AAAhFic,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxc,AAAA,AAAAwc,AAAA,AAAA,AAAA,AAAA,AAAAvc,AAAAC,AAAAsc,AAAAA;AAAAA,AAA4Cjc;AAA5C,AAAAJ,AAAAqc,AAAA,AAAc/C;AAAd,AAAAtZ,AAAAqc,AAAA,AAAsBC;AAAtB,AAAAtc,AAAAqc,AAAA,AAAmCjQ;AAC7BmQ,AAAgB,AAAA,AAACnZ,AAAS,AAAA,AAAAoZ,AAAClR;AAAD,AAAS,AAAI,AAAAkR,AAAAC,AAAa,AAAAD,AAACE;AAAe9X;AACpEmJ,AAAgB,AAAC7C,AAAQtG,AAAGxE;AAC5Bia,AAAgB,AAAKC,AAAEC;AAAP,AAAc,AAACnX,AAAK,AAAC/D,AAAIib,AAAGC;;AAC5CjB,AAAgB,AAAAqD,AAAQ,AAACtd,AAAIia;AAAbqD,AAAA,AAAAA,AACE,AAACha,AAAI4Z,AAAiB,AAAAI,AAACvZ,AAAKmZ;AAD9B,AAAA,AAEEnQ;AAAI,AAAAuQ,AAACvL,AAAKhF;;AAFZuQ;;;AAJtB,AAOE,AAACtS,AAAMf,AAAa,AAAKsT;AAAL,AAAQ,AAAAC,AAAQ,AAAA,AAAC3Z,AAAO0Z,AAAqB,AAAKE,AAAE9a;AAAP,AAAU,AAACoP,AAAK,AAAC1Q,AAAIoc,AAAG9a;AAAI+L;AAAjE8O,AAAA,AAAAA,AAEE,AAACla,AAAI2W,AAAS,AAAAuD,AAAA,AAAC3Z,AAAsDmX,AAAWf;AAFlF,AAAA,AAGE,AAAC3W,AAAI2Z;AAAc,AAAAO,AAAA,AAAC3Z,AAAwDmX,AAAWiC;;AAHzFO;;;;AAI5B,AAAA,AAAM9O;;;;AAjDf,AAAA,AAAA,AAAM+N;;AAAN,AAmDA;;;;;;;;AAAA,AAAAiB,AAAOE,AAOwBzb,AAAW2b;AAP1C,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnd,AAAA,AAAAmd,AAAA,AAAA,AAAA,AAAA,AAAAld,AAAAC,AAAAid,AAAAA;AAAAA,AAOuB7U;AAPvB,AAAAnI,AAAAgd,AAAA,AAOWE;AAPX,AAQE,AAAIA;AACF,AAAC5a,AACC,AAAA8a,AAAK7a;AAAL,AAAA,AAAA8a,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxd,AAAA,AAAAwd,AAAA,AAAA,AAAA,AAAA,AAAAvd,AAAAC,AAAAsd,AAAAA;AAAAA,AAAyDrV;AAAzD,AAAAhI,AAAAqd,AAAA,AAAqBC;AAArB,AAAAtd,AAAAqd,AAAA,AAA6Bjd;AAA7B,AAAAJ,AAAAqd,AAAA,AAAqCtW;AAArC,AACE,AAAMwW,AAAI,AAAAjd,AAAI,AAAA,AAAIF;AAAR,AAAA,AAAAE;AAAAA;;AAA4B,AAAA,AAAIF;;;AAA1C,AACE,AACE,AAACkB,AAAKic,AAAIJ;AAAU,AACE,AAAC/L,AAAK7O,AAAOyF;;AAFrC,AAGEsV;AAAQ,AACE,AAACJ,AAAAA,AAAAA,AAAO/U,AAAAA,AAAOgV,AAAAA;;AACf5a;;AALZ,AAMa,AACE,AAAAib,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzW,AAAAA,AAAAA;;AACDxE;;;;AAXrB,AAaEf;;AACF,AACE,AAAAgH,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AACAlH;;;AAEN;;;AAAA,AAAMic,AAEHze,AAAIme;AAFP,AAGE,AAAAO,AAAgE,AAACE,AAAc5e;AAA/E0e,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7d,AAAA,AAAA6d,AAAA,AAAA,AAAA,AAAA,AAAA5d,AAAAC,AAAA2d,AAAAA;AAAA,AAAA1d,AAAA0d,AAAA,AAAiDpU;AAAjD,AAAApK,AACM2e,AAAiBvU;AADvBqU,AAG+DE;AAH/DF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9d,AAAA,AAAA8d,AAAA,AAAA,AAAA,AAAA,AAAA7d,AAAAC,AAAA4d,AAAAA;AAAA,AAAA3d,AAAA2d,AAAA,AAEiD/N;AAFjD,AAAA5P,AAAA2d,AAAA,AAGiDpU;AAC3CC,AAAgB,AAACpK,AAAKmK;AACtBI,AAAgB,AAACrH,AACC,AAAKC,AAAOyB;AAAZ,AACE,AAACkD,AAAM3E,AAAOyB,AAAY,AAACiZ,AACC,AAACjd,AAAI4P,AAAQ5L,AACb,AAAChE,AAAIuJ,AAAYvF,AAAamZ;AAJ9D,AAME3T;AAXxB,AAYE,AAAA,AAACa,AAAMf,AAAakB,AAAoBb;;AAE5C;;;;;;;AAAA,AAAMmU,AAMHC,AAAQ5V;AANX,AAOE,AAAMnJ,AAAe,AAAC4e,AAAcG;AAApCC,AAC2E,AAACJ,AAAc5e;AAD1Fgf,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAne,AAAA,AAAAme,AAAA,AAAA,AAAA,AAAA,AAAAle,AAAAC,AAAAie,AAAAA;AAAA,AAAAhe,AAAAge,AAAA,AACiD/D;AADjD,AAAAja,AAAAge,AAAA,AAC4D1U;AAD5D2U,AAGkC,AAAA,AAAA/e,AAAA,AAAA,AAACc,AAAKsJ,AAA0DnB;AAHlG8V,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApe,AAAA,AAAAoe,AAAA,AAAA,AAAA,AAAA,AAAAne,AAAAC,AAAAke,AAAAA;AAAAA,AAGsBE;AAHtB,AAAAne,AAAAie,AAAA,AAEOC;AAEDE,AAAe,AAAA,AAAAlf,AAAA,AAAA,AAAC+V,AAAQ3L,AAA4BnB;AAJ1D,AAKE,AAAA,AAAA,AAAA,AAACkC,AAAMf,AAAa8J,AAAwBjL;;AAC5C,AAAA,AAACkC,AAAM4P,AAAWpM,AAA0D,AAAA,AAACuH,AAAKiJ,AAAUlW;;AAC5F,AAAAmW,AAAA,AAAA3b,AAAgEyb;AAAhEG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7e,AAAA,AAAA6e,AAAA,AAAA,AAAA,AAAA,AAAA5e,AAAAC,AAAA2e,AAAAA;AAAAA,AAAqD1W;AAArD,AAAAhI,AAAA0e,AAAA,AAAiBpB;AAAjB,AAAAtd,AAAA0e,AAAA,AAAyBte;AAAzB,AAAAJ,AAAA0e,AAAA,AAAiC3X;AAAjC,AAAA,AAAA4X,AAAA,AAAAhc,AACY,AAAArC,AAAI,AAAA,AAAIF;AAAR,AAAA,AAAAE;AAAAA;;AAA4B,AAAA,AAAIF;;;AAD5Cwe,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AACQvB;AADR,AAAA,AAEE,AAAA,AACE,AAAMD;AAAN,AACE,AAAIY;AACF,AAACA,AAAAA,AAAAA,AAAeC,AAAAA,AAAWZ,AAAAA;;AAC3B,AAAA/U,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;;AAHJ;;AAIA,AAAA8W,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzY,AAAAA,AAAAA;AALH,AAAAqY,AAS2C7X;AAT3C,AAUI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB;;AAAX,AAAA,AAAA;;AAZN;AAAA,AAAAoX;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA/Y,AAAA,AAAApD,AAAAgc;AAAA,AAAA,AAAA5Y;AAAA,AAAA,AAAA4Y,AAAA5Y;AAAA,AAAA,AAAA,AAAAC,AAAA2Y;AAAA,AAAA1Y,AAAA,AAAAC,AAAAyY;AAAA,AAAA,AAAA,AAAAxY,AAAAwY;AAAA1Y;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAhE,AAAA0c,AACQpB;AADR,AAAA,AAEE,AAAA,AACE,AAAMD;AAAN,AACE,AAAIY;AACF,AAACA,AAAAA,AAAAA,AAAeC,AAAAA,AAAWZ,AAAAA;;AAC3B,AAAA/U,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;;AAHJ;;AAIA,AAAA+W,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1Y,AAAAA,AAAAA;AALH,AAAAsY,AAS2C9X;AAT3C,AAUI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB;;AAAX,AAAA,AAAA;;AAZN;AAAA,AAAA,AAAA1E,AAAA8b;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAAL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1Y,AAAA,AAAApD,AAAA2b;AAAA,AAAA,AAAAvY;AAAA,AAAA,AAAAuY,AAAAvY;AAAA,AAAA,AAAA,AAAAC,AAAAsY;AAAA,AAAArY,AAAA,AAAAC,AAAAoY;AAAA,AAAA,AAAA,AAAAnY,AAAAmY;AAAArY;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA8Y,AAAA,AAAA9c,AAAAqc;AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlf,AAAA,AAAAkf,AAAA,AAAA,AAAA,AAAA,AAAAjf,AAAAC,AAAAgf,AAAAA;AAAAA,AAAqD/W;AAArD,AAAAhI,AAAA+e,AAAA,AAAiBzB;AAAjB,AAAAtd,AAAA+e,AAAA,AAAyB3e;AAAzB,AAAAJ,AAAA+e,AAAA,AAAiChY;AAAjC,AAAA,AAAAiY,AAAA,AAAArc,AACY,AAAArC,AAAI,AAAA,AAAIF;AAAR,AAAA,AAAAE;AAAAA;;AAA4B,AAAA,AAAIF;;;AAD5C6e,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AACQ5B;AADR,AAAA,AAEE,AAAA,AACE,AAAMD;AAAN,AACE,AAAIY;AACF,AAACA,AAAAA,AAAAA,AAAeC,AAAAA,AAAWZ,AAAAA;;AAC3B,AAAA/U,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;;AAHJ;;AAIA,AAAAgX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3Y,AAAAA,AAAAA;AALH,AAAAuY,AAS2C/X;AAT3C,AAUI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB;;AAAX,AAAA,AAAA;;AAZN;AAAA,AAAAyX;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApZ,AAAA,AAAApD,AAAAqc;AAAA,AAAA,AAAAjZ;AAAA,AAAA,AAAAiZ,AAAAjZ;AAAA,AAAA,AAAA,AAAAC,AAAAgZ;AAAA,AAAA/Y,AAAA,AAAAC,AAAA8Y;AAAA,AAAA,AAAA,AAAA7Y,AAAA6Y;AAAA/Y;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAhE,AAAA+c,AACQzB;AADR,AAAA,AAEE,AAAA,AACE,AAAMD;AAAN,AACE,AAAIY;AACF,AAACA,AAAAA,AAAAA,AAAeC,AAAAA,AAAWZ,AAAAA;;AAC3B,AAAA/U,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;;AAHJ;;AAIA,AAAAiX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5Y,AAAAA,AAAAA;AALH,AAAAwY,AAS2ChY;AAT3C,AAUI,AAAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWnB;;AAAX,AAAA,AAAA;;AAZN;AAAA,AAAA,AAAA1E,AAAAmc;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAA,AAAAnc,AAAAyb;AAAA;AAAA;AAAA;;;;;;;;AAAA","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","com.fulcrologic.guardrails.core/=>","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","cljs.spec.alpha.every_impl","G__59905","cljs.core/vector?","cljs.spec.alpha/cat-impl","map__59906","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parallel?","p__59907","map__59908","options","cljs.core/boolean","or__4126__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core/fn?","cljs.core/boolean?","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__59913#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__59917#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__59918","cljs.core.nth","map__59921","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__59922","seq__59923","cljs.core/seq","first__59924","cljs.core/next","map__59926","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__59932","map__59933","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","G__59936","cljs.core/coll?","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","cljs.spec.alpha/map-spec-impl","G__59940","cljs.core/map?","cljs.core/contains?","vec__59946","vec__59949","active-nodes","id-to-send","to-send","to-defer","p1__59937#","tx","p__59952","map__59953","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__59955","map__59956","body","combined-result","seq__59961","chunk__59962","count__59963","i__59964","map__59969","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__59971","update-handler","p__59975","map__59976","seq__59980","chunk__59981","count__59982","i__59983","map__59994","map__59999","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc","and__4115__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__59997","e","e59996","map__60003","e60002","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","cljs.core/any?","b2__46471__auto__","remote","transmit!","e60005","e60014","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e60006","e60010","G__60012","fexpr__60011","G__60016","fexpr__60015","G__60018","fexpr__60017","p__60019","map__60020","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__60022","p","serial","front","seq__60025","chunk__60026","count__60027","i__60028","item","cljs.core.swap_BANG_","cljs.core/conj","map__60035","cljs.core/assoc","seq__60037","chunk__60038","count__60039","i__60040","op","var_args","G__60044","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__60048","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__60049","map__60050","p__60055","map__60056","tx-node","addl","map__60052","ref","component","G__60054","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e60061","G__60062","dispatch","p__60063","map__60064","original-ast-node","ele","map__60066","G__60068","dispatch-all","eles","p__60070","map__60071","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__60069#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__60078","map__60079","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__60081","blocked","ready","dispatched-nodes","p1__60076#","com.fulcrologic.fulcro.mutations/mutate","a","p1__60077#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__60093","tm","cljs.core/int?","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__60095","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__60100","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__60101","map__60102","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__60104","map__60105","done?","new-elements","element","map__60107","map__60108","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-id-before","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","state","state-before","updated-element","new-acc","cljs.core.conj","e60111","mutation-symbol","e60112","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__60113","map__60114","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__60116","map__60117","updated-node","e60120","e60121","p__60122","map__60123","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__60125","map__60126","active-keys","clojure.set.union","desired-set","p__60128","map__60129","txn-id","ele-idx","map__60131","old-queue","cljs.core/filterv","p__60133","map__60134","cljs.core/assoc-in","G__60137","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__60138","map__60139","result-key","cljs.core/keyword?","txn-idx","p__60141","map__60142","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__60144","state-before-action","remote-fn","remote-desire","desired-ast","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__60146","p__60147","p__60148","map__60149","map__60150","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.spec.alpha/nilable-impl","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","p__60153","map__60154","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__60156","map__60157","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__60159","map__60160","in-progress","p__60162","map__60163","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__60165","map__60166","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__60168","map__60169","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__60171","map__60172","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e60174","p__60175","map__60176","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__60178","map__60179","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__60181","map__60182","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__60184","map__60185","seq__60187","chunk__60188","count__60189","i__60190","vec__60206","vec__60212","value","e60210","e60215","p__60218","map__60219","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__60221","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","G__60222","cljs.core/set?","outer-acc","map__60223","refresh","p__60225","map__60226","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__60228","map__60229","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__60231","map__60232","state-atom","new-queue","temp__5733__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__60235","map__60236","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__60238","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__60234#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/refresh-component!","G__60242","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__60243","p__60244","map__60245","map__60246","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__60249","only-refresh","follow-on-reads","p1__60240#","cljs.core/Keyword","edn-query-language.core/ident?","G__60251","s","G__60252","v","p__60253","map__60254","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__60256","map__60257","active?","aid","G__60259","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__60260","map__60261","com.fulcrologic.fulcro.components/any->app","runtime-state","com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","app-ish","map__60264","map__60265","abort-network!","the-remote","old-send-queue","cljs.core/disj","seq__60268","chunk__60273","count__60274","i__60275","map__60328","seq__60276","chunk__60277","count__60278","i__60279","map__60358","seq__60269","chunk__60270","count__60271","i__60272","e60346","e60348","e60368","e60374","G__60347","G__60357","G__60371","G__60381"]],"~:used-vars",["^N",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$cljs.core/boolean?","~$cljs.core/keyword?","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$cljs.spec.alpha/every-impl","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/int?","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.spec.alpha/nilable-impl","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.spec.alpha/map-spec-impl","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$cljs.spec.alpha/cat-impl","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/set?","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/disj","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$cljs.core/coll?","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/any?","~$cljs.core/boolean","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1Q","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^15","^14","^1?","^Y","^[","^11"]]],["^1Q","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.dom.HtmlElement"]]],["^1Q","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cljs.core.async.impl.protocols"]]],["^1Q","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.labs.userAgent.util","~$goog.string"]]],["^1Q","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.array","~$goog.asserts"]]],["^1Q","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^4N"]]],["^1Q","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Promise","~$goog.events.EventTarget"]]],["^1Q","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^["]]],["^1Q","cljs/spec/gen/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$goog.Uri"]]],["^1Q","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$clojure.string","^4M"]]],["^1Q","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O"]]],["^1Q","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4M"]]],["^1Q","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1Q","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4L","~$goog.object","~$goog.string.internal"]]],["^1Q","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^50"]]],["^1Q","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^[","^4X","^Y","^4[","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1Q","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$expound.paths","^@"]]],["^1Q","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4L","~$goog.reflect","^4M"]]],["^1Q","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1Q","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1Q","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1Q","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^X","~$cljs.reader","~$cljs.tools.reader.edn","^4[","^4M","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1Q","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.async.FreeList"]]],["^1Q","com/fulcrologic/fulcro/dom/events.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4Y","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1Q","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4Z"]]],["^1Q","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4M","^5H"]]],["^1Q","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.structs.Heap"]]],["^1Q","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Timer","^4N","^4O","^5Q","^4V","~$goog.json.hybrid","~$goog.log","^5N","^5M","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^4[","^4M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^4Z"]]],["^1Q","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/fulcro/algorithms/transit.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cognitect.transit","^L","^@","^18"]]],["^1Q","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4["]]],["^1Q","cljs/pprint.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^4M","^5H"]]],["^1Q","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@","^X","^L","^[","^Y"]]],["^1Q","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5V","^5W","^5X","^5U","^4N","^4M","^5H"]]],["^1Q","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$expound.problems","^@","^4X","^X","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1Q","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1Q","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Disposable","^4O","^5I","~$goog.events.Event","^5S","^5T","^4["]]],["^1Q","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^[","^@","~$expound.alpha"]]],["^1Q","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.disposable.IDisposable"]]],["^1Q","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X"]]],["^1Q","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1Q","shadow/js.js"],["8d0c12ef4685cbbcf28e21ed74f34deddf731743","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^64","~$goog.structs.Collection","^65"]]],"~:SHADOW-TIMESTAMP",[1609098713000,1609098713000,1609098712000],["^6C","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6D","~$module$node_modules$object_assign$index"]]],["^1Q","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^5="]]],["^1Q","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.events.ListenableKey"]]],["^1Q","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.html.trustedtypes","^53","^54","^55","^56"]]],["^1Q","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","^4S","^4Q"]]],["^1Q","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","~$goog.events.Listener","^4["]]],["^1Q","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$taoensso.truss.impl"]]],["^1Q","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/fulcro/algorithms/merge.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.fulcrologic.fulcro.algorithms.data-targeting","^11","^V","~$com.fulcrologic.fulcro.algorithms.normalize","^13","^1?","^Y","^[","^18"]]],["^1Q","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@"]]],["^1Q","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4Q","^5A"]]],["^1Q","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.html.SafeUrl","^55","^56","^50"]]],["^1Q","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^6P","^52","~$goog.html.uncheckedconversions","^55","^50"]]],["^1Q","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@","^6;"]]],["^1Q","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X"]]],["^1Q","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5:","^5<","^4Z"]]],["^1Q","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1Q","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5J","~$goog.structs.PriorityPool"]]],["^1Q","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.dom.TagName","~$goog.dom.tags","^6T","^6U","~$goog.html.SafeStyleSheet","^6P","^52","^6K","^53","^54","^5:","^4[","^55","^56","^50"]]],["^1Q","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4["]]],["^1Q","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N"]]],["^1Q","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4L","^4M"]]],["^1Q","com/fulcrologic/fulcro/inspect/transit.cljs"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^67","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^["]]],["^1Q","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5D","^71"]]],["^1Q","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^1="]]],["^1Q","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","^5Y","^5F","^5H"]]],["^1Q","com/fulcrologic/fulcro/mutations.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^11","~$com.fulcrologic.fulcro.dom.events","^L","^Y","^[","^1=","^@","^1?","^6N","~$com.fulcrologic.fulcro.algorithms.merge","^V","^18","^4X"]]],["^1Q","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6Z","~$goog.dom.safe","^6S","^6V","~$goog.math.Coordinate","~$goog.math.Size","^4[","^4M","~$goog.string.Unicode","^4Z"]]],["^1Q","com/fulcrologic/fulcro/components.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","~$cljsjs.react","^Y","^@","^[","^1=","^69","^4X","^1?","^13","^V","^L","^X"]]],["^1Q","com/fulcrologic/fulcro/specs.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@","^L","^1?","^Y"]]],["^1Q","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.debug.Error","^78"]]],["^1Q","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K"]]],["^1Q","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.debug.LogRecord"]]],["^1Q","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^4M","^64","^65","^66","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Q","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^6C","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6D"]]],["^1Q","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Thenable","^4O","^5P","~$goog.async.run","^5B","^7>","~$goog.promise.Resolver"]]],["^1Q","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","^4P","^4S"]]],["^1Q","cljs/spec/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","^69","^D","^4X"]]],["^1Q","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",[]]],["^1Q","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.json"]]],["^1Q","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4["]]],["^1Q","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5V","^4X","~$cljs.tools.reader.impl.inspect"]]],["^1Q","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^L","^F","^["]]],["^1Q","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$module$node_modules$react$index"]]],["^1Q","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4M","^5H"]]],["^1Q","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^[","^69"]]],["^1Q","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^6?","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1Q","com/fulcrologic/fulcro/inspect/diff.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@"]]],["^6C","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","6093d43b27c84de58b9ce55e3a930469339c9e54","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6D","^6I"]]],["^1Q","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^73","^71","~$goog.math.Long"]]],["^1Q","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4[","~$goog.structs.Node"]]],["^1Q","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79","^6V","^55","^50"]]],["^1Q","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^73","~$com.cognitect.transit.eq","^7J"]]],["^1Q","clojure/data.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X"]]],["^1Q","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^50"]]],["^1Q","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^@","^B","^X","^6;","^6<","^59","^69","^5G","^4M"]]],["^1Q","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X","^@","^V","^18","^13","^1?","^1:","^19","^11","^16","^I","^L","^Y","^1=","^["]]],["^1Q","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^73"]]],["^1Q","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","~$goog.debug.errorcontext","^4Z"]]],["^1Q","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.math"]]],["^1Q","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5W","^4M","^5H"]]],["^1Q","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^6R","^7N"]]],["^1Q","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5Q","~$goog.dom","^6Z","^79","^6R","^6S","^52","^5:","^5;","^55"]]],["^1Q","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^6S","^6T","^6U","^70","^6P","^52","^55","^50"]]],["^1Q","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.debug","~$goog.debug.LogBuffer","^7?"]]],["^1Q","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^74"]]],["^1Q","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^6?","~$goog.events.EventId"]]],["^1Q","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5U","^5V","^5W"]]],["^1Q","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7J","~$goog.math.Integer","^4M","^4[","^4N","^4W","^5H"]]],["^1Q","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^73","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^71","^7L","^5C","^5D"]]],["^1Q","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^6K","^55","^56"]]],["^1Q","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7P","~$goog.debug.LogManager","^7?","~$goog.debug.Logger"]]],["^1Q","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^6U","^4[","^55","^56","^50"]]],["^1Q","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7P","^4Y","^6@","~$goog.events.EventType","^5=","^4Z"]]],["^1Q","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5="]]],["^1Q","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4Z"]]],["^1Q","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^4M"]]],["^1Q","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^56"]]],["^1Q","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^1=","~$taoensso.timbre.appenders.core"]]],["^1Q","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7R"]]],["^1Q","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^73","^5D","~$com.cognitect.transit.handlers","^71","^74","^7J"]]],["^1Q","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^6="]]],["^1Q","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^[","^X","^Y"]]],["^1Q","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.net.WrapperXmlHttpFactory","^6>"]]],["^1Q","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^Y","^V","^4[","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^F","~$clojure.data","^1=","^["]]],["^1Q","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.cognitect.transit","^71","^7L","^7J"]]],["^1Q","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^57","^4M","^4Z","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/alpha.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1604678811000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1609098714000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/dom/events.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1609098714000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/mutations.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/data.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/gen/alpha.clj",1604678801000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/edn.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1609098711000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/pprint.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/gen/alpha.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/components.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj",1604678801000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1604679236000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^I","^K","^L"],"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^V","^W","^X","^Y","^Y","^?","^@","^L","^L","^Z","^[","^10","^11","^12","^Y","^13","^13","^14","^14","^I","^I","^15","^15","^16","^16","^17","^I","^X","^X","^18","^18","~$m","^19","^1:","^1:","^1;","^1:","^1<","^1=","^19","^19","~$s","^@","^V","^V","^11","^11","^[","^[","^1>","^1?","^1=","^1=","^@","^@","^1@","^13","^1A","^18","^1?","^1?"],"^1B",["^N",["^1C"]],"~:shadow/js-access-global",["^N",["Error"]],"^1D",["^ ","^1E","^1:","^H","^I","^J","^I","^K","^L","^1F","^L","~$|","^L"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",7,"^:",142,"^;",16,"~:arglists",["^1I",["~$quote",["^1I",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^O","^25","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"~:method-params",["^1I",[["^9Y","^9Z","^9["]]],"~:protocol-impl",null,"~:arglists-meta",["^1I",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^N",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^9Z","^9["]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",577,"^9",7,"^:",577,"^;",34,"^9W",["^1I",["^9X",["^1I",[["^9Y","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1K","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^O","^2@","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^:0",["^1I",[["^9Y","^:9","~$p__60175"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",577,"^:4",["^N",[null,"^:5"]],"^:",577,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:9",["^ ","^::",["^:;","^:<"],"^1K","^:="]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",599,"^9",7,"^:",599,"^;",23,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1K","^:9"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^O","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^9Y","~$p__60181"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",599,"^:4",["^N",[null,"^:5"]],"^:",599,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",652,"^9",7,"^:",652,"^;",29,"^9W",["^1I",["^9X",["^1I",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1K","^:9"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^O","^2;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^:0",["^1I",[["~$p__60225","^:E"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",652,"^:4",["^N",[null,"^:5"]],"^:",652,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:C",["^:D"],"^1K","^:9"],"^:E"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",7,"^:",32,"^;",24,"^9W",["^1I",["^9X",["^1I",[["^9Y"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^O","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:0",["^1I",[["^9Y"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",32,"^:4",["^N",["~$clj","^:5","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",525,"^9",7,"^:",525,"^;",23,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^O","^2<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^9Y","~$p__60165"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",525,"^:4",["^N",[null,"^:5"]],"^:",525,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$abort-remote!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",841,"^9",7,"^:",841,"^;",20,"^9W",["^1I",["^9X",["^1I",[["~$app-ish","~$remote"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"^O","^2J","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:0",["^1I",[["^:O","^:P"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",841,"^:4","^:K","^:",841,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^:O","^:P"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"~$active-remotes",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",668,"^9",7,"^:",668,"^;",21,"^9W",["^1I",["^9X",["^1I",[["~$queue","^:E"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^O","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:0",["^1I",[["^:R","^:E"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",668,"^:4",["^N",[null,"^:5"]],"^:",668,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^:R","^:E"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",540,"^9",7,"^:",540,"^;",19,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^:@"],"^1K","^:9"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^O","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:0",["^1I",[["^9Y","~$p__60168"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",540,"^:4",["^N",[null,"^:5"]],"^:",540,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:T","^:@"],"^1K","^:9"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",679,"^9",7,"^:",679,"^;",21,"^9W",["^1I",["^9X",["^1I",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1K","^9Y"]]]]]],"^6","Run through the active queue and do a processing step."],"^O","^41","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:0",["^1I",[["~$p__60231"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",679,"^:4","^:K","^:",679,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:X","^:Y"],"^1K","^9Y"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",7,"^:",238,"^;",24,"^9W",["^1I",["^9X",["^1I",[["^:9","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^O","^26","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:0",["^1I",[["^:9","^;0","^;1"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",238,"^:4",["^N",["^:H","^:5"]],"^:",238,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^:9","^;0","^;1"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",797,"^9",8,"^:",797,"^;",23,"~:private",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["~$abort!"],"^1K","^:P"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^;3",true,"^O","^2U","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["~$p__60253","^;5","^;6"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",797,"^:4",["^N",[null,"^:5"]],"^:",797,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^;4"],"^1K","^:P"],"^;5","^;6"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",395,"^9",7,"^:",395,"^;",19,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^:P","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^O","^2I","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:0",["^1I",[["~$p__60128","^:P","^;9","^;:"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",395,"^:4",["^N",[null,"^:5"]],"^:",395,"^:6",4,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^:P","^;9","^;:"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",485,"^9",7,"^:",485,"^;",27,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:9",["^ ","^::",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^O","^3V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^:0",["^1I",[["^9Y","^:9","~$p__60153"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",485,"^:4",["^N",[null,"^:5"]],"^:",485,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:9",["^ ","^::",["^;=","^;>","^;?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",7,"^:",90,"^;",15,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["~$type","~$key","~$children"],"^1K","~$ast"]]]]]]],"^O","^22","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^:0",["^1I",[["~$p__59932"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",90,"^:4",["^N",["^:H","^:5","^:I"]],"^:",90,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^;B","^;C","^;D"],"^1K","^;E"]]]]]]],"~$schedule-activation!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",7,"^:",281,"^;",27,"^9W",["^1I",["^9X",["^1I",[["^9Y","~$tm"],["^9Y"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^:3",false,"~:fixed-arity",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]]],"^O","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]],"^:0",[["^9Y","^;H"],["^9Y"]],"^:1",null,"^;J",2,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"~:methods",[["^ ","^;J",2,"^:3",false,"~:tag",["^N",["~$js","^:K"]]],["^ ","^;J",1,"^:3",false,"^;L",["^N",["^;M","^:K"]]]],"^8",281,"^:",281,"^:6",2,"^:7",true,"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",21,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","~$result","~$result-key"],["^9Y","^;9","^;:","^:P","^;O"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^;I",["^ ","^:3",false,"^;J",6,"^:6",6,"^:0",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]],"^9W",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]]],"^:2",["^1I",[null,null]]]],"^O","^32","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;I",["^ ","^:3",false,"^;J",6,"^:6",6,"^:0",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]],"^9W",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]]],"^:2",["^1I",[null,null]]],"^:0",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]],"^:1",null,"^;J",6,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",6,"^:3",false,"^;L",["^N",[null,"^:5","^:K"]]],["^ ","^;J",5,"^:3",false,"^;L",["^N",[null,"^:5","^:K"]]]],"^8",405,"^:",405,"^:6",6,"^:7",true,"^9W",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^;9","^;:","^:P","^;O","^;P"],["^9Y","^;9","^;:","^:P","^;O"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",619,"^9",7,"^:",619,"^;",23,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]]]]],"^O","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^9Y","~$p__60218"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",619,"^:4",["^N",["^:H","^:5","^:K"]],"^:",619,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]]]]],"~$add-send!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",7,"^:",456,"^;",16,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],["^ ","^:C",["~$id","~$options"],"^1K","^:9"],"^;:","^:P"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^O","^2A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^:0",["^1I",[["~$p__60147","~$p__60148","^;:","^:P"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",456,"^:4",["^N",["~$cljs.core/IMap","^:K"]],"^:",456,"^:6",4,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"],["^ ","^:C",["^;T","^;U"],"^1K","^:9"],"^;:","^:P"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",7,"^:",49,"^;",17,"^9W",["^1I",["^9X",["^1I",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^O","^3A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:0",["^1I",[["^;Z","^;["]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",49,"^:4",["^N",["~$boolean","^:5"]],"^:",49,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^;Z","^;["]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",7,"^:",63,"^;",17,"^9W",["^1I",["^9X",["^1I",[["^;Z"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^O","^3B","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:0",["^1I",[["^;Z"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",63,"^:4",["^N",["^<0","^:5"]],"^:",63,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^;Z"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",589,"^9",7,"^:",589,"^;",26,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^O","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^:0",["^1I",[["^9Y","~$p__60178"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",589,"^:4",["^N",["^:H","^:5"]],"^:",589,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",385,"^9",7,"^:",385,"^;",22,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]]],"^O","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^:0",["^1I",[["^9Y","~$p__60122"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",385,"^:4","^<0","^:",385,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^::",["^:@"],"^1K","^:9"]]]]]]],"~$schedule-queue-processing!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",7,"^:",291,"^;",33,"^9W",["^1I",["^9X",["^1I",[["^9Y","^;H"],["^9Y"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]]],"^O","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",33,"^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]],"^:0",[["^9Y","^;H"],["^9Y"]],"^:1",null,"^;J",2,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",2,"^:3",false,"^;L",["^N",["^;M","^:K"]]],["^ ","^;J",1,"^:3",false,"^;L",["^N",["^;M","^:K"]]]],"^8",291,"^:",291,"^:6",2,"^:7",true,"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",7,"^:",26,"^;",19,"^9W",["^1I",["^9X",["^1I",[["^9Y"]]]]],"^6","Returns the remotes map from an app"],"^O","^3D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:0",["^1I",[["^9Y"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",26,"^:4","^:5","^:",26,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",353,"^9",7,"^:",353,"^;",19,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^:C",["^;T","^:D"],"^1K","~$node"]]]]]]],"^O","^3C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:0",["^1I",[["^9Y","~$p__60113"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",353,"^:4",["^N",["^:H","^:5"]],"^:",353,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^:C",["^;T","^:D"],"^1K","^<9"]]]]]]],"~$process-send-queues!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",7,"^:",167,"^;",27,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^O","^2[","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^:0",["^1I",[["~$p__60019"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",167,"^:4",["^N",[null,"^:5"]],"^:",167,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^:W",["^:Y"],"^1K","^9Y"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",513,"^9",7,"^:",513,"^;",24,"^9W",["^1I",["^9X",["^1I",[["~$remote-names",["^ ","^::",["^;>","^;?"],"^1K","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^O","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:0",["^1I",[["^<>","~$p__60162"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",513,"^:4",["^N",[null,"^:5","^:K"]],"^:",513,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^<>",["^ ","^::",["^;>","^;?"],"^1K","^<?"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",7,"^:",38,"^;",23,"^9W",["^1I",["^9X",["^1I",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^O","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^<B"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",38,"^:4","~$cljs.core/IVector","^:",38,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^<B"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1K","^9Y"],"^;U"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^O","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^:0",["^1I",[["~$p__60070","^;U"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",257,"^:4",["^N",["^:5","^:K"]],"^:",257,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^<E"],"^1K","^9Y"],"^;U"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"~$addl"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]]]],"^;I",["^ ","^:3",false,"^;J",3,"^:6",3,"^:0",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]],"^9W",["^1I",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]],"^:2",["^1I",[null,null]]]],"^O","^3W","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^;I",["^ ","^:3",false,"^;J",3,"^:6",3,"^:0",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]],"^9W",["^1I",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]],"^:2",["^1I",[null,null]]],"^:0",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]],"^:1",null,"^;J",3,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",3,"^:3",false,"^;L",["^N",["^:H","^:5","^:K"]]],["^ ","^;J",2,"^:3",false,"^;L",["^N",["^:H","^:5","^:K"]]]],"^8",225,"^:",225,"^:6",3,"^:7",true,"^9W",["^1I",[["^9Y",["^ ","^:C",["^;U"],"^1K","^:9"],"^<H"],["^9Y",["^ ","^::",["^:T"],"^1K","^:9"]]]]],"~$schedule-sends!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",7,"^:",301,"^;",22,"^9W",["^1I",["^9X",["^1I",[["^9Y","^;H"],["^9Y"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]]],"^O","^2O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^9Y","^;H"],["^9Y"]],"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^:2",["^1I",[null,null]]],"^:0",[["^9Y","^;H"],["^9Y"]],"^:1",null,"^;J",2,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",2,"^:3",false,"^;L",["^N",["^;M","^:K"]]],["^ ","^;J",1,"^:3",false,"^;L",["^N",["^;M","^:K"]]]],"^8",301,"^:",301,"^:6",2,"^:7",true,"^9W",["^1I",[["^9Y","^;H"],["^9Y"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",7,"^:",69,"^;",37,"^9W",["^1I",["^9X",["^1I",[["^;5"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^O","^2N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",37,"^:0",["^1I",[["^;5"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",69,"^:4",["^N",[null,"^:H","^:5"]],"^:",69,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^;5"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^;4",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",824,"^9",7,"^:",824,"^;",13,"^9W",["^1I",["^9X",["^1I",[["^9Y","^;6"]]]]],"^6","Implementation of abort when using this tx processing"],"^O","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^:0",["^1I",[["^9Y","^;6"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",824,"^:4",["^N",[null,"^:5"]],"^:",824,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^;6"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",427,"^9",7,"^:",427,"^;",31,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:P","^:9","^:="]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^O","^4:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",31,"^:0",["^1I",[["^9Y","^:P","^:9","^:="]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",427,"^:4",["^N",[null,"^:H","^:5"]],"^:",427,"^:6",4,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:P","^:9","^:="]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",23,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^:C",["^;T","^:D"],"^1K","^<9"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^O","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^9Y","~$p__60101"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",310,"^:4",["^N",["^:H","^:5"]],"^:",310,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y",["^ ","^:C",["^;T","^:D"],"^1K","^<9"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",7,"^:",57,"^;",20,"^9W",["^1I",["^9X",["^1I",[["^;Z"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^O","^49","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:0",["^1I",[["^;Z"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",57,"^:4",["^N",["^<0","^:5"]],"^:",57,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^;Z"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",28,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^<E"],"^1K","^9Y"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^O","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^:0",["^1I",[["~$p__60078"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",266,"^:4","^:5","^:",266,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^<E"],"^1K","^9Y"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",20,"^9W",["^1I",["^9X",["^1I",[["^9Y","^9[","^;5"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^O","^4C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:0",["^1I",[["^9Y","^9[","^;5"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",97,"^:4","^;X","^:",97,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^9[","^;5"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",746,"^9",7,"^:",746,"^;",18,"^9W",["^1I",["^9X",["^1I",[["^9Y","~$tx"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["~$synchronous?"],"^1K","^;U"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^;I",["^ ","^:3",false,"^;J",3,"^:6",3,"^:0",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]],"^9W",["^1I",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]]],"^:2",["^1I",[null,null]]]],"^O","^3Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^;I",["^ ","^:3",false,"^;J",3,"^:6",3,"^:0",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]],"^9W",["^1I",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]]],"^:2",["^1I",[null,null]]],"^:0",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]],"^:1",null,"^;J",3,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",2,"^:3",false,"^;L","^:5"],["^ ","^;J",3,"^:3",false,"^;L","^:5"]],"^8",746,"^:",746,"^:6",3,"^:7",true,"^9W",["^1I",[["^9Y","^<S"],[["^ ","^:W",["^:Y"],"^1K","^9Y"],"^<S",["^ ","^::",["^<T"],"^1K","^;U"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",702,"^9",7,"^:",702,"^;",21,"^9W",["^1I",["^9X",["^1I",[["^9Y","^<S",["^ ","^::",["~$component"],"^1K","^;U"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^O","^3M","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:0",["^1I",[["^9Y","^<S","~$p__60235"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",702,"^:4","^:5","^:",702,"^:6",3,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^<S",["^ ","^::",["^<V"],"^1K","^;U"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",503,"^9",7,"^:",503,"^;",17,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Returns true if the given node has no active network operations."],"^O","^4=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:0",["^1I",[["~$p__60156"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",503,"^:4","^<0","^:",503,"^:6",1,"^:7",true,"^9W",["^1I",["^9X",["^1I",[[["^ ","^::",["^:@"],"^1K","^:9"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",634,"^9",7,"^:",634,"^;",26,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:R"]]]]]],"^O","^21","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^:0",["^1I",[["^9Y","^:R"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",634,"^:4",["^N",[null,"^:5"]],"^:",634,"^:6",2,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:R"]]]]]],"~$dispatch-result!",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",555,"^9",7,"^:",555,"^;",23,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:9",["^ ","^:C",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1K","^:="],"^:P"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^O","^3L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:0",["^1I",[["^9Y","^:9","~$p__60171","^:P"]]],"^:1",null,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^8",555,"^:4",["^N",["^:H","^:5"]],"^:",555,"^:6",4,"^:7",true,"^9W",["^1I",["^9X",["^1I",[["^9Y","^:9",["^ ","^:C",["^=0","^=1","^=2","^=3","^=4"],"^1K","^:="],"^:P"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^:9",["^ ","^9V",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^9W",["^1I",["^9X",["^1I",[["^<S"],["^<S","^;U"]]]]],"^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^<S"],["^<S","^;U"]],"^9W",["^1I",[["^<S"],["^<S","^;U"]]],"^:2",["^1I",[null,null]]]],"^O","^3Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",14,"^;I",["^ ","^:3",false,"^;J",2,"^:6",2,"^:0",[["^<S"],["^<S","^;U"]],"^9W",["^1I",[["^<S"],["^<S","^;U"]]],"^:2",["^1I",[null,null]]],"^:0",[["^<S"],["^<S","^;U"]],"^:1",null,"^;J",2,"^:2",["^1I",[null,null]],"^9",1,"^:3",false,"^;K",[["^ ","^;J",1,"^:3",false,"^;L","^:5"],["^ ","^;J",2,"^:3",false,"^;L","^;X"]],"^8",199,"^:",199,"^:6",2,"^:7",true,"^9W",["^1I",[["^<S"],["^<S","^;U"]]]]],"^1G",["^ ","^?","^@","^L","^L","^Z","^[","^10","^11","^14","^14","^I","^I","^17","^I","~$m","^19","^1<","^1=","^19","^19","~$s","^@","^11","^11","^[","^[","^1=","^1=","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1B",["^N",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:req-un","~:opt-un","~:remote","~:state-id-before","~:only-refresh","~:gfn","~:children","~:pred-exprs","~:keys-pred","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","^29","^:;","~:transacted-ast","~:opt-keys","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:db-after","~:ref","~$cljs.spec.alpha/coll-of","~:synchronous?","~:cljs.spec.alpha/kind-form","~:warn","~:req-specs","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element","~:state","^33","^35","~:cljs.spec.alpha/cpred","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^:@","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~$%","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:db-before","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:req","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:root","~:result","^<E","^;>","~:kind","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","~:req-keys","^;?","~$cljs.core/fn","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:opt-specs","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:pred-forms","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.application/remote-name","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^:T","~:parallel?","~:auto","~:edn-query-language.ast/key","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:cljs.spec.alpha/conform-all","~:rest","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^:<","^;=","~:message","~:com.fulcrologic.fulcro.application/remote-names","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:cljs.spec.alpha/describe","~:opt","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^>?","^?;","^<E","^?B","^?<","^=R","^>2","^>I","^?=","^?D","^29","^=P","~:p","^?>","^=A","^:T","^?6","^?F","^=F","^>G","^=Z","^=>","^=L","^?@","^>T","^?G","^=B","^=J","^=H","^?8","^>Z","^=8","^=9","^==","^=?","^=@","^=D","^=T","^>B","^>N","^>R","^>U","^?E","^>O","~~:ns-specs",["^ ","^=7","^4?","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^=A",["^1I",["^=P","^?<","^>I","^29"]],"^:;",["^1I",["~$cljs.spec.alpha/map-of","^24","^4?"]],"^=E","^?M","^=F","~:edn-query-language.ast/node","^=G","^3@","^=K","^23","^=X","^23","^>0",["^1I",["~$cljs.spec.alpha/keys","^>B",["^;=","^?:","^;?","^:<","^:;","^;>"],"^?E",["^?C","^?I","^?1"]]],"^:@",["^1I",["^=P","^>0","^>I","^29"]],"^>C",["^1I",["^?P","^>B",["^>T","^=E","^:T","^>K","^:@"],"^?E",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^?L"]]],"^;>","^35","^>K","^29","^;?","^3P","^>Q",["^1I",["^=P","^>C","^>I","^29"]],"^>S",["^1I",["^=P","^>C","^>I","^29"]],"^>T","~$cljs.core/uuid?","^?Q","^?M","^>[",["^1I",["^?N","^>Z","^=A"]],"^?1",["^1I",["^?N","^24","^4?"]],"^?5","^23","^:T",["^1I",["^?P","^?E",["^=7"],"^=9",["^=7"]]],"^?:","^=F","^?<",["^1I",["^?P","^>B",["^>T","^;=","^=F","^?H","^=G","^?@"],"^?E",["^:T"]]],"^?@","^23","^:<","^3P","^;=","^2M","^?C",["^1I",["^?N","^24","^?O"]],"^?F","^23","^?H","^3@","^?I",["^1I",["^?N","^24","^?O"]]],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^4E",[["^?T","~:static-fns"],true,["^?T","~:shadow-tweaks"],null,["^?T","~:source-map-inline"],null,["^?T","~:elide-asserts"],false,["^?T","~:optimize-constants"],null,["^?T","^1T"],null,["^?T","~:external-config"],null,["^?T","~:tooling-config"],null,["^?T","~:emit-constants"],null,["^?T","~:load-tests"],null,["^?T","~:form-size-threshold"],null,["^?T","~:data-readers"],null,["^?T","~:infer-externs"],"^?7",["^?T","^1V"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?T","~:fn-invoke-direct"],null,["^?T","~:source-map"],"/dev/null"]]]