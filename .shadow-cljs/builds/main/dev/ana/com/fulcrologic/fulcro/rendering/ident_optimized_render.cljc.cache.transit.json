["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.ident_optimized_render');\n/**\n * Checks the given `idents` and returns a subset of them where the data they refer to has changed\n * between `old-state` and `new-state`.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$dirty_table_entries(old_state,new_state,idents){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,ident){\nif((cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_state,ident) === cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_state,ident))){\nreturn result;\n} else {\nreturn cljs.core.cons(ident,result);\n}\n}),cljs.core.List.EMPTY,idents);\n});\n/**\n * Uses the component's query and the current application state to query for the current value of that component's\n *   props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n *   component-local state).\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_component_BANG_(app__$1,ident,c){\nif(cljs.core.truth_((function (){var and__4115__auto__ = c;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ident;\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar map__59267 = app__$1;\nvar map__59267__$1 = (((((!((map__59267 == null))))?(((((map__59267.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59267.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59267):map__59267);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59267__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar state_map = cljs.core.deref(state_atom);\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(c,state_map);\nvar q = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([ident,query])], null);\nvar prior_computed = (function (){var or__4126__auto__ = com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1(c);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar data_tree = (cljs.core.truth_(query)?com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(q,state_map,state_map):null);\nvar new_props = com.fulcrologic.fulcro.components.computed(cljs.core.get.cljs$core$IFn$_invoke$arity$2(data_tree,ident),prior_computed);\nif(cljs.core.truth_(query)){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,42,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query was empty. Refresh failed for \",cljs.core.type(c)], null);\n}),null)),null,-2038422575);\n}\n\nreturn com.fulcrologic.fulcro.components.tunnel_props_BANG_(c,new_props);\n} else {\nvar root = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(c,root)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,46,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Failed to do optimized update. Component\",com.fulcrologic.fulcro.components.class__GT_registry_key(com.fulcrologic.fulcro.components.react_type(c)),\"queries for data that changed, but does not have an ident.\"], null);\n}),null)),null,-1879931840);\n} else {\n}\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Targeted update failed\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n/**\n * Renders *only* components that *have* the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_components_with_ident_BANG_(app__$1,ident){\nvar seq__59269 = cljs.core.seq(com.fulcrologic.fulcro.components.ident__GT_components(app__$1,ident));\nvar chunk__59270 = null;\nvar count__59271 = (0);\nvar i__59272 = (0);\nwhile(true){\nif((i__59272 < count__59271)){\nvar c = chunk__59270.cljs$core$IIndexed$_nth$arity$2(null,i__59272);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident,c);\n\n\nvar G__59445 = seq__59269;\nvar G__59446 = chunk__59270;\nvar G__59447 = count__59271;\nvar G__59448 = (i__59272 + (1));\nseq__59269 = G__59445;\nchunk__59270 = G__59446;\ncount__59271 = G__59447;\ni__59272 = G__59448;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__59269);\nif(temp__5735__auto__){\nvar seq__59269__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59269__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__59269__$1);\nvar G__59449 = cljs.core.chunk_rest(seq__59269__$1);\nvar G__59450 = c__4556__auto__;\nvar G__59451 = cljs.core.count(c__4556__auto__);\nvar G__59452 = (0);\nseq__59269 = G__59449;\nchunk__59270 = G__59450;\ncount__59271 = G__59451;\ni__59272 = G__59452;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__59269__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident,c);\n\n\nvar G__59455 = cljs.core.next(seq__59269__$1);\nvar G__59456 = null;\nvar G__59457 = (0);\nvar G__59458 = (0);\nseq__59269 = G__59455;\nchunk__59270 = G__59456;\ncount__59271 = G__59457;\ni__59272 = G__59458;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Renders components that have, or query for, the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_dependents_of_ident_BANG_(app__$1,ident){\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,ident);\n\nvar map__59274 = app__$1;\nvar map__59274__$1 = (((((!((map__59274 == null))))?(((((map__59274.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59274.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59274):map__59274);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59274__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__59275 = cljs.core.deref(runtime_atom);\nvar map__59275__$1 = (((((!((map__59275 == null))))?(((((map__59275.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59275.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59275):map__59275);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59275__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__59276 = indexes;\nvar map__59276__$1 = (((((!((map__59276 == null))))?(((((map__59276.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59276.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59276):map__59276);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59276__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59276__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59276__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nvar idents_in_joins__$1 = (function (){var or__4126__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nif(cljs.core.contains_QMARK_(idents_in_joins__$1,ident)){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(ident) : prop__GT_classes.call(null,ident));\nif(cljs.core.seq(classes)){\nvar seq__59286 = cljs.core.seq(classes);\nvar chunk__59287 = null;\nvar count__59288 = (0);\nvar i__59289 = (0);\nwhile(true){\nif((i__59289 < count__59288)){\nvar class$ = chunk__59287.cljs$core$IIndexed$_nth$arity$2(null,i__59289);\nvar seq__59319_59477 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__59321_59478 = null;\nvar count__59322_59479 = (0);\nvar i__59323_59480 = (0);\nwhile(true){\nif((i__59323_59480 < count__59322_59479)){\nvar component_59484 = chunk__59321_59478.cljs$core$IIndexed$_nth$arity$2(null,i__59323_59480);\nvar component_ident_59486 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_59484);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_59486,component_59484);\n\n\nvar G__59487 = seq__59319_59477;\nvar G__59488 = chunk__59321_59478;\nvar G__59489 = count__59322_59479;\nvar G__59490 = (i__59323_59480 + (1));\nseq__59319_59477 = G__59487;\nchunk__59321_59478 = G__59488;\ncount__59322_59479 = G__59489;\ni__59323_59480 = G__59490;\ncontinue;\n} else {\nvar temp__5735__auto___59492 = cljs.core.seq(seq__59319_59477);\nif(temp__5735__auto___59492){\nvar seq__59319_59493__$1 = temp__5735__auto___59492;\nif(cljs.core.chunked_seq_QMARK_(seq__59319_59493__$1)){\nvar c__4556__auto___59494 = cljs.core.chunk_first(seq__59319_59493__$1);\nvar G__59495 = cljs.core.chunk_rest(seq__59319_59493__$1);\nvar G__59496 = c__4556__auto___59494;\nvar G__59497 = cljs.core.count(c__4556__auto___59494);\nvar G__59498 = (0);\nseq__59319_59477 = G__59495;\nchunk__59321_59478 = G__59496;\ncount__59322_59479 = G__59497;\ni__59323_59480 = G__59498;\ncontinue;\n} else {\nvar component_59499 = cljs.core.first(seq__59319_59493__$1);\nvar component_ident_59500 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_59499);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_59500,component_59499);\n\n\nvar G__59501 = cljs.core.next(seq__59319_59493__$1);\nvar G__59502 = null;\nvar G__59503 = (0);\nvar G__59504 = (0);\nseq__59319_59477 = G__59501;\nchunk__59321_59478 = G__59502;\ncount__59322_59479 = G__59503;\ni__59323_59480 = G__59504;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__59505 = seq__59286;\nvar G__59506 = chunk__59287;\nvar G__59507 = count__59288;\nvar G__59508 = (i__59289 + (1));\nseq__59286 = G__59505;\nchunk__59287 = G__59506;\ncount__59288 = G__59507;\ni__59289 = G__59508;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__59286);\nif(temp__5735__auto__){\nvar seq__59286__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59286__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__59286__$1);\nvar G__59509 = cljs.core.chunk_rest(seq__59286__$1);\nvar G__59510 = c__4556__auto__;\nvar G__59511 = cljs.core.count(c__4556__auto__);\nvar G__59512 = (0);\nseq__59286 = G__59509;\nchunk__59287 = G__59510;\ncount__59288 = G__59511;\ni__59289 = G__59512;\ncontinue;\n} else {\nvar class$ = cljs.core.first(seq__59286__$1);\nvar seq__59339_59514 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__59341_59515 = null;\nvar count__59342_59516 = (0);\nvar i__59343_59517 = (0);\nwhile(true){\nif((i__59343_59517 < count__59342_59516)){\nvar component_59518 = chunk__59341_59515.cljs$core$IIndexed$_nth$arity$2(null,i__59343_59517);\nvar component_ident_59519 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_59518);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_59519,component_59518);\n\n\nvar G__59520 = seq__59339_59514;\nvar G__59521 = chunk__59341_59515;\nvar G__59522 = count__59342_59516;\nvar G__59523 = (i__59343_59517 + (1));\nseq__59339_59514 = G__59520;\nchunk__59341_59515 = G__59521;\ncount__59342_59516 = G__59522;\ni__59343_59517 = G__59523;\ncontinue;\n} else {\nvar temp__5735__auto___59526__$1 = cljs.core.seq(seq__59339_59514);\nif(temp__5735__auto___59526__$1){\nvar seq__59339_59527__$1 = temp__5735__auto___59526__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__59339_59527__$1)){\nvar c__4556__auto___59528 = cljs.core.chunk_first(seq__59339_59527__$1);\nvar G__59529 = cljs.core.chunk_rest(seq__59339_59527__$1);\nvar G__59530 = c__4556__auto___59528;\nvar G__59531 = cljs.core.count(c__4556__auto___59528);\nvar G__59532 = (0);\nseq__59339_59514 = G__59529;\nchunk__59341_59515 = G__59530;\ncount__59342_59516 = G__59531;\ni__59343_59517 = G__59532;\ncontinue;\n} else {\nvar component_59534 = cljs.core.first(seq__59339_59527__$1);\nvar component_ident_59536 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_59534);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_59536,component_59534);\n\n\nvar G__59537 = cljs.core.next(seq__59339_59527__$1);\nvar G__59538 = null;\nvar G__59539 = (0);\nvar G__59540 = (0);\nseq__59339_59514 = G__59537;\nchunk__59341_59515 = G__59538;\ncount__59342_59516 = G__59539;\ni__59343_59517 = G__59540;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__59543 = cljs.core.next(seq__59286__$1);\nvar G__59544 = null;\nvar G__59545 = (0);\nvar G__59546 = (0);\nseq__59286 = G__59543;\nchunk__59287 = G__59544;\ncount__59288 = G__59545;\ni__59289 = G__59546;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given an app and a `property-set`: returns the components that query for the items in property-set.\n * \n *   The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n *   in a component query as a property or join key.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$props__GT_components(app__$1,property_set){\nif(cljs.core.seq(property_set)){\nvar map__59357 = app__$1;\nvar map__59357__$1 = (((((!((map__59357 == null))))?(((((map__59357.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59357.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59357):map__59357);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59357__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__59358 = cljs.core.deref(runtime_atom);\nvar map__59358__$1 = (((((!((map__59358 == null))))?(((((map__59358.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59358.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59358):map__59358);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59358__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__59359 = indexes;\nvar map__59359__$1 = (((((!((map__59359 == null))))?(((((map__59359.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59359.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59359):map__59359);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59359__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59359__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,prop){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(prop) : prop__GT_classes.call(null,prop));\nvar components = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__59354_SHARP_,p2__59355_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(p1__59354_SHARP_,(class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(p2__59355_SHARP_) : class__GT_components.call(null,p2__59355_SHARP_)));\n}),cljs.core.PersistentHashSet.EMPTY,classes);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(result,components);\n}),cljs.core.PersistentHashSet.EMPTY,property_set);\n} else {\nreturn null;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_stale_components_BANG_(app__$1){\nvar map__59372 = app__$1;\nvar map__59372__$1 = (((((!((map__59372 == null))))?(((((map__59372.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59372.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59372):map__59372);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59372__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59372__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__59373 = cljs.core.deref(runtime_atom);\nvar map__59373__$1 = (((((!((map__59373 == null))))?(((((map__59373.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59373.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59373):map__59373);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar last_rendered_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441));\nvar to_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar map__59374 = indexes;\nvar map__59374__$1 = (((((!((map__59374 == null))))?(((((map__59374.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59374.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59374):map__59374);\nvar linked_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59374__$1,new cljs.core.Keyword(null,\"linked-props\",\"linked-props\",1547374714));\nvar ident__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59374__$1,new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224));\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59374__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59374__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__59385 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__59385__$1 = (((((!((map__59385 == null))))?(((((map__59385.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59385.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59385):map__59385);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59385__$1,true);\nvar limited_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59385__$1,false);\nvar limited_to_render = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app__$1,limited_props);\nvar seq__59388_59565 = cljs.core.seq(limited_to_render);\nvar chunk__59390_59566 = null;\nvar count__59391_59567 = (0);\nvar i__59392_59568 = (0);\nwhile(true){\nif((i__59392_59568 < count__59391_59567)){\nvar c_59569 = chunk__59390_59566.cljs$core$IIndexed$_nth$arity$2(null,i__59392_59568);\nvar ident_59570 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_59569);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident_59570,c_59569);\n\n\nvar G__59573 = seq__59388_59565;\nvar G__59574 = chunk__59390_59566;\nvar G__59575 = count__59391_59567;\nvar G__59576 = (i__59392_59568 + (1));\nseq__59388_59565 = G__59573;\nchunk__59390_59566 = G__59574;\ncount__59391_59567 = G__59575;\ni__59392_59568 = G__59576;\ncontinue;\n} else {\nvar temp__5735__auto___59577 = cljs.core.seq(seq__59388_59565);\nif(temp__5735__auto___59577){\nvar seq__59388_59578__$1 = temp__5735__auto___59577;\nif(cljs.core.chunked_seq_QMARK_(seq__59388_59578__$1)){\nvar c__4556__auto___59579 = cljs.core.chunk_first(seq__59388_59578__$1);\nvar G__59580 = cljs.core.chunk_rest(seq__59388_59578__$1);\nvar G__59581 = c__4556__auto___59579;\nvar G__59582 = cljs.core.count(c__4556__auto___59579);\nvar G__59583 = (0);\nseq__59388_59565 = G__59580;\nchunk__59390_59566 = G__59581;\ncount__59391_59567 = G__59582;\ni__59392_59568 = G__59583;\ncontinue;\n} else {\nvar c_59585 = cljs.core.first(seq__59388_59578__$1);\nvar ident_59586 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_59585);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident_59586,c_59585);\n\n\nvar G__59588 = cljs.core.next(seq__59388_59578__$1);\nvar G__59589 = null;\nvar G__59590 = (0);\nvar G__59591 = (0);\nseq__59388_59565 = G__59588;\nchunk__59390_59566 = G__59589;\ncount__59391_59567 = G__59590;\ni__59392_59568 = G__59591;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__59398 = cljs.core.seq(limited_idents);\nvar chunk__59399 = null;\nvar count__59400 = (0);\nvar i__59401 = (0);\nwhile(true){\nif((i__59401 < count__59400)){\nvar i = chunk__59399.cljs$core$IIndexed$_nth$arity$2(null,i__59401);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i);\n\n\nvar G__59593 = seq__59398;\nvar G__59594 = chunk__59399;\nvar G__59595 = count__59400;\nvar G__59596 = (i__59401 + (1));\nseq__59398 = G__59593;\nchunk__59399 = G__59594;\ncount__59400 = G__59595;\ni__59401 = G__59596;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__59398);\nif(temp__5735__auto__){\nvar seq__59398__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59398__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__59398__$1);\nvar G__59599 = cljs.core.chunk_rest(seq__59398__$1);\nvar G__59600 = c__4556__auto__;\nvar G__59601 = cljs.core.count(c__4556__auto__);\nvar G__59602 = (0);\nseq__59398 = G__59599;\nchunk__59399 = G__59600;\ncount__59400 = G__59601;\ni__59401 = G__59602;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__59398__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i);\n\n\nvar G__59604 = cljs.core.next(seq__59398__$1);\nvar G__59605 = null;\nvar G__59606 = (0);\nvar G__59607 = (0);\nseq__59398 = G__59604;\nchunk__59399 = G__59605;\ncount__59400 = G__59606;\ni__59401 = G__59607;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nvar state_map = cljs.core.deref(state_atom);\nvar idents_in_joins__$1 = (function (){var or__4126__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nvar dirty_linked_props = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p){\nif((!((cljs.core.get.cljs$core$IFn$_invoke$arity$2(state_map,p) === cljs.core.get.cljs$core$IFn$_invoke$arity$2(last_rendered_state,p))))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,p);\n} else {\nreturn acc;\n}\n}),cljs.core.PersistentHashSet.EMPTY,linked_props);\nvar map__59405 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,to_refresh);\nvar map__59405__$1 = (((((!((map__59405 == null))))?(((((map__59405.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59405.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59405):map__59405);\nvar idents_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59405__$1,true);\nvar props_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59405__$1,false);\nvar props_to_force__$1 = clojure.set.union.cljs$core$IFn$_invoke$arity$2(props_to_force,dirty_linked_props);\nvar mounted_idents = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(ident__GT_components),idents_in_joins__$1);\nvar stale_idents = com.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries(last_rendered_state,state_map,mounted_idents);\nvar extra_to_force = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app__$1,props_to_force__$1);\nvar all_idents = clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.set(idents_to_force),cljs.core.set(stale_idents));\nvar seq__59410_59612 = cljs.core.seq(all_idents);\nvar chunk__59411_59613 = null;\nvar count__59412_59614 = (0);\nvar i__59413_59615 = (0);\nwhile(true){\nif((i__59413_59615 < count__59412_59614)){\nvar i_59616 = chunk__59411_59613.cljs$core$IIndexed$_nth$arity$2(null,i__59413_59615);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i_59616);\n\n\nvar G__59617 = seq__59410_59612;\nvar G__59618 = chunk__59411_59613;\nvar G__59619 = count__59412_59614;\nvar G__59620 = (i__59413_59615 + (1));\nseq__59410_59612 = G__59617;\nchunk__59411_59613 = G__59618;\ncount__59412_59614 = G__59619;\ni__59413_59615 = G__59620;\ncontinue;\n} else {\nvar temp__5735__auto___59621 = cljs.core.seq(seq__59410_59612);\nif(temp__5735__auto___59621){\nvar seq__59410_59622__$1 = temp__5735__auto___59621;\nif(cljs.core.chunked_seq_QMARK_(seq__59410_59622__$1)){\nvar c__4556__auto___59623 = cljs.core.chunk_first(seq__59410_59622__$1);\nvar G__59626 = cljs.core.chunk_rest(seq__59410_59622__$1);\nvar G__59627 = c__4556__auto___59623;\nvar G__59628 = cljs.core.count(c__4556__auto___59623);\nvar G__59629 = (0);\nseq__59410_59612 = G__59626;\nchunk__59411_59613 = G__59627;\ncount__59412_59614 = G__59628;\ni__59413_59615 = G__59629;\ncontinue;\n} else {\nvar i_59630 = cljs.core.first(seq__59410_59622__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i_59630);\n\n\nvar G__59631 = cljs.core.next(seq__59410_59622__$1);\nvar G__59632 = null;\nvar G__59633 = (0);\nvar G__59634 = (0);\nseq__59410_59612 = G__59631;\nchunk__59411_59613 = G__59632;\ncount__59412_59614 = G__59633;\ni__59413_59615 = G__59634;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__59422 = cljs.core.seq(extra_to_force);\nvar chunk__59423 = null;\nvar count__59424 = (0);\nvar i__59425 = (0);\nwhile(true){\nif((i__59425 < count__59424)){\nvar c = chunk__59423.cljs$core$IIndexed$_nth$arity$2(null,i__59425);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__59635 = seq__59422;\nvar G__59636 = chunk__59423;\nvar G__59637 = count__59424;\nvar G__59638 = (i__59425 + (1));\nseq__59422 = G__59635;\nchunk__59423 = G__59636;\ncount__59424 = G__59637;\ni__59425 = G__59638;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__59422);\nif(temp__5735__auto__){\nvar seq__59422__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59422__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__59422__$1);\nvar G__59639 = cljs.core.chunk_rest(seq__59422__$1);\nvar G__59640 = c__4556__auto__;\nvar G__59641 = cljs.core.count(c__4556__auto__);\nvar G__59642 = (0);\nseq__59422 = G__59639;\nchunk__59423 = G__59640;\ncount__59424 = G__59641;\ni__59425 = G__59642;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__59422__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__59643 = cljs.core.next(seq__59422__$1);\nvar G__59644 = null;\nvar G__59645 = (0);\nvar G__59646 = (0);\nseq__59422 = G__59643;\nchunk__59423 = G__59644;\ncount__59424 = G__59645;\ni__59425 = G__59646;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n *   it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n *   data that has changed.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_BANG_(var_args){\nvar G__59432 = arguments.length;\nswitch (G__59432) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__59434){\nvar map__59436 = p__59434;\nvar map__59436__$1 = (((((!((map__59436 == null))))?(((((map__59436.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59436.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59436):map__59436);\nvar options = map__59436__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59436__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59436__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4126__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_(app__$1);\n}catch (e59439){var e = e59439;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,146,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n}),null)),null,816538612);\n\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\n}}\n}));\n\n(com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","~:file","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",60],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$edn-query-language.core","^R","~$log","~$taoensso.timbre","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^R","~$com.fulcrologic.fulcro.algorithms.denormalize","^Z","~$cljs.core","^[","~$goog","^10","^Q","^Q","^V","^V","^X","^X","^T","^T","~$fdn","^Z"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^[","^[","^S","^T","^W","^X","^X","^X","^T","^T"],"~:form",["~#list",["~$ns","^K","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).",["^17",["^13",["^V","~:as","^U"],["^Z","^19","^11"],["^X","^19","^W"],["^Q","^19","^P"],["^R","^19","^Y"],["^T","^19","^S"]]]]],"~:flags",["^ ","^13",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^V","^Z","^X","^Q","^R","^T"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],"~:compiled-at",1609109803947,"~:resource-name","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.ident-optimized-render\n  \"A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).\"\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.set :as set]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defn dirty-table-entries\n  \"Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`.\"\n  [old-state new-state idents]\n  (reduce\n    (fn [result ident]\n      (if (identical? (get-in old-state ident) (get-in new-state ident))\n        result\n        (cons ident result)))\n    (list)\n    idents))\n\n(defn render-component!\n  \"Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \\\"props tunnelling\\\" (setting them on a well-known key in\n  component-local state).\"\n  [app ident c]\n  #?(:cljs\n     (if (and c ident)\n       (let [{:com.fulcrologic.fulcro.application/keys [state-atom]} app\n             state-map      @state-atom\n             query          (comp/get-query c state-map)\n             q              [{ident query}]\n             prior-computed (or (comp/get-computed c) {})\n             data-tree      (when query (fdn/db->tree q state-map state-map)) ; denormalize time is set by app render\n             new-props      (comp/computed (get data-tree ident) prior-computed)]\n         (when-not query (log/error \"Query was empty. Refresh failed for \" (type c)))\n         (comp/tunnel-props! c new-props))\n       (let [root (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/app-root)]\n         (when (not= c root)\n           (log/info \"Failed to do optimized update. Component\" (-> c comp/react-type (comp/class->registry-key))\n             \"queries for data that changed, but does not have an ident.\"))\n         (throw (ex-info \"Targeted update failed\" {}))))))\n\n(defn render-components-with-ident!\n  \"Renders *only* components that *have* the given ident.\"\n  [app ident]\n  (doseq [c (comp/ident->components app ident)]\n    (render-component! app ident c)))\n\n(defn render-dependents-of-ident!\n  \"Renders components that have, or query for, the given ident.\"\n  [app ident]\n  (render-components-with-ident! app ident)\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n        {:keys [prop->classes idents-in-joins class->components]} indexes\n        idents-in-joins (or idents-in-joins #{})]\n    (when (contains? idents-in-joins ident)\n      (let [classes (prop->classes ident)]\n        (when (seq classes)\n          (doseq [class classes]\n            (doseq [component (class->components class)\n                    :let [component-ident (comp/get-ident component)]]\n              (render-component! app component-ident component))))))))\n\n(defn props->components\n  \"Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key.\"\n  [app property-set]\n  (when (seq property-set)\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n          {:keys [prop->classes class->components]} indexes]\n      (reduce\n        (fn [result prop]\n          (let [classes    (prop->classes prop)\n                components (reduce #(into %1 (class->components %2)) #{} classes)]\n            (into result components)))\n        #{}\n        property-set))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes last-rendered-state\n                                                   to-refresh only-refresh]} @runtime-atom\n        {:keys [linked-props ident->components prop->classes idents-in-joins]} indexes\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true\n             limited-props  false} (group-by eql/ident? only-refresh)\n            limited-to-render (props->components app limited-props)]\n        (doseq [c limited-to-render\n                :let [ident (comp/get-ident c)]]\n          (render-component! app ident c))\n        (doseq [i limited-idents]\n          (render-dependents-of-ident! app i)))\n      (let [state-map          @state-atom\n            idents-in-joins    (or idents-in-joins #{})\n            dirty-linked-props (reduce\n                                 (fn [acc p]\n                                   (if (not (identical?\n                                              (get state-map p)\n                                              (get last-rendered-state p)))\n                                     (conj acc p)\n                                     acc))\n                                 #{}\n                                 linked-props)\n            {idents-to-force true\n             props-to-force  false} (group-by eql/ident? to-refresh)\n            props-to-force     (set/union props-to-force dirty-linked-props)\n            mounted-idents     (concat (keys ident->components) idents-in-joins)\n            stale-idents       (dirty-table-entries last-rendered-state state-map mounted-idents)\n            extra-to-force     (props->components app props-to-force)\n            all-idents         (set/union (set idents-to-force) (set stale-idents))]\n        (doseq [i all-idents]\n          (render-dependents-of-ident! app i))\n        (doseq [c extra-to-force]\n          (render-component! app (comp/get-ident c) c))))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (kr/render! app options)\n     (try\n       (render-stale-components! app)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (kr/render! app options))))))\n\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","old-state","new-state","idents","cljs.core.reduce","result","ident","cljs.core.get_in","cljs.core/cons","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","app","c","and__4115__auto__","map__59267","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","state-atom","state-map","query","com.fulcrologic.fulcro.components.get_query","q","prior-computed","or__4126__auto__","com.fulcrologic.fulcro.components.get_computed","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","new-props","com.fulcrologic.fulcro.components/computed","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/type","com.fulcrologic.fulcro.components/tunnel-props!","root","cljs.core.not_EQ_","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro.components/class->registry-key","cljs.core.ex_info","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","seq__59269","cljs.core/seq","chunk__59270","count__59271","i__59272","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","com.fulcrologic.fulcro.components/ident->components","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!","map__59274","map__59275","map__59276","runtime-atom","indexes","prop->classes","idents-in-joins","class->components","cljs.core/contains?","classes","seq__59286","chunk__59287","count__59288","i__59289","class","seq__59319","chunk__59321","count__59322","i__59323","seq__59339","chunk__59341","count__59342","i__59343","component","component-ident","com.fulcrologic.fulcro.components.get_ident","com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","property-set","map__59357","map__59358","map__59359","prop","components","p1__59354#","p2__59355#","cljs.core.into","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","map__59372","map__59373","map__59374","last-rendered-state","to-refresh","only-refresh","linked-props","ident->components","limited-refresh?","map__59385","limited-idents","limited-props","cljs.core/group-by","edn-query-language.core/ident?","limited-to-render","seq__59388","chunk__59390","count__59391","i__59392","seq__59398","chunk__59399","count__59400","i__59401","i","map__59405","dirty-linked-props","acc","p","cljs.core.conj","idents-to-force","props-to-force","clojure.set.union","mounted-idents","cljs.core.concat","cljs.core/keys","stale-idents","extra-to-force","all-idents","cljs.core/set","seq__59410","chunk__59411","count__59412","i__59413","seq__59422","chunk__59423","count__59424","i__59425","var_args","G__59432","com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","js/Error","p__59434","map__59436","com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_","force-root?","root-props-changed?","options","com.fulcrologic.fulcro.rendering.keyframe-render/render!","e59439","e","cljs.core/List"]],"~:used-vars",["^I",["~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/not=","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","~$cljs.core/contains?","~$cljs.core/into","~$com.fulcrologic.fulcro.components/get-ident","~$taoensso.timbre/*config*","~$cljs.core/get-in","~$cljs.core/List","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","~$cljs.core/ex-info","~$com.fulcrologic.fulcro.components/tunnel-props!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$cljs.core/cons","~$com.fulcrologic.fulcro.components/class->registry-key","~$js/Error","~$cljs.core/type","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!"]]],"~:cache-keys",["~#cmap",[["^1>","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^10","~$goog.dom.HtmlElement"]]],["^1>","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.labs.userAgent.util","~$goog.string"]]],["^1>","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^["]]],["^1>","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.array","~$goog.asserts"]]],["^1>","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.Promise","~$goog.events.EventTarget"]]],["^1>","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^T"]]],["^1>","cljs/spec/gen/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$goog.Uri"]]],["^1>","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$clojure.string","^2D"]]],["^1>","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F"]]],["^1>","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2D"]]],["^1>","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1>","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2C","~$goog.object","~$goog.string.internal"]]],["^1>","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2N"]]],["^1>","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F"]]],["^1>","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^T","^2J","^R","^2M","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1>","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$expound.paths","^@"]]],["^1>","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2C","~$goog.reflect","^2D"]]],["^1>","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1>","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1>","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","^Q","~$cljs.reader","~$cljs.tools.reader.edn","^2M","^2D","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1>","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.async.FreeList"]]],["^1>","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2K","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1>","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2L"]]],["^1>","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2D","^38"]]],["^1>","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.structs.Heap"]]],["^1>","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.Timer","^2E","^2F","^3A","^2H","~$goog.json.hybrid","~$goog.log","^3>","^3=","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2M","^2D","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^2L"]]],["^1>","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^["]]],["^1>","cljs/pprint.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","^2D","^38"]]],["^1>","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^3F","^3G","^3H","^3E","^2E","^2D","^38"]]],["^1>","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$expound.problems","^@","^2J","^Q","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1>","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1>","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.Disposable","^2F","^39","~$goog.events.Event","^3C","^3D","^2M"]]],["^1>","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","^T","^@","~$expound.alpha"]]],["^1>","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.disposable.IDisposable"]]],["^1>","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J"]]],["^1>","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1>","shadow/js.js"],["8d0c12ef4685cbbcf28e21ed74f34deddf731743","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F"]]],["^1>","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3P","~$goog.structs.Collection","^3Q"]]],"~:SHADOW-TIMESTAMP",[1609109508000,1609109508000,1609109508000],["^42","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^43","~$module$node_modules$object_assign$index"]]],["^1>","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","^2["]]],["^1>","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.events.ListenableKey"]]],["^1>","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.html.trustedtypes","^2Q","^2R","^2S","^2T"]]],["^1>","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","~$goog.events.Listener","^2M"]]],["^1>","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$taoensso.truss.impl"]]],["^1>","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^@"]]],["^1>","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","~$goog.html.SafeUrl","^2S","^2T","^2N"]]],["^1>","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4=","^2P","~$goog.html.uncheckedconversions","^2S","^2N"]]],["^1>","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^@","^3V"]]],["^1>","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^Q"]]],["^1>","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^["]]],["^1>","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2X","^2Z","^2L"]]],["^1>","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3:","~$goog.structs.PriorityPool"]]],["^1>","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","~$goog.dom.TagName","~$goog.dom.tags","^4A","^4B","~$goog.html.SafeStyleSheet","^4=","^2P","^4:","^2Q","^2R","^2X","^2M","^2S","^2T","^2N"]]],["^1>","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2M"]]],["^1>","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E"]]],["^1>","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2C","^2D"]]],["^1>","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","~$taoensso.encore"]]],["^1>","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2M","^3I","^36","^38"]]],["^1>","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4G","~$goog.dom.safe","^4@","^4C","~$goog.math.Coordinate","~$goog.math.Size","^2M","^2D","~$goog.string.Unicode","^2L"]]],["^1>","com/fulcrologic/fulcro/components.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2M","~$cljsjs.react","^R","^@","^T","^4J","^3T","^2J","~$com.fulcrologic.fulcro.algorithms.do-not-use","^Z","~$com.fulcrologic.fulcro.algorithms.lookup","~$com.fulcrologic.guardrails.core","^Q"]]],["^1>","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.debug.Error","^4L"]]],["^1>","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.debug.LogRecord"]]],["^1>","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","^2D","^3P","^3Q","^3R","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^42","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^43"]]],["^1>","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.Thenable","^2F","^3@","~$goog.async.run","^34","^4U","~$goog.promise.Resolver"]]],["^1>","cljs/spec/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2M","^3T","^D","^2J"]]],["^1>","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",[]]],["^1>","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.json"]]],["^1>","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2M"]]],["^1>","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^3F","^2J","~$cljs.tools.reader.impl.inspect"]]],["^1>","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","~$module$node_modules$react$index"]]],["^1>","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2D","^38"]]],["^1>","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3Z","~$goog.structs.Queue","~$goog.structs.Set"]]],["^42","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","6093d43b27c84de58b9ce55e3a930469339c9e54","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^43","^48"]]],["^1>","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2M","~$goog.structs.Node"]]],["^1>","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F"]]],["^1>","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^4M","^4C","^2S","^2N"]]],["^1>","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^Z","^4S","^X"]]],["^1>","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2N"]]],["^1>","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","^@","^B","^Q","^3V","^3W","^2W","^3T","^37","^2D"]]],["^1>","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","~$goog.debug.errorcontext","^2L"]]],["^1>","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.math"]]],["^1>","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^3G","^2D","^38"]]],["^1>","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","^4?","^57"]]],["^1>","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3A","~$goog.dom","^4G","^4M","^4?","^4@","^2P","^2X","^2Y","^2S"]]],["^1>","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","^4@","^4A","^4B","^4I","^4=","^2P","^2S","^2N"]]],["^1>","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","~$goog.debug","~$goog.debug.LogBuffer","^4V"]]],["^1>","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3Z","~$goog.events.EventId"]]],["^1>","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^3E","^3F","^3G"]]],["^1>","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","~$goog.math.Long","~$goog.math.Integer","^2D","^2M","^2E","^2I","^38"]]],["^1>","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","^4:","^2S","^2T"]]],["^1>","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^59","~$goog.debug.LogManager","^4V","~$goog.debug.Logger"]]],["^1>","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","^4B","^2M","^2S","^2T","^2N"]]],["^1>","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^59","^2K","^3[","~$goog.events.EventType","^2[","^2L"]]],["^1>","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2["]]],["^1>","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2L"]]],["^1>","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^["]]],["^1>","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2E","^2F","^2D"]]],["^1>","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","^2T"]]],["^1>","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^2J","^4J","~$taoensso.timbre.appenders.core"]]],["^1>","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^V","^Z","^X","^Q","^R","^T"]]],["^1>","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^5;"]]],["^1>","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^3X"]]],["^1>","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^[","^T","^Q","^R"]]],["^1>","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","~$goog.net.WrapperXmlHttpFactory","^3Y"]]],["^1>","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10"]]],["^1>","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^10","^2F","^2U","^2D","^2L","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/alpha.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/gen/alpha.clj",1594291030000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/edn.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1594291029000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1609109507000,"jar:file:/Users/chris/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/pprint.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1594291036000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1601468675000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1598537012000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/gen/alpha.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1609109508000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1595787487000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/components.cljc",1609109509000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj",1594291030000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1601468675000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",1,"^9",5,"^:",1,"^;",60],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^Q","^R","^R","^S","^T","^U","^V","^W","^X","^Y","^R","^Z","^Z","^[","^[","^10","^10","^Q","^Q","^V","^V","^X","^X","^T","^T","^11","^Z"],"^12",["^I",["^13"]],"~:shadow/js-access-global",["^I",["Error"]],"^14",null,"~:defs",["^ ","~$dirty-table-entries",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",16,"^9",7,"^:",16,"^;",26,"~:arglists",["^17",["~$quote",["^17",[["~$old-state","~$new-state","~$idents"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"^J","^1U","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",26,"~:method-params",["^17",[["^6Z","^6[","^70"]]],"~:protocol-impl",null,"~:arglists-meta",["^17",[null,null]],"^9",1,"~:variadic?",false,"^8",16,"~:ret-tag",["^I",[null,"~$any"]],"^:",16,"~:max-fixed-arity",3,"~:fn-var",true,"^6X",["^17",["^6Y",["^17",[["^6Z","^6[","^70"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"~$render-component!",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",28,"^9",7,"^:",28,"^;",24,"^6X",["^17",["^6Y",["^17",[["~$app","~$ident","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"^J","^1J","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^71",["^17",[["^7:","^7;","~$c"]]],"^72",null,"^73",["^17",[null,null]],"^9",1,"^74",false,"^8",28,"^75",["^I",["~$js","~$clj-nil"]],"^:",28,"^77",3,"^78",true,"^6X",["^17",["^6Y",["^17",[["^7:","^7;","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"~$render-components-with-ident!",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",50,"^9",7,"^:",50,"^;",36,"^6X",["^17",["^6Y",["^17",[["^7:","^7;"]]]]],"^6","Renders *only* components that *have* the given ident."],"^J","^1L","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",36,"^71",["^17",[["^7:","^7;"]]],"^72",null,"^73",["^17",[null,null]],"^9",1,"^74",false,"^8",50,"^75","^7=","^:",50,"^77",2,"^78",true,"^6X",["^17",["^6Y",["^17",[["^7:","^7;"]]]]],"^6","Renders *only* components that *have* the given ident."],"~$render-dependents-of-ident!",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",56,"^9",7,"^:",56,"^;",34,"^6X",["^17",["^6Y",["^17",[["^7:","^7;"]]]]],"^6","Renders components that have, or query for, the given ident."],"^J","^2;","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",34,"^71",["^17",[["^7:","^7;"]]],"^72",null,"^73",["^17",[null,null]],"^9",1,"^74",false,"^8",56,"^75","^7=","^:",56,"^77",2,"^78",true,"^6X",["^17",["^6Y",["^17",[["^7:","^7;"]]]]],"^6","Renders components that have, or query for, the given ident."],"~$props->components",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",72,"^9",7,"^:",72,"^;",24,"^6X",["^17",["^6Y",["^17",[["^7:","~$property-set"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"^J","^1K","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^71",["^17",[["^7:","^7A"]]],"^72",null,"^73",["^17",[null,null]],"^9",1,"^74",false,"^8",72,"^75",["^I",[null,"^76","^7="]],"^:",72,"^77",2,"^78",true,"^6X",["^17",["^6Y",["^17",[["^7:","^7A"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"~$render-stale-components!",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",90,"^9",7,"^:",90,"^;",31,"^6X",["^17",["^6Y",["^17",[["^7:"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^J","^1V","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",31,"^71",["^17",[["^7:"]]],"^72",null,"^73",["^17",[null,null]],"^9",1,"^74",false,"^8",90,"^75","^7=","^:",90,"^77",1,"^78",true,"^6X",["^17",["^6Y",["^17",[["^7:"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^6W",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^6X",["^17",["^6Y",["^17",[["^7:"],["^7:",["^ ","~:keys",["~$force-root?","~$root-props-changed?"],"^19","~$options"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.","~:top-fn",["^ ","^74",false,"~:fixed-arity",2,"^77",2,"^71",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]],"^6X",["^17",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]]],"^73",["^17",[null,null]]]],"^J","^21","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",14,"^7H",["^ ","^74",false,"^7I",2,"^77",2,"^71",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]],"^6X",["^17",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]]],"^73",["^17",[null,null]]],"^71",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]],"^72",null,"^7I",2,"^73",["^17",[null,null]],"^9",1,"^74",false,"~:methods",[["^ ","^7I",1,"^74",false,"~:tag","^76"],["^ ","^7I",2,"^74",false,"^7K",["^I",[null,"^76"]]]],"^8",132,"^:",132,"^77",2,"^78",true,"^6X",["^17",[["^7:"],["^7:",["^ ","^7D",["^7E","^7F"],"^19","^7G"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed."]],"^15",["^ ","^[","^[","^S","^T","^W","^X","^X","^X","^T","^T"],"~:cljs.analyzer/constants",["^ ","^12",["^I",["~:com.fulcrologic.fulcro.application/indexes","~:com.fulcrologic.fulcro.application/last-rendered-state","~:idents-in-joins","~:prop->classes","~:force-root?","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:class->components","~:com.fulcrologic.fulcro.application/to-refresh","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:info","~:error","~:ident->components","~:linked-props","~:auto","~:p","~:com.fulcrologic.fulcro.application/app-root"]],"~:order",["^7R","^7Y","~:p","^80","^81","^7W","^7X","^7M","^7P","^7O","^7T","^7N","^7U","^7S","^7[","^7Z","^7Q","^7V"]],"^1:",["^ ","^13",["^I",[]]],"^1;",["^ "],"^1<",["^10","^[","^V","^Z","^X","^Q","^R","^T"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2=",[["^85","~:static-fns"],true,["^85","~:shadow-tweaks"],null,["^85","~:source-map-inline"],null,["^85","~:elide-asserts"],false,["^85","~:optimize-constants"],null,["^85","^1A"],null,["^85","~:external-config"],null,["^85","~:tooling-config"],null,["^85","~:emit-constants"],null,["^85","~:load-tests"],null,["^85","~:form-size-threshold"],null,["^85","~:data-readers"],null,["^85","~:infer-externs"],"^80",["^85","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^85","~:fn-invoke-direct"],null,["^85","~:source-map"],"/dev/null"]]]