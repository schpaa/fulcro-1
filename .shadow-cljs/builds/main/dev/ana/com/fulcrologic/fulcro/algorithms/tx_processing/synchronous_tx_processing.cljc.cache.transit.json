["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing');\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n\n/**\n * Returns true if the current thread is running non-nested transaction processing code.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.top_level_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$top_level_QMARK_(p__61807){\nvar map__61808 = p__61807;\nvar map__61808__$1 = (((((!((map__61808 == null))))?(((((map__61808.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61808.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61808):map__61808);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61808__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)),(0));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_submission_queue_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___62316 = arguments.length;\nvar i__4737__auto___62317 = (0);\nwhile(true){\nif((i__4737__auto___62317 < len__4736__auto___62316)){\nargs__4742__auto__.push((arguments[i__4737__auto___62317]));\n\nvar G__62318 = (i__4737__auto___62317 + (1));\ni__4737__auto___62317 = G__62318;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$applyTo = (function (seq61815){\nvar G__61816 = cljs.core.first(seq61815);\nvar seq61815__$1 = cljs.core.next(seq61815);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61816,seq61815__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_submission_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submission_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_post_processing_steps_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___62319 = arguments.length;\nvar i__4737__auto___62320 = (0);\nwhile(true){\nif((i__4737__auto___62320 < len__4736__auto___62319)){\nargs__4742__auto__.push((arguments[i__4737__auto___62320]));\n\nvar G__62321 = (i__4737__auto___62320 + (1));\ni__4737__auto___62320 = G__62321;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$applyTo = (function (seq61837){\nvar G__61839 = cljs.core.first(seq61837);\nvar seq61837__$1 = cljs.core.next(seq61837);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61839,seq61837__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_post_processing_steps_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_steps(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_active_queue_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___62368 = arguments.length;\nvar i__4737__auto___62369 = (0);\nwhile(true){\nif((i__4737__auto___62369 < len__4736__auto___62368)){\nargs__4742__auto__.push((arguments[i__4737__auto___62369]));\n\nvar G__62370 = (i__4737__auto___62369 + (1));\ni__4737__auto___62369 = G__62370;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$applyTo = (function (seq61932){\nvar G__61933 = cljs.core.first(seq61932);\nvar seq61932__$1 = cljs.core.next(seq61932);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61933,seq61932__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_active_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$active_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_send_queue_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___62373 = arguments.length;\nvar i__4737__auto___62374 = (0);\nwhile(true){\nif((i__4737__auto___62374 < len__4736__auto___62373)){\nargs__4742__auto__.push((arguments[i__4737__auto___62374]));\n\nvar G__62375 = (i__4737__auto___62374 + (1));\ni__4737__auto___62374 = G__62375;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,remote,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$applyTo = (function (seq61951){\nvar G__61952 = cljs.core.first(seq61951);\nvar seq61951__$1 = cljs.core.next(seq61951);\nvar G__61953 = cljs.core.first(seq61951__$1);\nvar seq61951__$2 = cljs.core.next(seq61951__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61952,G__61953,seq61951__$2);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_send_queue_BANG_(app__$1,remote,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$send_queue(app__$1,remote){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)));\n});\n/**\n * Add `f` as a function that will run after the current transaction has been fully processed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_after_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_after_BANG_(app__$1,f){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),f], 0));\n});\n/**\n * Is there post processing to do?\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_QMARK_(app__$1){\nreturn cljs.core.boolean$(cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1)));\n});\n/**\n * Runs the queued post processing steps until the post-processing queue is empty.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.do_post_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$do_post_processing_BANG_(app__$1){\nvar steps = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1);\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_(app__$1,cljs.core.PersistentVector.EMPTY);\n\nvar seq__61982_62383 = cljs.core.seq(steps);\nvar chunk__61983_62384 = null;\nvar count__61984_62385 = (0);\nvar i__61985_62386 = (0);\nwhile(true){\nif((i__61985_62386 < count__61984_62385)){\nvar f_62387 = chunk__61983_62384.cljs$core$IIndexed$_nth$arity$2(null,i__61985_62386);\ntry{(f_62387.cljs$core$IFn$_invoke$arity$0 ? f_62387.cljs$core$IFn$_invoke$arity$0() : f_62387.call(null));\n}catch (e61998){var e_62388 = e61998;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,136,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__61982_62383,chunk__61983_62384,count__61984_62385,i__61985_62386,steps,e_62388,f_62387){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62388,\"Post processing step failed.\"], null);\n});})(seq__61982_62383,chunk__61983_62384,count__61984_62385,i__61985_62386,steps,e_62388,f_62387))\n,null)),null,1295178318);\n}\n\nvar G__62390 = seq__61982_62383;\nvar G__62391 = chunk__61983_62384;\nvar G__62392 = count__61984_62385;\nvar G__62393 = (i__61985_62386 + (1));\nseq__61982_62383 = G__62390;\nchunk__61983_62384 = G__62391;\ncount__61984_62385 = G__62392;\ni__61985_62386 = G__62393;\ncontinue;\n} else {\nvar temp__5735__auto___62394 = cljs.core.seq(seq__61982_62383);\nif(temp__5735__auto___62394){\nvar seq__61982_62395__$1 = temp__5735__auto___62394;\nif(cljs.core.chunked_seq_QMARK_(seq__61982_62395__$1)){\nvar c__4556__auto___62396 = cljs.core.chunk_first(seq__61982_62395__$1);\nvar G__62397 = cljs.core.chunk_rest(seq__61982_62395__$1);\nvar G__62398 = c__4556__auto___62396;\nvar G__62399 = cljs.core.count(c__4556__auto___62396);\nvar G__62400 = (0);\nseq__61982_62383 = G__62397;\nchunk__61983_62384 = G__62398;\ncount__61984_62385 = G__62399;\ni__61985_62386 = G__62400;\ncontinue;\n} else {\nvar f_62401 = cljs.core.first(seq__61982_62395__$1);\ntry{(f_62401.cljs$core$IFn$_invoke$arity$0 ? f_62401.cljs$core$IFn$_invoke$arity$0() : f_62401.call(null));\n}catch (e61999){var e_62402 = e61999;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,136,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__61982_62383,chunk__61983_62384,count__61984_62385,i__61985_62386,steps,e_62402,f_62401,seq__61982_62395__$1,temp__5735__auto___62394){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62402,\"Post processing step failed.\"], null);\n});})(seq__61982_62383,chunk__61983_62384,count__61984_62385,i__61985_62386,steps,e_62402,f_62401,seq__61982_62395__$1,temp__5735__auto___62394))\n,null)),null,-1308944423);\n}\n\nvar G__62403 = cljs.core.next(seq__61982_62395__$1);\nvar G__62404 = null;\nvar G__62405 = (0);\nvar G__62406 = (0);\nseq__61982_62383 = G__62403;\nchunk__61983_62384 = G__62404;\ncount__61984_62385 = G__62405;\ni__61985_62386 = G__62406;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar temp__5735__auto__ = cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1));\nif(temp__5735__auto__){\nvar next_steps = temp__5735__auto__;\nvar G__62407 = next_steps;\nsteps = G__62407;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$in_transaction_QMARK_(p__62000){\nvar map__62001 = p__62000;\nvar map__62001__$1 = (((((!((map__62001 == null))))?(((((map__62001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62001):map__62001);\nvar app__$1 = map__62001__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62001__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((0),cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)));\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$release_post_render_tasks_BANG_(app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n})], 0));\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__62003,remote){\nvar map__62004 = p__62003;\nvar map__62004__$1 = (((((!((map__62004 == null))))?(((((map__62004.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62004.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62004):map__62004);\nvar tx_element = map__62004__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62004__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62004__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62004__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62004__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62004__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar result_62411 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_62412 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_62412)){\nvar env_62413 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_62411], null));\ntry{(handler_62412.cljs$core$IFn$_invoke$arity$1 ? handler_62412.cljs$core$IFn$_invoke$arity$1(env_62413) : handler_62412.call(null,env_62413));\n}catch (e62012){var e_62414 = e62012;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,168,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62414,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n}),null)),null,-1640637315);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__62020){\nvar map__62021 = p__62020;\nvar map__62021__$1 = (((((!((map__62021 == null))))?(((((map__62021.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62021.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62021):map__62021);\nvar tx_element = map__62021__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62021__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62021__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$node_index(queue,txn_id){\nvar n = cljs.core.count(queue);\nvar idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__62028){\nvar map__62030 = p__62028;\nvar map__62030__$1 = (((((!((map__62030 == null))))?(((((map__62030.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62030.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62030):map__62030);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62030__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),queue);\nif((idx < n)){\nreturn idx;\n} else {\nreturn null;\n}\n});\n/**\n * Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n * handler and mark that remote as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_results_BANG_(app__$1,txn_id,ele_idx){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar tx_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,idx);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null),(function (p1__62038_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_(app__$1,tx_node,p1__62038_SHARP_);\n})], 0));\n});\n/**\n * Deal with a network result on the given txn/element.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$record_result_BANG_(var_args){\nvar G__62040 = arguments.length;\nswitch (G__62040) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (app__$1,txn_id,ele_idx,remote,result,result_key){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar txn_idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,211,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n}),null)),null,-1675851743);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc_in,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_(app__$1,txn_id,ele_idx);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$remove_send_BANG_(app__$1,remote,txn_id,ele_idx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (old_queue){\nreturn cljs.core.filterv((function (p__62056){\nvar map__62057 = p__62056;\nvar map__62057__$1 = (((((!((map__62057 == null))))?(((((map__62057.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62057.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62057):map__62057);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62057__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62057__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\n})], 0));\n});\n/**\n * Generate a new send node and add it to the appropriate send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG_(app__$1,p__62067,ele_idx,remote){\nvar map__62069 = p__62067;\nvar map__62069__$1 = (((((!((map__62069 == null))))?(((((map__62069.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62069.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62069):map__62069);\nvar tx_node = map__62069__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62069__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62069__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\nvar id__61609__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nvar G__62074 = app__$1;\nvar G__62075 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__62074,G__62075) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__62074,G__62075));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto__,cljs.core.dec);\n}});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_result_handler_STAR_(result){\nvar id__61609__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\nvar G__62080 = app__$1;\nvar G__62081 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__62080,G__62081) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__62080,G__62081));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto__,cljs.core.dec);\n}});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),send_node], 0));\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n}\n\nreturn null;\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__62085){\nvar map__62086 = p__62085;\nvar map__62086__$1 = (((((!((map__62086 == null))))?(((((map__62086.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62086.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62086):map__62086);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62086__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62086__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62086__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_sends_BANG_(app__$1,p__62093){\nvar map__62094 = p__62093;\nvar map__62094__$1 = (((((!((map__62094 == null))))?(((((map__62094.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62094.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62094):map__62094);\nvar tx_node = map__62094__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62094__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62094__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_tx_node_BANG_(app__$1,p__62096){\nvar map__62097 = p__62096;\nvar map__62097__$1 = (((((!((map__62097 == null))))?(((((map__62097.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62097.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62097):map__62097);\nvar tx_node = map__62097__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62097__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,tx_node)));\n}\n});\n/**\n * Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_send_queues_BANG_(app__$1){\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar seq__62125_62454 = cljs.core.seq(remote_names);\nvar chunk__62126_62455 = null;\nvar count__62127_62456 = (0);\nvar i__62128_62457 = (0);\nwhile(true){\nif((i__62128_62457 < count__62127_62456)){\nvar remote_62458 = chunk__62126_62455.cljs$core$IIndexed$_nth$arity$2(null,i__62128_62457);\nvar send_queue_62460 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_62458);\nvar vec__62169_62461 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_62460);\nvar p_62462 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62169_62461,(0),null);\nvar serial_62463 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62169_62461,(1),null);\nvar front_62464 = cljs.core.first(serial_62463);\nvar seq__62172_62465 = cljs.core.seq(p_62462);\nvar chunk__62173_62466 = null;\nvar count__62174_62467 = (0);\nvar i__62175_62468 = (0);\nwhile(true){\nif((i__62175_62468 < count__62174_62467)){\nvar item_62469 = chunk__62173_62466.cljs$core$IIndexed$_nth$arity$2(null,i__62175_62468);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62172_62465,chunk__62173_62466,count__62174_62467,i__62175_62468,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62469,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_62469,remote_62458);\n});})(seq__62172_62465,chunk__62173_62466,count__62174_62467,i__62175_62468,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62469,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations))\n);\n\n\nvar G__62470 = seq__62172_62465;\nvar G__62471 = chunk__62173_62466;\nvar G__62472 = count__62174_62467;\nvar G__62473 = (i__62175_62468 + (1));\nseq__62172_62465 = G__62470;\nchunk__62173_62466 = G__62471;\ncount__62174_62467 = G__62472;\ni__62175_62468 = G__62473;\ncontinue;\n} else {\nvar temp__5735__auto___62475 = cljs.core.seq(seq__62172_62465);\nif(temp__5735__auto___62475){\nvar seq__62172_62476__$1 = temp__5735__auto___62475;\nif(cljs.core.chunked_seq_QMARK_(seq__62172_62476__$1)){\nvar c__4556__auto___62477 = cljs.core.chunk_first(seq__62172_62476__$1);\nvar G__62480 = cljs.core.chunk_rest(seq__62172_62476__$1);\nvar G__62481 = c__4556__auto___62477;\nvar G__62482 = cljs.core.count(c__4556__auto___62477);\nvar G__62483 = (0);\nseq__62172_62465 = G__62480;\nchunk__62173_62466 = G__62481;\ncount__62174_62467 = G__62482;\ni__62175_62468 = G__62483;\ncontinue;\n} else {\nvar item_62484 = cljs.core.first(seq__62172_62476__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62172_62465,chunk__62173_62466,count__62174_62467,i__62175_62468,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62484,seq__62172_62476__$1,temp__5735__auto___62475,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_62484,remote_62458);\n});})(seq__62172_62465,chunk__62173_62466,count__62174_62467,i__62175_62468,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62484,seq__62172_62476__$1,temp__5735__auto___62475,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations))\n);\n\n\nvar G__62487 = cljs.core.next(seq__62172_62476__$1);\nvar G__62488 = null;\nvar G__62489 = (0);\nvar G__62490 = (0);\nseq__62172_62465 = G__62487;\nchunk__62173_62466 = G__62488;\ncount__62174_62467 = G__62489;\ni__62175_62468 = G__62490;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_62464))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_62458,serial_62463);\n} else {\nvar map__62176_62546 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_62458,serial_62463);\nvar map__62176_62547__$1 = (((((!((map__62176_62546 == null))))?(((((map__62176_62546.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62176_62546.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62176_62546):map__62176_62546);\nvar send_queue_62548__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62176_62547__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_62549 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62176_62547__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_62549)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,map__62176_62546,map__62176_62547__$1,send_queue_62548__$1,send_node_62549,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_62549,remote_62458);\n});})(seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,map__62176_62546,map__62176_62547__$1,send_queue_62548__$1,send_node_62549,send_queue_62460,vec__62169_62461,p_62462,serial_62463,front_62464,remote_62458,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_62458,send_queue_62548__$1);\n}\n\n\nvar G__62550 = seq__62125_62454;\nvar G__62551 = chunk__62126_62455;\nvar G__62552 = count__62127_62456;\nvar G__62553 = (i__62128_62457 + (1));\nseq__62125_62454 = G__62550;\nchunk__62126_62455 = G__62551;\ncount__62127_62456 = G__62552;\ni__62128_62457 = G__62553;\ncontinue;\n} else {\nvar temp__5735__auto___62554 = cljs.core.seq(seq__62125_62454);\nif(temp__5735__auto___62554){\nvar seq__62125_62555__$1 = temp__5735__auto___62554;\nif(cljs.core.chunked_seq_QMARK_(seq__62125_62555__$1)){\nvar c__4556__auto___62556 = cljs.core.chunk_first(seq__62125_62555__$1);\nvar G__62557 = cljs.core.chunk_rest(seq__62125_62555__$1);\nvar G__62558 = c__4556__auto___62556;\nvar G__62559 = cljs.core.count(c__4556__auto___62556);\nvar G__62560 = (0);\nseq__62125_62454 = G__62557;\nchunk__62126_62455 = G__62558;\ncount__62127_62456 = G__62559;\ni__62128_62457 = G__62560;\ncontinue;\n} else {\nvar remote_62561 = cljs.core.first(seq__62125_62555__$1);\nvar send_queue_62562 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_62561);\nvar vec__62178_62563 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_62562);\nvar p_62564 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62178_62563,(0),null);\nvar serial_62565 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62178_62563,(1),null);\nvar front_62566 = cljs.core.first(serial_62565);\nvar seq__62181_62567 = cljs.core.seq(p_62564);\nvar chunk__62182_62568 = null;\nvar count__62183_62569 = (0);\nvar i__62184_62570 = (0);\nwhile(true){\nif((i__62184_62570 < count__62183_62569)){\nvar item_62571 = chunk__62182_62568.cljs$core$IIndexed$_nth$arity$2(null,i__62184_62570);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62181_62567,chunk__62182_62568,count__62183_62569,i__62184_62570,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62571,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_62571,remote_62561);\n});})(seq__62181_62567,chunk__62182_62568,count__62183_62569,i__62184_62570,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62571,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations))\n);\n\n\nvar G__62572 = seq__62181_62567;\nvar G__62573 = chunk__62182_62568;\nvar G__62574 = count__62183_62569;\nvar G__62575 = (i__62184_62570 + (1));\nseq__62181_62567 = G__62572;\nchunk__62182_62568 = G__62573;\ncount__62183_62569 = G__62574;\ni__62184_62570 = G__62575;\ncontinue;\n} else {\nvar temp__5735__auto___62576__$1 = cljs.core.seq(seq__62181_62567);\nif(temp__5735__auto___62576__$1){\nvar seq__62181_62577__$1 = temp__5735__auto___62576__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__62181_62577__$1)){\nvar c__4556__auto___62578 = cljs.core.chunk_first(seq__62181_62577__$1);\nvar G__62579 = cljs.core.chunk_rest(seq__62181_62577__$1);\nvar G__62580 = c__4556__auto___62578;\nvar G__62581 = cljs.core.count(c__4556__auto___62578);\nvar G__62582 = (0);\nseq__62181_62567 = G__62579;\nchunk__62182_62568 = G__62580;\ncount__62183_62569 = G__62581;\ni__62184_62570 = G__62582;\ncontinue;\n} else {\nvar item_62583 = cljs.core.first(seq__62181_62577__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62181_62567,chunk__62182_62568,count__62183_62569,i__62184_62570,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62583,seq__62181_62577__$1,temp__5735__auto___62576__$1,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_62583,remote_62561);\n});})(seq__62181_62567,chunk__62182_62568,count__62183_62569,i__62184_62570,seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,item_62583,seq__62181_62577__$1,temp__5735__auto___62576__$1,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations))\n);\n\n\nvar G__62584 = cljs.core.next(seq__62181_62577__$1);\nvar G__62585 = null;\nvar G__62586 = (0);\nvar G__62587 = (0);\nseq__62181_62567 = G__62584;\nchunk__62182_62568 = G__62585;\ncount__62183_62569 = G__62586;\ni__62184_62570 = G__62587;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_62566))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_62561,serial_62565);\n} else {\nvar map__62196_62589 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_62561,serial_62565);\nvar map__62196_62590__$1 = (((((!((map__62196_62589 == null))))?(((((map__62196_62589.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62196_62589.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62196_62589):map__62196_62589);\nvar send_queue_62591__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62196_62590__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_62592 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62196_62590__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_62592)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,map__62196_62589,map__62196_62590__$1,send_queue_62591__$1,send_node_62592,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_62592,remote_62561);\n});})(seq__62125_62454,chunk__62126_62455,count__62127_62456,i__62128_62457,map__62196_62589,map__62196_62590__$1,send_queue_62591__$1,send_node_62592,send_queue_62562,vec__62178_62563,p_62564,serial_62565,front_62566,remote_62561,seq__62125_62555__$1,temp__5735__auto___62554,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_62561,send_queue_62591__$1);\n}\n\n\nvar G__62593 = cljs.core.next(seq__62125_62555__$1);\nvar G__62594 = null;\nvar G__62595 = (0);\nvar G__62596 = (0);\nseq__62125_62454 = G__62593;\nchunk__62126_62455 = G__62594;\ncount__62127_62456 = G__62595;\ni__62128_62457 = G__62596;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__62200 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__62201 = null;\nvar count__62202 = (0);\nvar i__62203 = (0);\nwhile(true){\nif((i__62203 < count__62202)){\nvar op = chunk__62201.cljs$core$IIndexed$_nth$arity$2(null,i__62203);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__62597 = seq__62200;\nvar G__62598 = chunk__62201;\nvar G__62599 = count__62202;\nvar G__62600 = (i__62203 + (1));\nseq__62200 = G__62597;\nchunk__62201 = G__62598;\ncount__62202 = G__62599;\ni__62203 = G__62600;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__62200);\nif(temp__5735__auto__){\nvar seq__62200__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62200__$1)){\nvar c__4556__auto__ = cljs.core.chunk_first(seq__62200__$1);\nvar G__62601 = cljs.core.chunk_rest(seq__62200__$1);\nvar G__62602 = c__4556__auto__;\nvar G__62603 = cljs.core.count(c__4556__auto__);\nvar G__62604 = (0);\nseq__62200 = G__62601;\nchunk__62201 = G__62602;\ncount__62202 = G__62603;\ni__62203 = G__62604;\ncontinue;\n} else {\nvar op = cljs.core.first(seq__62200__$1);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__62605 = cljs.core.next(seq__62200__$1);\nvar G__62606 = null;\nvar G__62607 = (0);\nvar G__62608 = (0);\nseq__62200 = G__62605;\nchunk__62201 = G__62606;\ncount__62202 = G__62607;\ni__62203 = G__62608;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG_(p__62209){\nvar map__62210 = p__62209;\nvar map__62210__$1 = (((((!((map__62210 == null))))?(((((map__62210.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62210.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62210):map__62210);\nvar app__$1 = map__62210__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62210__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62210__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar old_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5733__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar new_node = temp__5733__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,old_queue);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_queue,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,326,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Old queue changed!\"], null);\n}),null)),null,1536850826);\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_(app__$1,new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_(app__$1);\n\nreturn null;\n});\n/**\n * Returns true if the submission queue has work on it that can proceed without any restrictions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$available_work_QMARK_(app__$1){\nvar map__62216 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__62216__$1 = (((((!((map__62216 == null))))?(((((map__62216.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62216.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62216):map__62216);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62216__$1,false);\nreturn cljs.core.boolean$(cljs.core.seq(ready));\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$activate_submissions_BANG_(app__$1){\nvar map__62225 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__62225__$1 = (((((!((map__62225 == null))))?(((((map__62225.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62225.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62225):map__62225);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62225__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62225__$1,false);\nvar _ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_(app__$1,cljs.core.vec(blocked));\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__62224_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__62224_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__62224_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,cljs.core.PersistentVector.EMPTY),dispatched_nodes], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_(app__$1);\n});\n/**\n * Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n * are processed as well until the submission queue remains empty. This can start network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_all_immediate_work_BANG_(app__$1){\ntry{return com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_(app__$1);\n}catch (e62227){var e = e62227;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,359,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Error processing tx queue!\"], null);\n}),null)),null,-2062064016);\n}});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_queue_BANG_(app__$1,p__62241){\nwhile(true){\nvar map__62253 = p__62241;\nvar map__62253__$1 = (((((!((map__62253 == null))))?(((((map__62253.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62253.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62253):map__62253);\nvar options = map__62253__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62253__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62253__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\ncontinue;\n} else {\n}\nbreak;\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = synchronous_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn component;\n} else {\nreturn and__4115__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nvar temp__5735__auto___62623 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\nif(cljs.core.truth_(temp__5735__auto___62623)){\nvar render_BANG__62624 = temp__5735__auto___62623;\n(render_BANG__62624.cljs$core$IFn$_invoke$arity$2 ? render_BANG__62624.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_BANG__62624.call(null,app__$1,options));\n} else {\n}\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\nvar G__62625 = app__$1;\nvar G__62626 = cljs.core.PersistentArrayMap.EMPTY;\napp__$1 = G__62625;\np__62241 = G__62626;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$sync_tx_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___62627 = arguments.length;\nvar i__4737__auto___62628 = (0);\nwhile(true){\nif((i__4737__auto___62628 < len__4736__auto___62627)){\nargs__4742__auto__.push((arguments[i__4737__auto___62628]));\n\nvar G__62629 = (i__4737__auto___62628 + (1));\ni__4737__auto___62628 = G__62629;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$applyTo = (function (seq62291){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62291));\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submit_sync_tx_BANG_(var_args){\nvar G__62307 = arguments.length;\nswitch (G__62307) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__62308,tx,options){\nvar map__62309 = p__62308;\nvar map__62309__$1 = (((((!((map__62309 == null))))?(((((map__62309.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62309.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62309):map__62309);\nvar app__$1 = map__62309__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62309__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__62311 = options;\nvar map__62311__$1 = (((((!((map__62311 == null))))?(((((map__62311.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62311.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62311):map__62311);\nvar options__$1 = map__62311__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62311__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62311__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62311__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__62305_SHARP_){\nreturn (((p1__62305_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__62305_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__62313 = cljs.core.set(refresh);\nvar G__62313__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__62313,follow_on_reads):G__62313);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__62313__$1,ref);\n} else {\nreturn G__62313__$1;\n}\n})();\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),node], 0));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__62315 = s;\nvar G__62315__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__62315,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__62315);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__62315__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__62315__$1;\n}\n}));\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_(app__$1)){\n} else {\nvar id__61609__auto___62661 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto___62661,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_(app__$1,options__$1);\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__61609__auto___62661,cljs.core.dec);\n}}\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * [app abort-id]\n * \n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_ = com.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_;\n/**\n * Installs synchronous transaction processing on a fulcro application.\n * \n *   ```\n *   (defonce app (stx/with-synchronous-transactions\n *               (app/fulcro-app {...})))\n *   ```\n * \n *   This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n *   can behave synchronously. This processing system\n *   preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n *   operations will exactly match what you'd see if using the standard tx processing.\n * \n *   The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n *   `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n *   `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n * \n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n *   is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n *   - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n *  `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.with_synchronous_transactions = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$with_synchronous_transactions(app__$1){\nvar remotes = cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1))));\nvar send_queues = cljs.core.zipmap(remotes,cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1((function (){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\n})));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"abort!\",\"com.fulcrologic.fulcro.algorithm/abort!\",1698846123),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_], 0)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),send_queues], null));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",78],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$in-transaction","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^K"],"~:excludes",["~#set",[]],"~:macros",["^ ","^H",["^ ","~:arglists",["~#list",[["~$app-sym","~$&","~$body"]]],"^8",91,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction","~:ns","^I","~:macro",true]],"^T","^I","~:op","^V","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^13","^?","^@","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^13","~$cljs.core","^19","^K","^K","~$goog","^1:","~$com.fulcrologic.fulcro.specs","^1;","^12","^12","~$m","~$com.fulcrologic.fulcro.mutations","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","^1<","^1<","~$s","^@","^10","^10","^1>","^1>","^17","^17","^15","^15","^@","^@"],"~:seen",["^N",["~:require","~:require-macros"]],"~:uses",["^ ","^J","^K","^L","^K"],"^1A",["^ ","^?","^@","^14","^15","^16","^17","^19","^19","^K","^K","~$m","^1<","^1<","^1<","~$s","^@","^17","^17","^15","^15","^@","^@","^I","^I"],"~:form",["^Q",["~$ns","^I","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ",["^Q",["^1A",["^I","~:refer",["^H"]]]],["^Q",["^1@",["^12","~:as","^11"],["^?","^1F","~$s"],["^1>","^1F","^1="],["^10","^1F","^["],["^1<","^1F","~$m"],["^17","^1F","^16"],["^1;"],["^K","^1E",["^J","^L"]],"^1;",["^13","^1F","^18"],["^15","^1F","^14"]]]]],"~:flags",["^ ","^1A",["^N",[]],"^1@",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^1:","^19","^12","^@","^1>","^10","^1<","^17","^1;","^K","^13","^15"]],"^V","^I","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],"~:compiled-at",1609098959742,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\n  \"A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing :refer [in-transaction]]))\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defonce apps-in-tx (atom {}))\n\n(declare run-queue! available-work?)\n\n#?(:clj\n   (defmacro in-transaction [app-sym & body]\n     `(let [id# (:com.fulcrologic.fulcro.application/id ~app-sym)]\n        (swap! apps-in-tx update id# (fnil inc 0))\n        (try\n          ~@body\n          (finally\n            (swap! apps-in-tx update id# dec))))))\n\n(defn top-level?\n  \"Returns true if the current thread is running non-nested transaction processing code.\"\n  [{:com.fulcrologic.fulcro.application/keys [id]}]\n  (= (-> apps-in-tx deref (get id 0)) 0))\n\n(defn swap-submission-queue! [app & args] (apply swap! (get-in app [::config ::submission-queue]) args))\n(defn reset-submission-queue! [app v] (reset! (get-in app [::config ::submission-queue]) v))\n(defn submission-queue [app] @(get-in app [::config ::submission-queue]))\n(defn swap-post-processing-steps! [app & args] (apply swap! (get-in app [::config ::post-processing-steps]) args))\n(defn reset-post-processing-steps! [app v] (reset! (get-in app [::config ::post-processing-steps]) v))\n(defn post-processing-steps [app] @(get-in app [::config ::post-processing-steps]))\n(defn swap-active-queue! [app & args] (apply swap! (get-in app [::config ::active-queue]) args))\n(defn reset-active-queue! [app v] (reset! (get-in app [::config ::active-queue]) v))\n(defn active-queue [app] @(get-in app [::config ::active-queue]))\n(defn swap-send-queue! [app remote & args] (apply swap! (get-in app [::config ::send-queues remote]) args))\n(defn reset-send-queue! [app remote v] (reset! (get-in app [::config ::send-queues remote]) v))\n(defn send-queue [app remote] @(get-in app [::config ::send-queues remote]))\n\n(defn run-after!\n  \"Add `f` as a function that will run after the current transaction has been fully processed.\"\n  [app f]\n  (swap-post-processing-steps! app (fnil conj []) f))\n\n(defn post-processing?\n  \"Is there post processing to do?\"\n  [app]\n  (boolean (seq (post-processing-steps app))))\n\n(defn do-post-processing!\n  \"Runs the queued post processing steps until the post-processing queue is empty.\"\n  [app]\n  (loop [steps (post-processing-steps app)]\n    (reset-post-processing-steps! app [])\n    (doseq [f steps]\n      (try\n        (f)\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Post processing step failed.\"))))\n    (when-let [next-steps (seq (post-processing-steps app))]\n      (recur next-steps))))\n\n(defn in-transaction?\n  \"Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\"\n  [{:com.fulcrologic.fulcro.application/keys [id] :as app}]\n  (not= 0 (get @apps-in-tx id 0)))\n\n(defn release-post-render-tasks!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [app]\n  (swap-submission-queue! app (fn [queue] (mapv (fn [node] (update node ::txn/options dissoc :after-render?)) queue))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::txn/keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (txn/build-env app tx-node {:dispatch        dispatch\n                                            :transacted-ast  original-ast-node\n                                            :mutation-ast    (get desired-ast-nodes remote)\n                                            :transmitted-ast (get transmitted-ast-nodes remote)\n                                            :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::txn/complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::txn/results ::txn/complete?] :as tx-element}]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn- node-index [queue txn-id]\n  (let [n   (count queue)\n        idx (reduce\n              (fn [idx {:keys [::txn/id]}]\n                (if (= id txn-id)\n                  (reduced idx)\n                  (inc idx)))\n              0\n              queue)]\n    (when (< idx n)\n      idx)))\n\n(defn distribute-results!\n  \"Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete.\"\n  [app txn-id ele-idx]\n  (let [active-queue (active-queue app)\n        idx          (node-index active-queue txn-id)\n        tx-node      (get active-queue idx)]\n    (swap-active-queue! app update-in [idx ::txn/elements ele-idx]\n      #(distribute-element-results! app tx-node %))))\n\n(defn record-result!\n  \"Deal with a network result on the given txn/element.\"\n  ([app txn-id ele-idx remote result result-key]\n   (let [active-queue (active-queue app)\n         txn-idx      (node-index active-queue txn-id)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::txn/id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (do\n         (swap-active-queue! app assoc-in [txn-idx ::txn/elements ele-idx result-key remote] result)\n         (distribute-results! app txn-id ele-idx)))))\n  ([app txn-id ele-idx remote result]\n   (record-result! app txn-id ele-idx remote result ::txn/results)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [app remote txn-id ele-idx]\n  (swap-send-queue! app remote (fn [old-queue]\n                                 (filterv (fn [{::txn/keys [id idx]}]\n                                            (not (and (= txn-id id) (= ele-idx idx)))) old-queue))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue.\"\n  [app {::txn/keys [id options] :as tx-node} ele-idx remote]\n  (let [update-handler (fn progress-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result ::txn/progress)\n                           (run-queue! app {})))\n        ast            (get-in tx-node [::txn/elements ele-idx ::txn/transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result)\n                           (remove-send! app remote id ele-idx)\n                           (run-queue! app {})))\n        send-node      {::txn/id             id\n                        ::txn/idx            ele-idx\n                        ::txn/ast            ast\n                        ::txn/options        options\n                        ::txn/active?        false\n                        ::txn/result-handler handler\n                        ::txn/update-handler update-handler}]\n    (if ast\n      (swap-send-queue! app remote (fnil conj []) send-node)\n      (handler {:status-code 200 :body {}}))\n    nil))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {::txn/keys [idx dispatch started?]}]\n  (let [remotes     (set/intersection (set (keys dispatch)) (txn/app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::txn/elements idx ::txn/started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::txn/elements idx] (fn [tx-element] (txn/compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::txn/elements idx ::txn/started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::txn/options ::txn/elements] :as tx-node}]\n  (reduce\n    (fn [node element]\n      (queue-element-sends! app node element))\n    tx-node\n    elements))\n\n(defn process-tx-node!\n  [app {:keys [::txn/options] :as tx-node}]\n  (if (txn/fully-complete? app tx-node)\n    nil\n    (->> tx-node\n      (txn/run-actions! app)\n      (queue-sends! app)\n      (txn/update-progress! app))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\"\n  [app]\n  (let [remote-names (txn/app->remote-names app)\n        operations   (atom [])]\n    (doseq [remote remote-names]\n      (let [send-queue (send-queue app remote)\n            [p serial] (txn/extract-parallel send-queue)\n            front      (first serial)]\n        ;; parallel items are removed from the queues, since they don't block anything\n        (doseq [item p]\n          (swap! operations conj #(txn/net-send! app item remote)))\n        ;; sequential items are kept in queue to prevent out-of-order operation\n        (if (::active? front)\n          (reset-send-queue! app remote serial)\n          (let [{::txn/keys [send-queue send-node]} (txn/combine-sends app remote serial)]\n            (when send-node\n              (swap! operations conj #(txn/net-send! app send-node remote)))\n            (reset-send-queue! app remote send-queue)))))\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, nested send queue updates in those handlers could confuse our notion of what's going on.\n    (doseq [op @operations]\n      (op))))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  (let [old-queue        (active-queue app)\n        new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           old-queue)\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (txn/app->remote-names app)\n        explicit-refresh (txn/requested-refreshes app new-queue)\n        remotes-active?  (txn/active-remotes new-queue remotes)]\n    (when (not= old-queue (active-queue app))\n      (log/error \"Old queue changed!\"))\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (reset-active-queue! app new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (process-send-queues! app)\n    nil))\n\n(defn available-work?\n  \"Returns true if the submission queue has work on it that can proceed without any restrictions.\"\n  [app]\n  (let [{ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))]\n    (boolean (seq ready))))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [app]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))\n        _                (reset-submission-queue! app (vec blocked))\n        dispatched-nodes (mapv #(txn/dispatch-elements % (txn/build-env app %) m/mutate) ready)]\n    (swap-active-queue! app (fnil into []) dispatched-nodes)\n    (process-queue! app)))\n\n(defn run-all-immediate-work!\n  \"Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests.\"\n  [app]\n  (try\n    (activate-submissions! app)\n    (catch #?(:cljs :default :clj Exception) e\n      (log/error e \"Error processing tx queue!\"))))\n\n(defn run-queue! [app {:keys [component synchronous?] :as options}]\n  (loop []\n    (run-all-immediate-work! app)\n    (when (available-work? app)\n      (recur)))\n  (if (and synchronous? component)\n    (comp/refresh-component! component)\n    (when-let [render! (ah/app-algorithm app :render!)]\n      (render! app options)))\n  (release-post-render-tasks! app)\n  (when (available-work? app)\n    (recur app {})))\n\n(defn sync-tx! [& args] (throw (ex-info \"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\" {})))\n\n(defn submit-sync-tx!\n  ([app tx]\n   (submit-sync-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx options]\n   (let [{:keys [refresh only-refresh ref] :as options} options\n         follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n         node            (txn/tx-node tx options)\n         accumulate      (fn [r items] (into (set r) items))\n         refresh         (cond-> (set refresh)\n                           (seq follow-on-reads) (into follow-on-reads)\n                           ref (conj ref))]\n     (swap-submission-queue! app (fnil conj []) node)\n     (swap! runtime-atom (fn [s] (cond-> s\n                                   ;; refresh sets are cumulative because rendering is debounced\n                                   (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                   (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n     (when-not (in-transaction? app)\n       (in-transaction app\n         (run-queue! app options)))\n     (::txn/id node))))\n\n(def abort!\n  \"[app abort-id]\n\n   Implementation of abort when using this tx processing\"\n  txn/abort!)\n\n(defn with-synchronous-transactions\n  \"Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \\\"remotes\\\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  [app]\n  (let [remotes     (-> app :com.fulcrologic.fulcro.application/runtime-atom deref\n                      :com.fulcrologic.fulcro.application/remotes keys)\n        send-queues (zipmap remotes (repeatedly #(atom [])))]\n    (-> app\n      (update :com.fulcrologic.fulcro.application/algorithms assoc\n        :com.fulcrologic.fulcro.algorithm/tx! submit-sync-tx!\n        :com.fulcrologic.fulcro.algorithm/abort! abort!)\n      (assoc ::config {::submission-queue      (atom [])\n                       ::post-processing-steps (atom [])\n                       ::active-queue          (atom [])\n                       ::send-queues           send-queues}))))","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.tx-processing","js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing.apps-in-tx","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","cljs.core.atom","p__61807","map__61808","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","id","cljs.core._EQ_","cljs.core/deref","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","seq61815","G__61816","cljs.core/first","cljs.core/next","self__4723__auto__","app","args","cljs.core/swap!","cljs.core.get_in","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","v","cljs.core/reset!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","seq61837","G__61839","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","seq61932","G__61933","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","seq61951","G__61952","G__61953","remote","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","f","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_","cljs.core.fnil","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","cljs.core/boolean","cljs.core/seq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","steps","seq__61982","chunk__61983","count__61984","i__61985","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","e61998","e61999","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","next-steps","p__62000","map__62001","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_","queue","cljs.core.mapv","node","cljs.core.update","cljs.core/dissoc","p__62003","map__62004","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","tx-node","results","dispatch","desired-ast-nodes","transmitted-ast-nodes","original-ast-node","tx-element","result","handler","env","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","e62012","p__62020","map__62021","complete?","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","cljs.core.reduce","new-element","cljs.core/keys","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","txn-id","n","idx","p__62028","map__62030","cljs.core/reduced","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","ele-idx","active-queue","p1__62038#","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_","cljs.core/update-in","G__62040","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","js/Error","result-key","txn-idx","not-found?","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_","old-queue","cljs.core/filterv","p__62056","map__62057","p__62067","map__62069","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","options","update-handler","id__61609__auto__","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/dec","G__62074","G__62075","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","ast","G__62080","G__62081","send-node","p__62085","map__62086","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","started?","remotes","clojure.set.intersection","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","to-dispatch","clojure.set.difference","cljs.core/contains?","updated-node","cljs.core.update_in","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","p__62093","map__62094","elements","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","element","p__62096","map__62097","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","remote-names","operations","seq__62125","chunk__62126","count__62127","i__62128","vec__62169","cljs.core.nth","vec__62178","send-queue","p","serial","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","front","seq__62172","chunk__62173","count__62174","i__62175","seq__62181","chunk__62182","count__62183","i__62184","item","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","map__62176","map__62196","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","seq__62200","chunk__62201","count__62202","i__62203","op","p__62209","map__62210","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","state-atom","runtime-atom","new-queue","temp__5733__auto__","new-node","cljs.core.conj","accumulate","r","items","cljs.core.into","explicit-refresh","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","remotes-active?","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","map__62216","ready","cljs.core/group-by","cljs.core.comp","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","map__62225","blocked","_","cljs.core/vec","dispatched-nodes","p1__62224#","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","com.fulcrologic.fulcro.mutations/mutate","cljs.core/into","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","e62227","p__62241","map__62253","component","synchronous?","and__4115__auto__","com.fulcrologic.fulcro.components/refresh-component!","render!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","seq62291","self__4724__auto__","cljs.core.ex_info","G__62307","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","p__62308","map__62309","tx","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_","map__62311","refresh","only-refresh","ref","follow-on-reads","p1__62305#","cljs.core.filter","cljs.core/Keyword","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","G__62313","s","G__62315","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","send-queues","cljs.core/zipmap","cljs.core.repeatedly","cljs.core.assoc"]],"~:used-vars",["^N",["~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","~$js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing.apps-in-tx","~$js/com.fulcrologic.fulcro.algorithms.tx-processing","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/dec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","~$cljs.core/count","~$js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$cljs.core/deref","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$js/com.fulcrologic.fulcro","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","~$cljs.core/mapv","~$cljs.core/not=","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","~$cljs.core/dissoc","~$cljs.core/Delay","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/reset!","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","~$cljs.core/update","~$js/com.fulcrologic","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","~$js/com","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","~$js/com.fulcrologic.fulcro.algorithms","~$cljs.core/ex-info","~$cljs.core/next","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/assoc","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","~$cljs.core/update-in","~$js/Error","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","~$cljs.core/boolean","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","~$cljs.core/inc","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1K","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^1:","^19","~$com.fulcrologic.fulcro.algorithms.do-not-use","^13","^15","^17"]]],["^1K","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.dom.HtmlElement"]]],["^1K","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$cljs.core.async.impl.protocols"]]],["^1K","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.labs.userAgent.util","~$goog.string"]]],["^1K","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.array","~$goog.asserts"]]],["^1K","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^43","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^46"]]],["^1K","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.Promise","~$goog.events.EventTarget"]]],["^1K","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^15"]]],["^1K","cljs/spec/gen/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$goog.Uri"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$clojure.string","^45"]]],["^1K","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47"]]],["^1K","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^45"]]],["^1K","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1K","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^44","~$goog.object","~$goog.string.internal"]]],["^1K","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4D"]]],["^1K","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47"]]],["^1K","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^15","^4@","^13","^4C","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1K","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$expound.paths","^@"]]],["^1K","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^44","~$goog.reflect","^45"]]],["^1K","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1K","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1K","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1K","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","^12","~$cljs.reader","~$cljs.tools.reader.edn","^4C","^45","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1K","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.async.FreeList"]]],["^1K","com/fulcrologic/fulcro/dom/events.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4A","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1K","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4B"]]],["^1K","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^45","^50"]]],["^1K","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.structs.Heap"]]],["^1K","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.Timer","^46","^47","^59","^4>","~$goog.json.hybrid","~$goog.log","^56","^55","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^4C","^45","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^4B"]]],["^1K","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^12","^@","^1>","^10","^1<","^17","^1;","^K","^13","^15"]]],["^1K","com/fulcrologic/fulcro/algorithms/transit.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1K","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4C"]]],["^1K","cljs/pprint.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","^45","^50"]]],["^1K","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^@","^12","^5L","^15","^13"]]],["^1K","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5>","^5?","^5@","^5=","^46","^45","^50"]]],["^1K","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$expound.problems","^@","^4@","^12","~$clojure.walk","~$expound.printer","~$expound.util","~$expound.ansi","^D"]]],["^1K","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1K","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.Disposable","^47","^51","~$goog.events.Event","^5;","^5<","^4C"]]],["^1K","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","^15","^@","~$expound.alpha"]]],["^1K","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.disposable.IDisposable"]]],["^1K","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@"]]],["^1K","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["8d0c12ef4685cbbcf28e21ed74f34deddf731743","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47"]]],["^1K","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^5H","~$goog.structs.Collection","^5I"]]],"~:SHADOW-TIMESTAMP",[1609098713000,1609098713000,1609098712000],["^5Y","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^5Z","~$module$node_modules$object_assign$index"]]],["^1K","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","^4Q"]]],["^1K","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.events.ListenableKey"]]],["^1K","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.html.trustedtypes","^4G","^4H","^4I","^4J"]]],["^1K","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^43","^4;","^49"]]],["^1K","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","~$goog.events.Listener","^4C"]]],["^1K","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$taoensso.truss.impl"]]],["^1K","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","com/fulcrologic/fulcro/algorithms/merge.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$com.fulcrologic.fulcro.algorithms.data-targeting","^17","^10","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^41","^13","^15","^5M"]]],["^1K","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^@"]]],["^1K","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^49","^4U"]]],["^1K","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","~$goog.html.SafeUrl","^4I","^4J","^4D"]]],["^1K","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^6;","^4F","~$goog.html.uncheckedconversions","^4I","^4D"]]],["^1K","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^@","^5Q"]]],["^1K","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^12"]]],["^1K","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4N","^4P","^4B"]]],["^1K","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1K","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^52","~$goog.structs.PriorityPool"]]],["^1K","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","~$goog.dom.TagName","~$goog.dom.tags","^6?","^6@","~$goog.html.SafeStyleSheet","^6;","^4F","^65","^4G","^4H","^4N","^4C","^4I","^4J","^4D"]]],["^1K","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4C"]]],["^1K","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46"]]],["^1K","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^44","^45"]]],["^1K","com/fulcrologic/fulcro/inspect/transit.cljs"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5K","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^15"]]],["^1K","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^4X","^6H"]]],["^1K","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","~$taoensso.encore"]]],["^1K","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4C","^5A","^4Z","^50"]]],["^1K","com/fulcrologic/fulcro/mutations.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^17","~$com.fulcrologic.fulcro.dom.events","^5L","^13","^15","^6L","^@","^41","^68","~$com.fulcrologic.fulcro.algorithms.merge","^10","^5M","^4@"]]],["^1K","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6E","~$goog.dom.safe","^6>","^6A","~$goog.math.Coordinate","~$goog.math.Size","^4C","^45","~$goog.string.Unicode","^4B"]]],["^1K","com/fulcrologic/fulcro/components.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4C","~$cljsjs.react","^13","^@","^15","^6L","^5O","^4@","^41","^6:","^10","^5L","^12"]]],["^1K","com/fulcrologic/fulcro/specs.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^@","^5L","^41","^13"]]],["^1K","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.debug.Error","^6P"]]],["^1K","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^43"]]],["^1K","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.debug.LogRecord"]]],["^1K","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","^45","^5H","^5I","^5J","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^5Y","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^5Z"]]],["^1K","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.Thenable","^47","^58","~$goog.async.run","^4V","^6V","~$goog.promise.Resolver"]]],["^1K","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^43","^48","^4;"]]],["^1K","cljs/spec/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4C","^5O","^D","^4@"]]],["^1K","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",[]]],["^1K","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.json"]]],["^1K","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^4C"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5>","^4@","~$cljs.tools.reader.impl.inspect"]]],["^1K","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5L","^F","^15"]]],["^1K","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$module$node_modules$react$index"]]],["^1K","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^45","^50"]]],["^1K","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^15","^5O"]]],["^1K","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^5U","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1K","com/fulcrologic/fulcro/inspect/diff.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^@"]]],["^5Y","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","6093d43b27c84de58b9ce55e3a930469339c9e54","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^5Z","^63"]]],["^1K","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6J","^6H","~$goog.math.Long"]]],["^1K","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^4C","~$goog.structs.Node"]]],["^1K","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47"]]],["^1K","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6Q","^6A","^4I","^4D"]]],["^1K","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6J","~$com.cognitect.transit.eq","^76"]]],["^1K","clojure/data.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^12"]]],["^1K","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4D"]]],["^1K","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","^@","^B","^12","^5Q","^5R","^4M","^5O","^4[","^45"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^12","^@","^10","^5M","^6:","^41","~$com.fulcrologic.fulcro.algorithms.scheduling","^1<","^17","^1;","^K","^5L","^13","^6L","^15"]]],["^1K","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6J"]]],["^1K","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","~$goog.debug.errorcontext","^4B"]]],["^1K","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","~$goog.math"]]],["^1K","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5?","^45","^50"]]],["^1K","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","^6=","^7;"]]],["^1K","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^59","~$goog.dom","^6E","^6Q","^6=","^6>","^4F","^4N","^4O","^4I"]]],["^1K","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","^6>","^6?","^6@","^6G","^6;","^4F","^4I","^4D"]]],["^1K","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","~$goog.debug","~$goog.debug.LogBuffer","^6W"]]],["^1K","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6K"]]],["^1K","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^5U","~$goog.events.EventId"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^5=","^5>","^5?"]]],["^1K","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^76","~$goog.math.Integer","^45","^4C","^46","^4?","^50"]]],["^1K","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6J","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^6H","^78","^4W","^4X"]]],["^1K","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","^65","^4I","^4J"]]],["^1K","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^7=","~$goog.debug.LogManager","^6W","~$goog.debug.Logger"]]],["^1K","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","^6@","^4C","^4I","^4J","^4D"]]],["^1K","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^7=","^4A","^5V","~$goog.events.EventType","^4Q","^4B"]]],["^1K","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4Q"]]],["^1K","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^4B"]]],["^1K","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19"]]],["^1K","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^46","^47","^45"]]],["^1K","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","^4J"]]],["^1K","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^4@","^6L","~$taoensso.timbre.appenders.core"]]],["^1K","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^7?"]]],["^1K","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^6J","^4X","~$com.cognitect.transit.handlers","^6H","^6K","^76"]]],["^1K","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^5S"]]],["^1K","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^15","^12","^13"]]],["^1K","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","~$goog.net.WrapperXmlHttpFactory","^5T"]]],["^1K","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["782fa9856915724e8a6de385c79c03201a8c8755","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","^13","^10","^4C","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^F","~$clojure.data","^6L","^15"]]],["^1K","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:"]]],["^1K","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^19","~$com.cognitect.transit","^6H","^78","^76"]]],["^1K","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^3Y",["^ ","^3Z",null,"^3[",["^N",[]],"^40",["^1:","^47","^4K","^45","^4B","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/alpha.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/channels.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1604678811000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1609098714000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/ioc_macros.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/dom/events.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/timers.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/buffers.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1609098714000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/mutations.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/data.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/gen/alpha.clj",1604678801000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/edn.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/main.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/reflect.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1609098711000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/ast.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/utils.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1609098711000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/env.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/pprint.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1604678794000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/gen/alpha.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1609098712000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1609098712000,"jar:file:/Users/chris/.m2/repository/com/fulcrologic/fulcro/3.4.10/fulcro-3.4.10.jar!/com/fulcrologic/fulcro/components.cljc",1609098713000,"jar:file:/Users/chris/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/mutex.clj",1604678793000,"jar:file:/Users/chris/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj",1604678801000,"jar:file:/Users/chris/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1604679236000,"jar:file:/Users/chris/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer.clj",1604678793000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",78],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^K","^L","^K"],"^M",["^N",[]],"^O",["^ ","^H",["^ ","^P",["^Q",[["^R","~$&","^S"]]],"^8",91,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^T","^U","^V","^I","^W",true]],"^T","^I","^Y",null,"^Z",["^ ","^[","^10","^11","^12","^13","^13","^?","^@","^14","^15","^16","^17","^18","^13","^19","^19","^K","^K","^1:","^1:","^1;","^1;","^12","^12","~$m","^1<","^1=","^1>","^1<","^1<","~$s","^@","^10","^10","^1>","^1>","^17","^17","^15","^15","^@","^@"],"^1?",["^N",["^1@","^1A"]],"~:shadow/js-access-global",["^N",["Error"]],"^1B",["^ ","^J","^K","^L","^K"],"~:defs",["^ ","~$distribute-element-results!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",171,"^9",7,"^:",171,"^;",34,"^P",["^Q",["~$quote",["^Q",[["~$app","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1F","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^T","^2N","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"~:method-params",["^Q",[["^9U","^9V","~$p__62020"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^9",1,"~:variadic?",false,"^8",171,"~:ret-tag",["^N",[null,"~$any"]],"^:",171,"~:max-fixed-arity",3,"~:fn-var",true,"^P",["^Q",["^9T",["^Q",[["^9U","^9V",["^ ","^9W",["^9X","^9Y"],"^1F","^9Z"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$top-level?",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",99,"^9",7,"^:",99,"^;",17,"^P",["^Q",["^9T",["^Q",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$id"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"^T","^2J","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^9[",["^Q",[["~$p__61807"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",99,"^:4","~$boolean","^:",99,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[[["^ ","^:9",["^::"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"~$with-synchronous-transactions",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",403,"^9",7,"^:",403,"^;",36,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"^T","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",36,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",403,"^:4",["^N",["~$clj","^:5"]],"^:",403,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$swap-post-processing-steps!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",107,"^9",7,"^:",107,"^;",34,"^P",["^Q",["^9T",["^Q",[["^9U","~$&","~$args"]]]]],"~:top-fn",["^ ","^:3",true,"~:fixed-arity",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]]],"^T","^3B","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"^:A",["^ ","^:3",true,"^:B",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]],"^9[",[["^Q",["^9U","^:@"]]],"^:1",null,"^:B",1,"^:2",["^Q",[null]],"^9",1,"^:3",true,"~:methods",[["^ ","^:B",1,"^:3",true,"~:tag","^:5"]],"^8",107,"^:4","^:5","^:",107,"^:6",1,"^:7",true,"^P",["^Q",[["^9U","~$&","^:@"]]]],"~$active-queue",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",112,"^9",7,"^:",112,"^;",19,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"^T","^2O","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",112,"^:4","^:5","^:",112,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"~$reset-send-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",114,"^9",7,"^:",114,"^;",24,"^P",["^Q",["^9T",["^Q",[["^9U","~$remote","~$v"]]]]]],"^T","^2G","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",24,"^9[",["^Q",[["^9U","^:G","~$v"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",114,"^:4",["^N",[null,"^:5"]],"^:",114,"^:6",3,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^:G","~$v"]]]]]],"~$apps-in-tx",["^ ","^T","^3K","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",86,"^9",1,"^:",86,"^;",20,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",86,"^9",10,"^:",86,"^;",20],"^:D","~$cljs.core/Atom"],"~$post-processing-steps",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",109,"^9",7,"^:",109,"^;",28,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"^T","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",109,"^:4","^:5","^:",109,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"~$queue-sends!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",267,"^9",7,"^:",267,"^;",19,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1F","^9V"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^T","^2D","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^9[",["^Q",[["^9U","~$p__62093"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",267,"^:4",["^N",[null,"^:5"]],"^:",267,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["^:L","^:M"],"^1F","^9V"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$submit-sync-tx!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",376,"^9",7,"^:",376,"^;",22,"^P",["^Q",["^9T",["^Q",[["^9U","~$tx"],[["^ ","^:9",["~$runtime-atom"],"^1F","^9U"],"^:P","~$options"]]]]],"^:A",["^ ","^:3",false,"^:B",3,"^:6",3,"^9[",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]],"^P",["^Q",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]]],"^:2",["^Q",[null,null]]]],"^T","^32","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^:A",["^ ","^:3",false,"^:B",3,"^:6",3,"^9[",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]],"^P",["^Q",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]]],"^:2",["^Q",[null,null]]],"^9[",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]],"^:1",null,"^:B",3,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^:C",[["^ ","^:B",2,"^:3",false,"^:D","^:5"],["^ ","^:B",3,"^:3",false,"^:D","^:5"]],"^8",376,"^:",376,"^:6",3,"^:7",true,"^P",["^Q",[["^9U","^:P"],[["^ ","^:9",["^:Q"],"^1F","^9U"],"^:P","^:R"]]]],"~$process-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",21,"^P",["^Q",["^9T",["^Q",[[["^ ","^:9",["~$state-atom","^:Q"],"^1F","^9U"]]]]]],"^6","Run through the active queue and do a processing step."],"^T","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^9[",["^Q",[["~$p__62209"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",310,"^:4","~$clj-nil","^:",310,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[[["^ ","^:9",["^:T","^:Q"],"^1F","^9U"]]]]]],"^6","Run through the active queue and do a processing step."],"~$remove-send!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",218,"^9",7,"^:",218,"^;",19,"^P",["^Q",["^9T",["^Q",[["^9U","^:G","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^T","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^9[",["^Q",[["^9U","^:G","^:X","^:Y"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",218,"^:4","^:5","^:",218,"^:6",4,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^:G","^:X","^:Y"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",250,"^9",7,"^:",250,"^;",27,"^P",["^Q",["^9T",["^Q",[["^9U","^9V",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$idx","~$dispatch","~$started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^T","^2[","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^9[",["^Q",[["^9U","^9V","~$p__62085"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",250,"^:4",["^N",[null,"^:5"]],"^:",250,"^:6",3,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^9V",["^ ","^:[",["^;0","^;1","^;2"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$run-after!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",117,"^9",7,"^:",117,"^;",17,"^P",["^Q",["^9T",["^Q",[["^9U","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"^T","^2S","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^9[",["^Q",[["^9U","~$f"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",117,"^:4","^:5","^:",117,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"~$run-all-immediate-work!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",352,"^9",7,"^:",352,"^;",30,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"^T","^3T","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",352,"^:",352,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"~$record-result!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",204,"^9",7,"^:",204,"^;",21,"^P",["^Q",["^9T",["^Q",[["^9U","^:X","^:Y","^:G","~$result","~$result-key"],["^9U","^:X","^:Y","^:G","^;7"]]]]],"^6","Deal with a network result on the given txn/element.","^:A",["^ ","^:3",false,"^:B",6,"^:6",6,"^9[",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]],"^P",["^Q",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]]],"^:2",["^Q",[null,null]]]],"^T","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^:A",["^ ","^:3",false,"^:B",6,"^:6",6,"^9[",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]],"^P",["^Q",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]]],"^:2",["^Q",[null,null]]],"^9[",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]],"^:1",null,"^:B",6,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^:C",[["^ ","^:B",6,"^:3",false,"^:D",["^N",["^:5","^:V"]]],["^ ","^:B",5,"^:3",false,"^:D",["^N",["^:5","^:V"]]]],"^8",204,"^:",204,"^:6",6,"^:7",true,"^P",["^Q",[["^9U","^:X","^:Y","^:G","^;7","^;8"],["^9U","^:X","^:Y","^:G","^;7"]]],"^6","Deal with a network result on the given txn/element."],"~$process-tx-node!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",277,"^9",7,"^:",277,"^;",23,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["^:L"],"^1F","^9V"]]]]]]],"^T","^36","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^9[",["^Q",[["^9U","~$p__62096"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",277,"^:4",["^N",[null,"^:5","^:V"]],"^:",277,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["^:L"],"^1F","^9V"]]]]]]],"~$add-send!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^:[",["^::","^:R"],"^1F","^9V"],"^:Y","^:G"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"^T","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",16,"^9[",["^Q",[["^9U","~$p__62067","^:Y","^:G"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",225,"^:4","^:V","^:",225,"^:6",4,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^:[",["^::","^:R"],"^1F","^9V"],"^:Y","^:G"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"~$do-post-processing!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",127,"^9",7,"^:",127,"^;",26,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"^T","^3:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",127,"^:4","^:V","^:",127,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"~$distribute-results!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",194,"^9",7,"^:",194,"^;",26,"^P",["^Q",["^9T",["^Q",[["^9U","^:X","^:Y"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"^T","^25","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^9[",["^Q",[["^9U","^:X","^:Y"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",194,"^:4","^:5","^:",194,"^:6",3,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^:X","^:Y"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"~$post-processing?",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",122,"^9",7,"^:",122,"^;",23,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Is there post processing to do?"],"^T","^2M","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",122,"^:4","^:<","^:",122,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Is there post processing to do?"],"~$process-send-queues!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",286,"^9",7,"^:",286,"^;",27,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"^T","^2;","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",286,"^:4","^:V","^:",286,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"~$swap-active-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",110,"^9",7,"^:",110,"^;",25,"^P",["^Q",["^9T",["^Q",[["^9U","~$&","^:@"]]]]],"^:A",["^ ","^:3",true,"^:B",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]]],"^T","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",25,"^:A",["^ ","^:3",true,"^:B",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]],"^9[",[["^Q",["^9U","^:@"]]],"^:1",null,"^:B",1,"^:2",["^Q",[null]],"^9",1,"^:3",true,"^:C",[["^ ","^:B",1,"^:3",true,"^:D","^:5"]],"^8",110,"^:4","^:5","^:",110,"^:6",1,"^:7",true,"^P",["^Q",[["^9U","~$&","^:@"]]]],"~$sync-tx!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",374,"^9",7,"^:",374,"^;",15,"^P",["^Q",["^9T",["^Q",[["~$&","^:@"]]]]],"^:A",["^ ","^:3",true,"^:B",0,"^:6",0,"^9[",[["^Q",["^:@"]]],"^P",["^Q",[["~$&","^:@"]]],"^:2",["^Q",[null]]]],"^T","^3C","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",15,"^:A",["^ ","^:3",true,"^:B",0,"^:6",0,"^9[",[["^Q",["^:@"]]],"^P",["^Q",[["~$&","^:@"]]],"^:2",["^Q",[null]]],"^9[",[["^Q",["^:@"]]],"^:1",null,"^:B",0,"^:2",["^Q",[null]],"^9",1,"^:3",true,"^:C",[["^ ","^:B",0,"^:3",true,"^:D","~$ignore"]],"^8",374,"^:4","^:5","^:",374,"^:6",0,"^:7",true,"^P",["^Q",[["~$&","^:@"]]]],"~$in-transaction?",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",140,"^9",7,"^:",140,"^;",22,"^P",["^Q",["^9T",["^Q",[[["^ ","^:9",["^::"],"^1F","^9U"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"^T","^3I","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^9[",["^Q",[["~$p__62000"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",140,"^:4","^:<","^:",140,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[[["^ ","^:9",["^::"],"^1F","^9U"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"~$available-work?",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",334,"^9",7,"^:",334,"^;",22,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"^T","^3E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",334,"^:4","^:<","^:",334,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"~$reset-post-processing-steps!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",108,"^9",7,"^:",108,"^;",35,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"^T","^3J","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",35,"^9[",["^Q",[["^9U","~$v"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",108,"^:4",["^N",[null,"^:5"]],"^:",108,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"~$release-post-render-tasks!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",145,"^9",7,"^:",145,"^;",33,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^T","^2Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",33,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",145,"^:4","^:5","^:",145,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$abort!",["^ ","^T","^39","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",397,"^9",1,"^:",397,"^;",12,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",397,"^9",6,"^:",397,"^;",12],"^6","[app abort-id]\n\n   Implementation of abort when using this tx processing"],"~$send-queue",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",115,"^9",7,"^:",115,"^;",17,"^P",["^Q",["^9T",["^Q",[["^9U","^:G"]]]]]],"^T","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^9[",["^Q",[["^9U","^:G"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",115,"^:4","^:5","^:",115,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^:G"]]]]]],"~$node-index",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",182,"^9",8,"^:",182,"^;",18,"~:private",true,"^P",["^Q",["^9T",["^Q",[["~$queue","^:X"]]]]]],"^;L",true,"^T","^1Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",18,"^9[",["^Q",[["^;M","^:X"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",182,"^:4",["^N",[null,"^:5","^:V"]],"^:",182,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^;M","^:X"]]]]]],"~$reset-active-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",111,"^9",7,"^:",111,"^;",26,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"^T","^3<","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^9[",["^Q",[["^9U","~$v"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",111,"^:4",["^N",[null,"^:5"]],"^:",111,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"~$submission-queue",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",106,"^9",7,"^:",106,"^;",23,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"^T","^21","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",106,"^:4","^:5","^:",106,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]]],"~$swap-submission-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",104,"^9",7,"^:",104,"^;",29,"^P",["^Q",["^9T",["^Q",[["^9U","~$&","^:@"]]]]],"^:A",["^ ","^:3",true,"^:B",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]]],"^T","^20","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",29,"^:A",["^ ","^:3",true,"^:B",1,"^:6",1,"^9[",[["^Q",["^9U","^:@"]]],"^P",["^Q",[["^9U","~$&","^:@"]]],"^:2",["^Q",[null]]],"^9[",[["^Q",["^9U","^:@"]]],"^:1",null,"^:B",1,"^:2",["^Q",[null]],"^9",1,"^:3",true,"^:C",[["^ ","^:B",1,"^:3",true,"^:D","^:5"]],"^8",104,"^:4","^:5","^:",104,"^:6",1,"^:7",true,"^P",["^Q",[["^9U","~$&","^:@"]]]],"~$run-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",361,"^9",7,"^:",361,"^;",17,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["~$component","~$synchronous?"],"^1F","^:R"]]]]]]],"^T","^1[","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^9[",["^Q",[["^9U","~$p__62241"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",361,"^:4","^:V","^:",361,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U",["^ ","^9W",["^;R","^;S"],"^1F","^:R"]]]]]]],"~$activate-submissions!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",340,"^9",7,"^:",340,"^;",28,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^T","^23","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^9[",["^Q",[["^9U"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",340,"^:4","^:V","^:",340,"^:6",1,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$reset-submission-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",105,"^9",7,"^:",105,"^;",30,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"^T","^1W","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^9[",["^Q",[["^9U","~$v"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",105,"^:4",["^N",[null,"^:5"]],"^:",105,"^:6",2,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","~$v"]]]]]],"~$swap-send-queue!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",113,"^9",7,"^:",113,"^;",23,"^P",["^Q",["^9T",["^Q",[["^9U","^:G","~$&","^:@"]]]]],"^:A",["^ ","^:3",true,"^:B",2,"^:6",2,"^9[",[["^Q",["^9U","^:G","^:@"]]],"^P",["^Q",[["^9U","^:G","~$&","^:@"]]],"^:2",["^Q",[null]]]],"^T","^3M","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^:A",["^ ","^:3",true,"^:B",2,"^:6",2,"^9[",[["^Q",["^9U","^:G","^:@"]]],"^P",["^Q",[["^9U","^:G","~$&","^:@"]]],"^:2",["^Q",[null]]],"^9[",[["^Q",["^9U","^:G","^:@"]]],"^:1",null,"^:B",2,"^:2",["^Q",[null]],"^9",1,"^:3",true,"^:C",[["^ ","^:B",2,"^:3",true,"^:D","^:5"]],"^8",113,"^:4","^:5","^:",113,"^:6",2,"^:7",true,"^P",["^Q",[["^9U","^:G","~$&","^:@"]]]],"~$dispatch-result!",["^ ","^9S",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",151,"^9",7,"^:",151,"^;",23,"^P",["^Q",["^9T",["^Q",[["^9U","^9V",["^ ","^:[",["~$results","^;1","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1F","^9Z"],"^:G"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^T","^29","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^9[",["^Q",[["^9U","^9V","~$p__62003","^:G"]]],"^:1",null,"^:2",["^Q",[null,null]],"^9",1,"^:3",false,"^8",151,"^:4",["^N",["^:>","^:5"]],"^:",151,"^:6",4,"^:7",true,"^P",["^Q",["^9T",["^Q",[["^9U","^9V",["^ ","^:[",["^;Y","^;1","^;Z","^;[","^<0"],"^1F","^9Z"],"^:G"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."]],"^1A",["^ ","^?","^@","^14","^15","^16","^17","^19","^19","^K","^K","~$m","^1<","^1<","^1<","~$s","^@","^17","^17","^15","^15","^@","^@","^I","^I"],"~:cljs.analyzer/constants",["^ ","^1?",["^N",["~:only-refresh","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","^9X","~:transacted-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:refresh","~:ref","~:synchronous?","~:render!","~:transmitted-ast","~:com.fulcrologic.fulcro.algorithm/abort!","~:com.fulcrologic.fulcro.algorithm/tx!","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config","~:status-code","~:after-render?","~:component","^:M","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:com.fulcrologic.fulcro.application/id","~:dispatch","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues","~:result","~:com.fulcrologic.fulcro.application/runtime-atom","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?","~:dispatch-key","~:com.fulcrologic.fulcro.application/algorithms","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?","~:error","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:body","^:L","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~:auto","~:p","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^9Y","~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^<G","^<A","^<X","^<5","^<7","^<K","^<T","~:p","^<Y","^:L","^<C","^9X","^<N","^=4","^=6","^<Z","^<U","^<H","^<6","^<J","^<>","^<L","^<P","^9Y","^<R","^:M","^=3","^<V","^<8","^=2","^=5","^<9","^<B","^<W","^<O","^<S","^<4","^=0","^<E","^<M","^=1","^<I","^<D","^<<","^<=","^<:","^<3","^<;","^<F","^<[","^<Q","^<@","^<?"]],"^1G",["^ ","^1A",["^N",[]],"^1@",["^N",[]]],"^1H",["^ "],"^1I",["^1:","^19","^12","^@","^1>","^10","^1<","^17","^1;","^K","^13","^15"]],"^V","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^3X",[["^=:","~:static-fns"],true,["^=:","~:shadow-tweaks"],null,["^=:","~:source-map-inline"],null,["^=:","~:elide-asserts"],false,["^=:","~:optimize-constants"],null,["^=:","^1N"],null,["^=:","~:external-config"],null,["^=:","~:tooling-config"],null,["^=:","~:emit-constants"],null,["^=:","~:load-tests"],null,["^=:","~:form-size-threshold"],null,["^=:","~:data-readers"],null,["^=:","~:infer-externs"],"^<Y",["^=:","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^=:","~:fn-invoke-direct"],null,["^=:","~:source-map"],"/dev/null"]]]