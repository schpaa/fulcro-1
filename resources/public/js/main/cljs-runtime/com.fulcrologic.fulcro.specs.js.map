{"version":3,"sources":["com/fulcrologic/fulcro/specs.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/uuid?","cljs.core/int?","cljs.core/inst?","cljs.core/vector?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__59147","cljs.core/map?","cljs.core/set?","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__59148","i__14221__auto__","v__14222__auto__","cljs.core.nth","cljs.core/keyword?","G__59155","G__59158","G__59163","G__59166","cljs.core/contains?","G__59216","G__59218","cljs.core/fn?","cljs.core/boolean?","G__59281","G__59357","G__59360","G__59361","G__59363","com.fulcrologic.fulcro.algorithms.do-not-use/atom?","cljs.spec.alpha/nilable-impl","G__59369","edn-query-language.core/ident?","cljs.spec.alpha/or-spec-impl","G__59374","G__59380","G__59394","G__59397","G__59413","G__59414","G__59415","cljs.core/pos-int?","G__59416","G__59520","G__59588"],"sourcesContent":["(ns com.fulcrologic.fulcro.specs\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [>def]]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [edn-query-language.core :as eql]))\n\n;; ================================================================================\n;; Transaction Specs\n;; ================================================================================\n\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/id uuid?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/idx int?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/created inst?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/started inst?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/finished inst?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/tx vector?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/abort-id any?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/options (s/keys\n                                                                 :opt [:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id]\n                                                                 :opt-un [:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id]))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/started? set?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/complete? set?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/results (s/map-of keyword? any?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/progress (s/map-of keyword? any?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes (s/map-of keyword? :edn-query-language.ast/node))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/dispatch map?) ; a tree is also a node\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/ast :edn-query-language.ast/node)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node :com.fulcrologic.fulcro.algorithms.tx-processing/ast)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes (s/map-of keyword? :edn-query-language.ast/node))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/tx-element (s/keys\n                                                                    :req [:com.fulcrologic.fulcro.algorithms.tx-processing/idx\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/started?\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/complete?\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/results\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/dispatch]\n                                                                    :opt [:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\n                                                                          :com.fulcrologic.fulcro.algorithms.tx-processing/progress]))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/elements (s/coll-of :com.fulcrologic.fulcro.algorithms.tx-processing/tx-element :kind vector?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\n  (s/keys :req [:com.fulcrologic.fulcro.algorithms.tx-processing/id\n                :com.fulcrologic.fulcro.algorithms.tx-processing/created\n                :com.fulcrologic.fulcro.algorithms.tx-processing/options\n                :com.fulcrologic.fulcro.algorithms.tx-processing/tx\n                :com.fulcrologic.fulcro.algorithms.tx-processing/elements]\n    :opt [:com.fulcrologic.fulcro.algorithms.tx-processing/started\n          :com.fulcrologic.fulcro.algorithms.tx-processing/finished]))\n\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler fn?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler fn?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/active? boolean?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/parallel? boolean?)\n\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/send-node\n  (s/keys\n    :req [:com.fulcrologic.fulcro.algorithms.tx-processing/id\n          :com.fulcrologic.fulcro.algorithms.tx-processing/idx\n          :com.fulcrologic.fulcro.algorithms.tx-processing/ast\n          :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\n          :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\n          :com.fulcrologic.fulcro.algorithms.tx-processing/active?]\n    :opt [:com.fulcrologic.fulcro.algorithms.tx-processing/options]))\n\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue (s/coll-of :com.fulcrologic.fulcro.algorithms.tx-processing/tx-node :kind vector?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/active-queue (s/coll-of :com.fulcrologic.fulcro.algorithms.tx-processing/tx-node :kind vector?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/send-queue (s/coll-of :com.fulcrologic.fulcro.algorithms.tx-processing/send-node :kind vector?))\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/send-queues (s/map-of :com.fulcrologic.fulcro.application/remote-name :com.fulcrologic.fulcro.algorithms.tx-processing/send-queue))\n\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled? boolean?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled? boolean?)\n(>def :com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled? boolean?)\n\n;; ================================================================================\n;; Application Specs\n;; ================================================================================\n(>def :com.fulcrologic.fulcro.application/state-atom futil/atom?)\n(>def :com.fulcrologic.fulcro.application/app-root (s/nilable any?))\n(>def :com.fulcrologic.fulcro.application/runtime-atom futil/atom?)\n\n;; indexing-related\n(>def :com.fulcrologic.fulcro.application/ident->components (s/map-of eql/ident? set?))\n(>def :com.fulcrologic.fulcro.application/prop->classes (s/map-of (s/or :keyword keyword? :ident eql/ident?) set?))\n(>def :com.fulcrologic.fulcro.application/class->components (s/map-of keyword? set?))\n(>def :com.fulcrologic.fulcro.application/idents-in-joins (s/coll-of eql/ident? :kind set?))\n(>def :com.fulcrologic.fulcro.application/indexes (s/keys :opt-un [:com.fulcrologic.fulcro.application/ident->components\n                                                                   :com.fulcrologic.fulcro.application/keyword->components\n                                                                   :com.fulcrologic.fulcro.application/idents-in-joins\n                                                                   :com.fulcrologic.fulcro.application/class->components]))\n\n(>def :com.fulcrologic.fulcro.application/remote-name keyword?)\n(>def :com.fulcrologic.fulcro.application/remote-names (s/coll-of keyword? :kind set?))\n(>def :com.fulcrologic.fulcro.application/remotes (s/map-of :com.fulcrologic.fulcro.application/remote-name map?))\n(>def :com.fulcrologic.fulcro.application/active-remotes (s/coll-of :com.fulcrologic.fulcro.application/remote-name :kind set?))\n(>def :com.fulcrologic.fulcro.application/basis-t pos-int?)\n(>def :com.fulcrologic.fulcro.application/last-rendered-state map?)\n(>def :com.fulcrologic.fulcro.application/runtime-state (s/keys :req [:com.fulcrologic.fulcro.application/app-root\n                                                                      :com.fulcrologic.fulcro.application/indexes\n                                                                      :com.fulcrologic.fulcro.application/remotes\n                                                                      :com.fulcrologic.fulcro.application/basis-t\n                                                                      :com.fulcrologic.fulcro.application/last-rendered-state\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\n                                                                      :com.fulcrologic.fulcro.algorithms.tx-processing/send-queues]))\n(>def :com.fulcrologic.fulcro.algorithm/tx! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/optimized-render! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/render! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/merge* fn?)\n(>def :com.fulcrologic.fulcro.algorithm/remote-error? fn?)\n(>def :com.fulcrologic.fulcro.algorithm/schedule-render! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/global-eql-transform (s/nilable fn?))\n(>def :com.fulcrologic.fulcro.algorithm/shared-fn (s/nilable fn?))\n(>def :com.fulcrologic.fulcro.algorithm/global-error-action (s/nilable fn?))\n(>def :com.fulcrologic.fulcro.algorithm/default-result-action! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/index-root! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/index-component! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/drop-component! fn?)\n(>def :com.fulcrologic.fulcro.algorithm/props-middleware (s/nilable fn?))\n(>def :com.fulcrologic.fulcro.algorithm/render-middleware (s/nilable fn?))\n\n(>def :com.fulcrologic.fulcro.application/algorithms\n  (s/keys\n    :req [:com.fulcrologic.fulcro.algorithm/default-result-action!\n          :com.fulcrologic.fulcro.algorithm/drop-component!\n          :com.fulcrologic.fulcro.algorithm/index-component!\n          :com.fulcrologic.fulcro.algorithm/index-root!\n          :com.fulcrologic.fulcro.algorithm/merge*\n          :com.fulcrologic.fulcro.algorithm/optimized-render!\n          :com.fulcrologic.fulcro.algorithm/remote-error?\n          :com.fulcrologic.fulcro.algorithm/render!\n          :com.fulcrologic.fulcro.algorithm/schedule-render!\n          :com.fulcrologic.fulcro.algorithm/tx!]\n    :opt [:com.fulcrologic.fulcro.algorithm/global-eql-transform\n          :com.fulcrologic.fulcro.algorithm/global-error-action\n          :com.fulcrologic.fulcro.algorithm/props-middleware\n          :com.fulcrologic.fulcro.algorithm/render-middleware\n          :com.fulcrologic.fulcro.algorithm/shared-fn]))\n\n(>def :com.fulcrologic.fulcro.application/app (s/keys :req\n                                                [:com.fulcrologic.fulcro.application/state-atom\n                                                 :com.fulcrologic.fulcro.application/algorithms\n                                                 :com.fulcrologic.fulcro.application/runtime-atom]))\n\n"]}