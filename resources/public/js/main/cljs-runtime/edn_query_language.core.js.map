{"version":3,"sources":["edn_query_language/core.cljc"],"mappings":"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","names":["edn-query-language.core/*shallow-conversion*","js/goog.define","edn-query-language.core/INCLUDE_SPECS","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/any?","cljs.spec.alpha.tuple_impl","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.every_impl","G__48074","cljs.core/map?","cljs.core._EQ_","cljs.core/bounded-count","i__14221__auto__","v__14222__auto__","cljs.core.nth","G__48076","or__4126__auto__","cljs.spec.alpha/MAX_INT","cljs.core/nat-int?","cljs.spec.alpha/and-spec-impl","cljs.core/seq?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/symbol?","G__48103","G__48105","cljs.core/vector?","G__48110","cljs.core/coll?","p1__48048#","cljs.spec.alpha/map-spec-impl","G__48112","cljs.core/contains?","x","cljs.core/every?","p1__48049#","cljs.core.comp","js/edn-query-language","js/edn-query-language.core","js/edn-query-language.core.node-type","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__48121","cljs.core/MultiFn","cljs.core.symbol","edn-query-language.core/node-type","_","G__48122","G__48127","p1__48051#","G__48164","cljs.core/first","p1__48055#","p1__48056#","G__48185","G__48286","p1__48057#","G__48385","p1__48058#","cljs.spec.alpha.spec_impl","cljs.core/set","cljs.core/keys","cljs.core/methods","cljs.spec.alpha.multi_spec_impl","edn-query-language.core/mark-meta","source","target","G__48415","cljs.core/meta","cljs.core.assoc","edn-query-language.core/symbol->ast","k","edn-query-language.core/keyword->ast","p__48419","vec__48420","edn-query-language.core/union-entry->ast","v","component","cljs.core.merge","cljs.core.into","cljs.core.map","edn-query-language.core/expr->ast","edn-query-language.core/union->ast","m","p__48433","vec__48434","edn-query-language.core/call->ast","f","args","call","ast","cljs.core.update_in","cljs.core/merge","G__48437","cljs.core/Symbol","edn-query-language.core/query->ast","query","edn-query-language.core/query->ast1","query-expr","edn-query-language.core/join->ast","join","vec__48446","query-root?","type","cljs.core.ex_info","p__48452","vec__48453","edn-query-language.core/ident->ast","id","ref","cljs.core/Keyword","edn-query-language.core/wrap-expr","root?","expr","cljs.core/with-meta","G__48456","cljs.core/List","edn-query-language.core/parameterize","params","cljs.core/empty?","var_args","G__48465","edn-query-language.core/ast->expr","js/Error","p__48466","map__48467","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","edn_query_language.core.ast__GT_expr","ast-meta","unparse?","G__48471","p1__48459#","cljs.core.vary_meta","cljs.core/assoc","map__48474","key","query-root","and__4115__auto__","cljs.core.not_EQ_","cljs.core.dissoc","map__48481","children","query-meta","cljs.core/count","G__48483","p__48484","map__48485","union-key","G__48487","p1__48460#","G__48488","p1__48462#","edn-query-language.core/ast->query","query-ast","<>","edn-query-language.core/ident?","edn-query-language.core/focus-subquery-union*","sub-ast","s-index","p1__48494#","cljs.core/PersistentVector","cljs.core.reduce","p__48495","map__48496","union-entry","temp__5733__auto__","sub","cljs.core.conj","edn-query-language.core/focus-subquery*","q-index","p1__48498#","p__48505","map__48506","focus","edn-query-language.core/focus-subquery","sub-query","p__48509","map__48510","edn-query-language.core/transduce-children","xform","node","G__48512","cljs.core/seq","cljs.core.update","p1__48508#","edn-query-language.core/union-children?","G__48519","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","edn-query-language.core/update-property-param","seq48521","G__48522","cljs.core/next","G__48523","self__4723__auto__","vec__48528","p","edn-query-language.core/merge-asts","qa","qb","p__48539","map__48540","item-b","vec__48543","idx","item","p1__48538#","p2__48537#","cljs.core.keep_indexed","cljs.core/reduced","cljs.core/assoc-in","cljs.core/conj","edn-query-language.core/merge-queries","G__48548","p__48554","map__48556","edn-query-language.core/mask-query*","source-ast","mask-ast","p__48558","map__48559","mask-children","mask-node","source-node","cljs.core.filter","edn-query-language.core/mask-query","mask","edn-query-language.core/normalize-query-variables","G__48565","p1__48564#","p__48568","vec__48569","edn-query-language.core/query-id","cljs.core/hash","edn-query-language.core/query->shallow-ast","*shallow-conversion*-orig-val__48572","*shallow-conversion*-temp-val__48573","cljs.spec.alpha/fspec-impl","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.core/fn?","cljs.spec.alpha/rep-impl"],"sourcesContent":["(ns edn-query-language.core\n  (:refer-clojure :exclude [ident?])\n  (:require [clojure.spec.alpha :as s]))\n\n(def ^:dynamic *shallow-conversion*\n  \"Dynamic var.  When bound to true in the current thread calls to query->ast will no go past the\n  first level of children.  This is useful when you just want the AST for one layer of a query.\"\n  false)\n\n#?(:clj  (def INCLUDE_SPECS true)\n   :cljs (goog-define INCLUDE_SPECS true))\n\n(when INCLUDE_SPECS\n  ; tag::specs[]\n  (s/def ::property keyword?)\n  (s/def ::special-property #{'*})\n  (s/def ::ident-value any?)\n  (s/def ::ident (s/tuple ::property ::ident-value))\n  (s/def ::join-key (s/or :prop ::property, :ident ::ident, :param-exp ::join-key-param-expr))\n  (s/def ::join (s/map-of ::join-key ::join-query, :count 1, :conform-keys true))\n  (s/def ::union (s/map-of ::property ::query, :min-count 1, :conform-keys true))\n  (s/def ::recursion-depth nat-int?)\n  (s/def ::recursion (s/or :depth ::recursion-depth, :unbounded #{'...}))\n\n  (s/def ::join-query\n    (s/or :query ::query\n          :union ::union\n          :recursion ::recursion))\n\n  (s/def ::params\n    map?)\n\n  (s/def ::param-expr-key\n    (s/or :prop ::property\n          :join ::join\n          :ident ::ident))\n\n  (s/def ::param-expr\n    (s/and seq? (s/cat :expr ::param-expr-key :params (s/? ::params))))\n\n  (s/def ::join-key-param-key (s/or :prop ::property :ident ::ident))\n\n  (s/def ::join-key-param-expr\n    (s/and seq? (s/cat :expr ::join-key-param-key :params (s/? ::params))))\n\n  (s/def ::mutation-key symbol?)\n\n  (s/def ::mutation-expr\n    (s/and seq? (s/cat :mutate-key ::mutation-key :params (s/? ::params))))\n\n  (s/def ::mutation-join\n    (s/map-of ::mutation-expr ::query :count 1 :conform-keys true))\n\n  (s/def ::mutation\n    (s/or :mutation ::mutation-expr\n          :mutation-join ::mutation-join))\n\n  (s/def ::query-expr\n    (s/or :prop ::property\n          :join ::join\n          :ident ::ident\n          :mutation ::mutation\n          :param-exp ::param-expr\n          :special ::special-property))\n\n  (s/def ::query\n    (s/coll-of ::query-expr :kind vector?))\n  ; end::specs[]\n\n  ;; ast specs\n\n  (s/def :edn-query-language.ast/query ::join-query)\n  (s/def :edn-query-language.ast/key (s/or :prop ::property :ident ::ident :sym symbol?))\n  (s/def :edn-query-language.ast/dispatch-key (s/or :prop ::property :sym symbol?))\n  (s/def :edn-query-language.ast/union-key ::property)\n\n  (s/def :edn-query-language.ast/children\n    (s/coll-of :edn-query-language.ast/node))\n\n  (s/def :edn-query-language.ast/root\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/children])\n      #(= :root (:type %))\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmulti node-type :type)\n\n  (defmethod node-type nil [_]\n    (s/keys :req-un [:edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :prop [_]\n    (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :join [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key :edn-query-language.ast/query] :opt-un [:edn-query-language.ast/children])\n      #(if (-> % :query first (= :recursion)) % (if (contains? % :children) % false))\n      (fn [x] (every? (comp #(contains? #{:prop :join :union :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :union [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/query :edn-query-language.ast/children])\n      #(every? (comp #{:union-entry} :type) (:children %))))\n\n  (defmethod node-type :union-entry [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/union-key :edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :call [_]\n    (s/and (s/keys\n             :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key ::params]\n             :opt-un [:edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :root [_]\n    (s/spec :edn-query-language.ast/root))\n\n  (s/def :edn-query-language.ast/type (set (keys (methods node-type))))\n  (s/def :edn-query-language.ast/node (s/multi-spec node-type :type)))\n\n;; library\n\n(declare expr->ast)\n\n(defn- mark-meta [source target]\n  (cond-> target\n    (meta source) (assoc :meta (meta source))))\n\n(defn symbol->ast [k]\n  {:dispatch-key k\n   :key          k})\n\n(defn keyword->ast [k]\n  {:type         :prop\n   :dispatch-key k\n   :key          k})\n\n(defn union-entry->ast [[k v]]\n  (let [component (-> v meta :component)]\n    (merge\n      {:type      :union-entry\n       :union-key k\n       :query     v\n       :children  (into [] (map expr->ast) v)}\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn union->ast [m]\n  {:type     :union\n   :query    m\n   :children (into [] (map union-entry->ast) m)})\n\n(defn call->ast [[f args :as call]]\n  (if (= 'quote f)\n    (assoc (expr->ast args) :target (or (-> call meta :target) :remote))\n    (let [ast (update-in (expr->ast f) [:params] merge (or args {}))]\n      (cond-> (mark-meta call ast)\n        (symbol? (:dispatch-key ast)) (assoc :type :call)))))\n\n(defn query->ast\n  \"Convert a query to its AST representation.\"\n  [query]\n  (let [component (-> query meta :component)]\n    (merge\n      (mark-meta query\n        {:type     :root\n         :children (into [] (map expr->ast) query)})\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn query->ast1\n  \"Call query->ast and return the first children.\"\n  [query-expr]\n  (-> (query->ast query-expr) :children first))\n\n(defn join->ast [join]\n  (let [query-root? (-> join meta :query-root)\n        [k v] (first join)\n        ast         (expr->ast k)\n        type        (if (= :call (:type ast)) :call :join)\n        component   (-> v meta :component)]\n    (merge ast\n           (mark-meta join {:type type :query v})\n           (when-not (nil? component)\n             {:component component})\n           (when query-root?\n             {:query-root true})\n      (when-not (or (number? v) (= '... v) *shallow-conversion*)\n             (cond\n               (vector? v) {:children (into [] (map expr->ast) v)}\n               (map? v) {:children [(union->ast v)]}\n               :else (throw\n                       (ex-info (str \"Invalid join, \" join)\n                         {:type :error/invalid-join})))))))\n\n(defn ident->ast [[k id :as ref]]\n  {:type         :prop\n   :dispatch-key k\n   :key          ref})\n\n(defn expr->ast\n  \"Given a query expression convert it into an AST.\"\n  [x]\n  (cond\n    (symbol? x) (symbol->ast x)\n    (keyword? x) (keyword->ast x)\n    (map? x) (join->ast x)\n    (vector? x) (ident->ast x)\n    (seq? x) (call->ast x)\n    :else (throw\n            (ex-info (str \"Invalid expression \" x)\n              {:type :error/invalid-expression}))))\n\n(defn wrap-expr [root? expr]\n  (if root?\n    (with-meta\n      (cond-> expr (keyword? expr) list)\n      {:query-root true})\n    expr))\n\n(defn parameterize [expr params]\n  (if-not (empty? params)\n    (list expr params)\n    (list expr)))\n\n(defn ast->expr\n  \"Given a query expression AST convert it back into a query expression.\"\n  ([ast]\n   (ast->expr ast false))\n  ([{:keys [type component] ast-meta :meta :as ast} unparse?]\n   (if (= :root type)\n     (cond-> (into (with-meta [] ast-meta) (map #(ast->expr % unparse?)) (:children ast))\n       (not (nil? component)) (vary-meta assoc :component component))\n     (let [{:keys [key query query-root params]} ast]\n       (wrap-expr query-root\n         (if (and params (not= :call type))\n           (let [expr (ast->expr (dissoc ast :params) unparse?)]\n             (parameterize expr params))\n           (let [key (if (= :call type) (parameterize key params) key)]\n             (if (or (= :join type)\n                     (and (= :call type) (:children ast)))\n               (if (and (not= '... query) (not (number? query))\n                        (or (true? unparse?)\n                            (= :call type)))\n                 (let [{:keys [children]} ast\n                       query-meta (meta query)]\n                   (if (and (== 1 (count children))\n                            (= :union (:type (first children)))) ;; UNION\n                     (with-meta\n                       {key (into (cond-> (with-meta {} ast-meta)\n                                    component (vary-meta assoc :component component))\n                                  (map (fn [{:keys [union-key children component]}]\n                                         [union-key\n                                          (cond-> (into [] (map #(ast->expr % unparse?)) children)\n                                            (not (nil? component)) (vary-meta assoc :component component))]))\n                                  (:children (first children)))}\n                       ast-meta)\n                     (with-meta\n                       {key (cond-> (into (with-meta [] query-meta) (map #(ast->expr % unparse?)) children)\n                              (not (nil? component)) (vary-meta assoc :component component))}\n                       ast-meta)))\n                 (with-meta {key query} ast-meta))\n               key))))))))\n\n(defn ast->query [query-ast]\n  \"Given an AST convert it back into a query expression.\"\n  (as-> (ast->expr query-ast true) <>\n    (if (vector? <>)\n      <>\n      [<>])))\n\n(defn ident?\n  \"Check if x is a EQL ident.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))\n       (= 2 (count x))))\n\n;; query processing helpers\n\n(declare focus-subquery*)\n\n(defn focus-subquery-union*\n  [query-ast sub-ast]\n  (let [s-index (into {} (map #(vector (:union-key %) %)) (:children sub-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [union-key] :as union-entry}]\n          (if-let [sub (get s-index union-key)]\n            (conj children (focus-subquery* union-entry sub))\n            (conj children union-entry)))\n        []\n        (:children query-ast)))))\n\n(defn focus-subquery*\n  \"Internal implementation of focus-subquery, you can use this function directly if\n  you want to send AST in and get AST out (instead of query in / query out).\"\n  [query-ast sub-ast]\n  (let [q-index (into {} (map #(vector (:key %) %)) (:children query-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [key type] :as focus}]\n          (if-let [source (get q-index key)]\n            (cond\n              (= :join type (:type source))\n              (conj children (focus-subquery* source focus))\n\n              (= :union type (:type source))\n              (conj children (focus-subquery-union* source focus))\n\n              :else\n              (conj children source))\n            children))\n        []\n        (:children sub-ast)))))\n\n(defn focus-subquery\n  \"Given a query, focus it along the specified query expression.\n\n  Examples:\n    (focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n    => [{:foo [:bar]} :woz]\"\n  [query sub-query]\n  (let [query-ast (query->ast query)\n        sub-ast   (query->ast sub-query)]\n    (ast->expr (focus-subquery* query-ast sub-ast) true)))\n\n(defn transduce-children\n  \"Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n  on a whole AST. Each iteration of the transducer will get a single AST node to process.\n\n  ```\n  (->> [:a {:b [:c :d]} :e]\n       (p/query->ast)\n       (p/transduce-children (remove (comp #{:a :c} :key)))\n       (p/ast->query))\n  ; => [{:b [:d]} :e]\n  ```\"\n  [xform {:keys [children] :as node}]\n  (cond-> node\n    (seq children)\n    (update :children\n      (fn [children]\n        (into [] (comp xform (map #(transduce-children xform %))) children)))))\n\n(defn union-children?\n  \"Given an AST point, check if the children is a union query type.\"\n  [ast]\n  (= :union (some-> ast :children first :type)))\n\n(defn update-property-param\n  \"Add property param, eg:\n\n  ```\n  (p/update-property-param :keyword assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\"})\n  (p/update-property-param '(:keyword {:param \\\"prev\\\"}) assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\" :param \\\"prev\\\"})\n  ```\n  \"\n  [x f & args]\n  (if (seq? x)\n    (let [[k p] x]\n      (list k (apply f p args)))\n\n    (list x (apply f {} args))))\n\n(defn merge-asts\n  \"Merges two ast's.\"\n  [qa qb]\n  (reduce (fn [ast {:keys [key type params] :as item-b}]\n            (if-let [[idx item] (->> ast :children\n                                     (keep-indexed #(if (-> %2 :key (= key)) [%1 %2]))\n                                     first)]\n              (cond\n                (or (= :join (:type item) type)\n                    (= :prop (:type item) type))\n                (if (= (:params item) params)\n                  (update-in ast [:children idx] merge-asts item-b)\n                  (reduced nil))\n\n                (and (= :prop (:type item))\n                     (= :join type))\n                (assoc-in ast [:children idx] item-b)\n\n                (= :call type)\n                (reduced nil)\n\n                :else ast)\n              (update ast :children conj item-b)))\n    qa\n    (:children qb)))\n\n(defn merge-queries\n  \"Merges two queries\"\n  [qa qb]\n  (some-> (merge-asts (query->ast qa) (query->ast qb))\n    (ast->query)))\n\n(defn mask-query* [{:keys [children] :as source-ast} mask-ast]\n  (reduce\n    (fn [ast {mask-children :children\n              :keys         [key]\n              :as           mask-node}]\n      (if-let [source-node (->> children (filter (comp #{key} :key)) first)]\n        (if (and (seq (:children source-node)) (seq mask-children))\n          (update ast :children conj (mask-query* source-node mask-node))\n          (update ast :children conj source-node))\n        ast))\n    (assoc source-ast :children [])\n    (:children mask-ast)))\n\n(defn mask-query\n  \"Given a source EQL query, use a mask EQL query to filter which elements to pick from\n  the source. Params will be maintaned from the source, params in mask are ignored.\"\n  [source mask]\n  (let [source-ast (query->ast source)\n        mask-ast   (query->ast mask)]\n    (ast->query (mask-query* source-ast mask-ast))))\n\n(defn normalize-query-variables\n  \"Converts ident values and param values to ::p/var.\"\n  [query]\n  (->> (query->ast query)\n       (transduce-children\n         (map (fn [x]\n                (cond-> x\n                  (ident? (:key x))\n                  (assoc :key [(first (:key x)) ::var])\n\n                  (:params x)\n                  (update :params #(into {} (map (fn [[k _]] [k ::var])) %))))))\n       (ast->query)))\n\n(defn query-id\n  \"Generates a consistent hash from the query. The query first goes to a process to remove any\n  variables from idents and params, then we get the Clojure hash of it. You can use this to save\n  information about a query that can be used to correlate with the query later.\"\n  [query]\n  (hash (normalize-query-variables query)))\n\n(defn query->shallow-ast\n  \"Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n   a large query.\"\n  [query]\n  (binding [*shallow-conversion* true]\n    (query->ast query)))\n\n(when INCLUDE_SPECS\n  (s/fdef query->ast\n    :args (s/cat :query (s/nilable ::query))\n    :ret :edn-query-language.ast/root)\n\n  (s/fdef query->ast1\n    :args (s/cat :query ::query)\n    :ret (s/nilable :edn-query-language.ast/node))\n\n  (s/fdef ast->query\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret ::query)\n\n  (s/fdef ident?\n    :args (s/cat :x any?)\n    :ret boolean?)\n\n  (s/fdef focus-subquery\n    :args (s/cat :query ::query :sub-query ::query)\n    :ret ::query)\n\n  (s/fdef transduce-children\n    :args (s/cat :xform fn? :node :edn-query-language.ast/node)\n    :ret :edn-query-language.ast/node)\n\n  (s/fdef union-children?\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret boolean?)\n\n  (s/fdef update-property-param\n    :args (s/cat :x (s/or :property ::property\n                          :expr ::param-expr)\n                 :f fn?\n                 :args (s/* any?))\n    :ret ::param-expr)\n\n  (s/fdef merge-asts\n    :args (s/cat :qa :edn-query-language.ast/node, :qb :edn-query-language.ast/node)\n    :ret (s/nilable :edn-query-language.ast/node))\n\n  (s/fdef merge-queries\n    :args (s/cat :qa (s/nilable ::query), :qb (s/nilable ::query))\n    :ret (s/nilable ::query)))\n"]}