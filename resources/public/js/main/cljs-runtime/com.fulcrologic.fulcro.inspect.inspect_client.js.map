{"version":3,"sources":["com/fulcrologic/fulcro/inspect/inspect_client.cljc"],"mappings":";AAeS;;;AAAA,AAAAA,AAAA,AAAA,AAAaC;AAGtB,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AAErB,AAAA,AACA,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAACF;;AACpB,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACJ;;AACrB,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAQ;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACN;;AAChB,AAAA,AAAKO;AAEL,AAAA,AAAAd,AAAAC,AAAAC,AAAAC,AAAAC,AAAAW;AAAA;AAAA,AAAA,AAASC,AAA0B,AAACC,AAAW,AAAA,AAACC;;AAChD,AAAA,AAAMC,AAAcC,AAAKC;AAAzB,AACW,AAAA,AACE,AAAA,AAACE,AAAWP,AAASI,AAAKC;AAD5B,AAAAC,AAEkBE;AAFlB,AAGI,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AAEf;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAACC,AAAQ,AAAA,AAAKD;;AAEhB,AAAA;;;;AAAA,AAAAE,AAAOE;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOD,AAGHE,AAAIC;AAHR,AAGW,AAAA,AAACC,AAAOF,AAAIC;;;AAHvB,AAAA,AAAA,AAAOH,AAIHE,AAAIC,AAAEE;AAJV,AAMY,AAAAC,AAAI,AAACC,AAASL,AAAI,AAAAM,AAAQL;AAAR,AAAA,AAAA,AAAAK,AAAA;AAAA;;AAAU,AAAAA,AAACC;;;AAA7B,AAAA,AAAAH;AAAAA;;AAAqCD;;;;AANjD,AAAA,AAAA,AAAOL;;AAAP,AAWA,AAAA,AAAMU,AAAWC;AAAjB,AAAsB,AAAAC,AAAQD;AAARC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAA2DC;;;AACjF,AAAA,AAAMC,AAAcH;AAApB,AAAyB,AAAAI,AAAQJ;AAAR,AAAA,AAAA,AAAAI,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AACzB,AAAA,AAAMC,AAAYL;AAAlB,AAAuB,AAAAM,AAAQN;AAAR,AAAA,AAAA,AAAAM,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AACvB,AAAA,AAAMC,AAAUP;AAAhB,AAAqB,AAAAQ,AAAQR;AAARQ,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAA2DN;AAA3D,AAAA,AAAA,AAAAM,AAAA;AAAA;;AAAiE,AAAAA,AAACC,AAAIvC;;;AAC3F,AAAA,AAAMwC,AAASV;AAAf,AAAoB,AAAAW,AAAQ,AAACR,AAAaH;AAAtBW,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAA2BT;AAA3B,AAAA,AAAA,AAAAS,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AACpB,AAAA,AAAMC,AAAQZ;AAAd,AAAmB,AAAAa,AAAQ,AAACd,AAAUC;AAAnB,AAAA,AAAA,AAAAa,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AACnB,AAAA,AAAMC,AAAed;AAArB,AAA0B,AAAA,AAAwCA;;AAClE,AAAA,AAAMe,AAAoBC;AAA1B,AAAqC,AAAMA;AAAN,AAAgB,AAAAC,AAAQ,AAAA,AAACxB,AAAOuB;AAAhB,AAAA,AAAA,AAAAC,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AAAhB;;;AACrC,AAAA,AAAMC,AAAgBlB,AAAImB,AAAGC;AAA7B,AACE,AAAMC,AAAI,AAAA,AAACC,AAAiBtB;AAA5B,AACE,AAACqB,AAAAA,AAAAA,AAAIrB,AAAAA,AAAImB,AAAAA,AAAGC,AAAAA;;AAEhB,AAAA,AAAKG;AAEL;;;AAAA,AAAMC,AAEHxB;AAFH,AAGE,AAAAL,AAAI,AAAA,AAAA,AAAIK,AAAI,AAACG,AAAcD;AAA3B,AAAA,AAAAP;AAAAA;;AAAA;;;AAEF;;;AAAA,AAAM8B,AAEHzB,AAAI0B;AAFP,AAGE,AAAMC,AAAI,AAACH,AAAmBxB;AAA9B,AACE,AAAC4B,AAAM,AAACzB,AAAaH,AACnB,AAAK6B;AAAL,AACE,AAAMC,AAAe,AAAA,AAAWD;AAC1BE,AAAe,AAAA,AAAA,AAAA,AACE,AAAA,AAAMD,AACN,AAAG,AAACE,AAAMF,AAASP,AAAkB,AAAA,AAACU,AAAOH,AACvCA;;AACvBI,AAAe,AAAA,AAAA,AAAA,AAACC,AAAKJ,AAAuBJ,AACAD;AANlD,AAOE,AAAA,AAAA,AAACU,AAAMP,AACE,AAAA,AAAKF,AACFO;;;AAClBP;;AAEJ,AAAA,AAAMU,AAAmBrC,AAAIsC;AAA7B,AACE,AAAMR,AAAQ,AAAA,AAAA,AAAA,AAAI9B,AAAIG,AAAaD;AAC7BqC,AAAQ,AAACC,AAAM,AAACC,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAlC,AAAAkC,AAAA,AAAMI;AAAN,AAAqB,AAACC,AAAEV,AAAGS;AAC3B,AAACE,AAAInB;AAH5B,AAIES;;AAGJ;;;AAAA,AAAMW,AAEHlD,AAAImD,AAAUC;AAFjB,AAIK,AAAMC,AAAS,AAAC9C,AAASP;AACnBsD,AAAS,AAAC7B,AAAsBzB,AAAIoD;AAD1C,AAEE,AAAA,AAAA,AAAA,AAAC7E,AAAiDL,AAAgCmF,AACAC;;AAEzF,AAAA,AAAMC,AAAYC;AAAlB,AACW,AAAAC,AAAQD;AAARC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAc,AAAAA,AAAA,AAAA,AAACC;AAAf,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAA4EE;;;AAEvF,AAAA,AAAMC;AAAN,AAEK,AAAAC,AAAA,AAAAxF,AAAA;AAAA,AAAA,AAAAyF,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAAG,AAAAH,AAAA,AACmC7F;;AADnC,AAAA,AAAA8F,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAK,AAAAL,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAA,AAAA,AAAAO,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAU,AAAA,AAAAC,AAAAL,AAAA,AAAA;AAAAM,AAAA,AAAAD,AAAAL,AAAA,AAAA;AAAAO,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAC;AAAAC,AAAA,AAAAP,AAAAE,AAAAG;AAAAG,AAAA,AAAAC,AAAAL,AAAAG;AAAAG,AAAA,AAAAF,AAEsE2B;AAFtExB,AAAA,AAAAD;AAAAE,AAAA,AAAAH,AAAAN,AAAAQ;AAAAE,AAAA,AAAAD,AAE6BsB;AAF7BpB,AAAA,AAAAD,AAAA,AAEkBoB;AAFlB3C,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAA2B,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA2B,AAAA,AAAA5B,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAA9B;;AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAC;AAAA,AAAA,AAAA,AAAAkC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAArD,AAAA,AAAAgB,AAAA;AAAA,AAAAsC,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAA,AAAA/D,AAAA,AAAAyB,AAAA;;AAAAsC;AAAA,AAAAH;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAhC;;;;AAAAgC;;;;;AAAAhC;;;;;AAAAA;;;;;;;;;AAAAuC,AAAA,AAAAC,AAAA,AAAA1C;AAAA,AAAA,AAAA0C,AAAAC,AAAA,AAAA7C;;AAAA4C;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA3C;;AAKL,AAAA,AAAMkD;AAAN,AAEK,AAAA,AAAmBH,AACjB,AAASpD;AAAT,AACE,AACE,AAAA,AAAK,AAAY,AAAUA,AAAOoD,AAChC,AAAA,AAAA,AAAClD,AAAoBF;AACvB,AAAAwD,AAAwB,AAACzD,AAAWC;AAApC,AAAA,AAAAwD,AAAAA,AAACC,AAAAA,AAAAA;;AAHH,AAKE,AAAA,AAAK,AAAY,AAAUzD,AAAOoD,AAChC,AAAA,AAAA,AAAClD,AAAoBF;AACvB,AAACI;;AAPH;;;AAFJ;;AAYL,AAAA,AAAA,AAAAzE,AAAMgI;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA7H,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM6H,AACFhG;AADJ,AAEG,AAAA,AAAA,AAAA,AAAC5C,AAAkF4C;;;AAFtF,AAAA,AAAA,AAAMgG,AAGFC,AAAIjG;AAHR,AAIG,AAAA,AAAA,AAAA,AAAA,AAAC5C,AAAsF6I,AAA8BjG;;;AAJxH,AAAA,AAAA,AAAMgG;;AAAN,AAMA,AAAA,AAAME,AAAahE;AAAnB,AACE,AAACzB,AAAM3D,AAAMqJ,AAAOjE;;AACpB,AAAA,AAAA,AAAC9E,AAAiDL,AAAamF;;AAEjE,AAAA,AAAMkE,AAAgBlE;AAAtB,AACE,AAAA,AAAA,AAAC9E,AAAoDL,AAAamF;;AAuBpE,AAAA,AAAMmE,AAAexH,AAAIyH,AAAOC,AAAMC;AAAtC,AAEK,AAAMC,AAAS,AAAA3C;AACT5B,AAAS,AAAC9C,AAASP;AADzB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6H,AAAA,AAAA5E,AAAA,AAAA6E,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA4D9J,AAAamF,AACmBoE,AACAC,AACAE,AACAD;;AAEpG,AAAA,AAAMM,AAAgBjI,AAAIyH,AAAOC,AAAMQ;AAAvC,AAEK,AAAMC,AAAS,AAAAlD;AACT5B,AAAS,AAAC9C,AAASP;AADzB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6H,AAAA,AAAA5E,AAAA,AAAA6E,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA4D9J,AAAamF,AACqBqE,AACAS,AACAD;;AAEtG,AAAA,AAAME,AAAcpI,AAAI0H,AAAMW;AAA9B,AAEK,AAAMF,AAAS,AAAAlD;AACT5B,AAAS,AAAC9C,AAASP;AADzB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6H,AAAA,AAAA5E,AAAA,AAAA6E,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA4D9J,AAAamF,AACqBqE,AACAS,AACAE;;AAGtG,AAAA,AAAAC,AAAMrB;AAAN,AAAA,AAAAsB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3F,AAAA,AAAA2F,AAAA,AAAA,AAAA,AAAA,AAAA1F,AAAAC,AAAAyF,AAAAA;AAAAA,AAAqDC;AAArD,AAAA/H,AAAA8H,AAAA,AAAsC/J;AAAtC,AAAAiC,AAAA8H,AAAA,AAA2C9J;AAA3C,AACE,AAAAI,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAuCyJ;AAAvC,AAAA,AAAA;;AAEG,AAAAC,AAAMjK;AAANiK,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AACE,AAAAE,AAAA,AAAA1F,AAAY,AAAA,AAAA/C,AAACmJ,AAAMpL;AAAnB2K,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9I;AAAR,AAAA,AACE,AAAM0B,AAAa,AAAC3B,AAAUC;AACxBsD,AAAa,AAAC7B,AAAsBzB,AAAI0B;AACxC4H,AAAa,AAAC5I,AAAQV;AAF5B,AAGE,AAAA,AAAA,AAAA,AAAA,AAACzB,AACEL,AAA4C,AAACqC,AAASP,AACV,AAACY,AAAOZ,AACR,AAACuJ,AAAQ,AAAA,AAACE;AAADD;AAAA,AAAO,AAAA,AAAAA,AAACE;;AAHhE,AAAA,AAAA,AAAA,AAGgFC,AAC/B,AAACC,AAAKN,AACAhG,AACA5B;;AAV3D;AAAA,AAAAiH;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAA9F,AAAA0F;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAA,AAAA,AAAAC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAjH,AAAAiH;AAAA;;;;;;;AAAA,AAAA,AAAAzG,AAAAmG,AAAQ3I;AAAR,AAAA,AACE,AAAM0B,AAAa,AAAC3B,AAAUC;AACxBsD,AAAa,AAAC7B,AAAsBzB,AAAI0B;AACxC4H,AAAa,AAAC5I,AAAQV;AAF5B,AAGE,AAAA,AAAA,AAAA,AAAA,AAACzB,AACEL,AAA4C,AAACqC,AAASP,AACV,AAACY,AAAOZ,AACR,AAACuJ,AAAQ,AAAA,AAACE;AAADD;AAAA,AAAO,AAAA,AAAAA,AAACE;;AAHhE,AAAA,AAAA,AAAA,AAGgFC,AAC/B,AAACC,AAAKN,AACAhG,AACA5B;;AAV3D;AAAA,AAAA,AAAA0H,AAAAT;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;AAHJ;AAgBE,AAAAkB,AAC6CpL;AAD7CoL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA,AAAAhH,AAAAC,AAAA+G,AAAAA;AAAA,AAAApJ,AAAAoJ,AAAA,AAAkCC;AAAlC,AAAArJ,AAAAoJ,AAAA,AACkCxG;AADlC,AAEE,AAAA0G,AAAa,AAAA,AAAA7J,AAACO,AAAKxC,AAAMoF;AAAzB,AAAA,AAAA0G;AAAA,AAAAA,AAAS/J;AAAT,AACE,AAAMgK,AAAQ,AAAA,AAAC1I,AAAiBtB;AAAhC,AACE,AAAI8J;AACF,AAAMA,AAAa,AAAC1H,AAAM0H,AAAa5L,AAAamF;AAApD,AACE,AAAC4G,AAAO,AAAC5J,AAAWL,AAAK8J;;AAF7B;;AAGA,AAAAI,AAASlK;AAATmK,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACH,AAAAA,AAAAA;;AACH,AAAAnL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAsCsE;AAAtC,AAAA,AAAA;;;;AAxBN;AA4BE,AAAA+G,AAC6C3L;AAD7C2L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAC,AAAAsH,AAAAA;AAAA,AAAA3J,AAAA2J,AAAA,AAAkC9H;AAAlC,AAAA7B,AAAA2J,AAAA,AAAqCC;AAArC,AAAA5J,AAAA2J,AAAA,AACkC/G;AADlC,AAEE,AAAAiH,AAAmB,AAAA,AAAApK,AAACO,AAAKxC,AAAMoF;AAA/B,AAAA,AAAAiH;AAAA,AAAAA,AAAetK;AAAf,AAAA,AAAAsK,AAC+B,AAACjI,AAAkBrC,AAAIsC;AADtD,AAAA,AAAAgI;AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3H,AAAA,AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAA1H,AAAAC,AAAAyH,AAAAA;AAAA,AAAA9J,AAAA8J,AAAA,AACuBC;AADvB,AAAA,AAEE,AAAMC,AAAY,AAACpI,AAAkBrC,AAAIqK;AACnCK,AAAY,AAAA,AAAA,AAAMD,AAAY,AAACE,AAAUF,AAAYD;AAD3D,AAEE,AAAA,AAACjM,AACC,AAAAqM,AAAA,AAAA,AAAS1M,AAA8BmF,AACAf;AADvCsI,AAAA,AAAAA,AAEEF,AAAK,AAAAE,AAAA,AAAA,AAACxI,AAAkCsI,AAClBL;AAHxB,AAAA,AAIE,AAACQ,AAAIH;AAAM,AAAAE,AAAA,AAACxI,AAAmCoI;;AAJjDI;;;;AALN;;;AAAA;;;;AA9BJ;AA2CE,AAAAE,AAC6CrM;AAD7CqM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlI,AAAA,AAAAkI,AAAA,AAAA,AAAA,AAAA,AAAAjI,AAAAC,AAAAgI,AAAAA;AAAA,AAAArK,AAAAqK,AAAA,AAAkC3J;AAAlC,AAAAV,AAAAqK,AAAA,AAAqCC;AAArC,AAAAtK,AAAAqK,AAAA,AACkCzH;AADlC,AAEE,AAAA0G,AAAa,AAAA,AAAA7J,AAACO,AAAKxC,AAAMoF;AAAzB,AAAA,AAAA0G;AAAA,AAAAA,AAAS/J;AAAT,AACE,AAAI+K;AACF,AAAA,AAAA,AAAC7J,AAAelB,AAAImB,AAAS4J;;AAC7B,AAAA,AAAC7J,AAAelB,AAAImB;;;AACtB,AAAAtC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAsCsE;AAAtC,AAAA,AAAA;;;;AAjDN;AAoDE,AAAA,AAAAnD,AAAKxC;AACH,AAAAsN,AAAA,AAAA9K,AAAExC;AAAF,AAAA,AAAAsN,AAAAA,AAAAA,AAAavM,AAAAA;;AACb,AAAA,AACE,AAAA,AAACyM;AADH,AAAAD,AAEkBE;AAFlB,AAGI,AAAAtM,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;;AAzDR;AA4DE,AAAAuL,AAAuD7L;AAAvD,AAAA,AAAA6L;AAAA,AAAAc,AAAAd;AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxI,AAAA,AAAAwI,AAAA,AAAA,AAAA,AAAA,AAAAvI,AAAAC,AAAAsI,AAAAA;AAAA,AAAA3K,AAAA2K,AAAA,AAA4C/H;AAA5C,AAAA,AAAAiH,AACiC,AAAAe,AAAA,AAAAnL,AAASjC;AAAT,AAAA,AAAA,AAAAoN,AAAA;AAAA;;AAAe,AAAAA,AAAC5K,AAAI4C;;;AADrD,AAAA,AAAAiH;AAAA,AAAAA,AACgBtK;AADhB,AAAA,AAAAsK,AAEiC,AAACjI,AAAkBrC,AAAI,AAAA,AAAiCvB;AAFzF,AAAA,AAAA6L;AAAA,AAAAA,AAEgBgB;AAFhB,AAAA,AAAAhB,AAGiC,AAAA,AAAClI,AAAMpC,AAAmD,AAACrC,AAAK2N;AAHjG,AAAA,AAAAhB;AAAA,AAAAA,AAGgBiB;AAHhB,AAAA,AAAAjB,AAIiC,AAAA,AAAChJ,AAAiBtB;AAJnD,AAAA,AAAAsK;AAAA,AAAAA,AAIgBN;AAJhB,AAKE,AACE,AAAAwB,AAASD;AAATE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACzB,AAAAA,AAAAA;;AACH,AAAAnL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAAF,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;;AAnEJ;AAsEE,AAAAuL,AAAyD7L;AAAzD,AAAA,AAAA6L;AAAA,AAAAoB,AAAApB;AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9I,AAAA,AAAA8I,AAAA,AAAA,AAAA,AAAA,AAAA7I,AAAAC,AAAA4I,AAAAA;AAAA,AAAAjL,AAAAiL,AAAA,AAA8CrI;AAA9C,AAAA,AAAAiH,AAC0B,AAAAqB,AAAA,AAAAzL,AAASjC;AAAT,AAAA,AAAA,AAAA0N,AAAA;AAAA;;AAAe,AAAAA,AAAClL,AAAI4C;;;AAD9C,AAAA,AAAAiH;AAAA,AAAAA,AACkBtK;AADlB,AAAA,AAAAsK,AAE0B,AAAA,AAAChJ,AAAiBtB;AAF5C,AAAA,AAAAsK;AAAA,AAAAA,AAEkBN;AAFlB,AAAA,AAGE,AAAA4B,AAAS5L;AAAT6L,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAAC7B,AAAAA,AAAAA;;AAHH;;;AAAA;;;AAAA;;;;AAtEF;AA4EE,AAAA8B,AAGkDrN;AAHlDqN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlJ,AAAA,AAAAkJ,AAAA,AAAA,AAAA,AAAA,AAAAjJ,AAAAC,AAAAgJ,AAAAA;AAAA,AAAArL,AAAAqL,AAAA,AACOG;AADP,AAAAxL,AAAAqL,AAAA,AAAuCC;AAAvC,AAAAtL,AAAAqL,AAAA,AAA6CE;AAA7C,AAAAvL,AAAAqL,AAAA,AAEuCI;AAFvC,AAAAzL,AAAAqL,AAAA,AAGuCzI;AAHvC,AAIE,AAAAiH,AAA4B,AAAA,AAAApK,AAACO,AAAKxC,AAAMoF;AAAxC,AAAA,AAAAiH;AAAA,AAAAA,AAAkBtK;AAAlB,AAAA,AAAAsK,AAC4B,AAAC7J,AAAI,AAACC,AAAQV,AAAKiM;AAD/C,AAAA,AAAA3B;AAAA,AAAAA,AACkB7C;AADlB,AAAA,AAAA6C,AAE4B,AAAA,AAAI7C;AAFhC,AAAA,AAAA6C;AAAA,AAAAA,AAEkB6B;AAFlB,AAAA,AAAA7B,AAG4B,AAAC+B,AAAe,AAAA1M,AAAIoM;AAAJ,AAAA,AAAApM;AAAAA;;AAAUqM;;;AAHtD,AAAA,AAAA1B;AAAA,AAAAA,AAGkB8B;AAHlB,AAAA,AAAA9B,AAI4B,AAACgC;AAJ7B,AAAA,AAAAhC;AAAA,AAAAA,AAIkB5C;AAJlB,AAAA,AAKE,AAACF,AAAcxH,AAAIiM,AAAYvE,AAAM,AAAA/H,AAAIoM;AAAJ,AAAA,AAAApM;AAAAA;;AAAUqM;;;;AAC/C,AAAAO,AAAW9E;AAAX+E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmF9E,AACA0E,AAGAK,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/J,AAAA,AAAA+J,AAAA,AAAA,AAAA,AAAA,AAAA9J,AAAAC,AAAA6J,AAAAA;AAAAA,AAAuBE;AAAvB,AAAApM,AAAAkM,AAAA,AAAaC;AAAb,AACE,AAAME,AAAO,AAAA,AAACxL,AAAiBtB;AAA/B,AACE,AAAI,AAAC8M,AAAAA,AAAAA,AAAOD,AAAAA;AACV,AAACzE,AAAapI,AAAI0H,AAAMmF;;AACxB,AAAC5E,AAAejI,AAAIiM,AAAYvE,AAAMkF;;;AAC1C,AAAA,AAAA,AAAA,AAAA,AAACrO,AACyC2N,AACAU;;AAZ/H,AAAA,AAAAL,AAAAC,AAAAD,AAAAC,AAACL,AAAAA,AAAAA;;AANH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;AAhFJ;AAqGE,AAAAY,AAAsCtO;AAAtCsO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnK,AAAA,AAAAmK,AAAA,AAAA,AAAA,AAAA,AAAAlK,AAAAC,AAAAiK,AAAAA;AAAA,AAAAtM,AAAAsM,AAAA,AAAcC;AAAd,AAAAvM,AAAAsM,AAAA,AAAkBE;AAAlB,AAAAxM,AAAAsM,AAAA,AAAyBG;AAAzB,AAAAzM,AAAAsM,AAAA,AAA8B1E;AAA9B,AACE,AACE2E;AACA,AAACG,AAAeH;;AAFlB,AAIEC;AACA,AAACE,AAAe,AAACtG,AAAQoG;;AAL3B,AAOEC;AACA,AAACE,AAAgBF;;AARnB,AAUE7E;AACA,AAACgF,AAAiBhF;;AAXpB;;;;;;;AAtGJ;AAoHE,AAAA,AAAA,AAAA,AAAA,AAAC9J;;;;AAED,AAAAM,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA6BP;AAA7B,AAAA,AAAA;;;;AAGP,AAAA,AAAM8O,AAASC;AAAf,AAEK,AACE,AAAA,AAAA,AAACC;;AAED,AAAA,AAAAtN,AAAWrC;AAAX;;AAAA,AACE,AAAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AAEA,AAAA,AAACkL,AAAOpM;;AAER,AAACkJ;;;AAEV;;;AAAA,AAAM0G,AAEHzN;AAFH,AAIK,AAAM,AAAA0N,AAAK,AAAA/N,AAAIgO;AAAJ,AAAA,AAAAhO;AAAAA;;AAAexC;;;AAApB,AAAA,AAAAuQ;AAA6B,AAAA,AAAChE,AAAgBvM;;AAA9CuQ;;;AAAN,AACE,AAAME,AAAW,AAAClN,AAAQV;AACpB6N,AAAW,AAACxN,AAAWL;AACvBqD,AAAW,AAACvC,AAAcd;AAFhC,AAGE,AAAC4B,AAAM3D,AAAM6P,AAAMzK,AAASrD;;AAC5B,AAAA,AAAAE,AAACuB,AAAsBzB,AAAK6N;;AAC5B,AAACjM,AAAMiM,AAAOC,AAAM5P,AAAamF;;AACjC,AAAA,AAAA,AAAA,AAAA,AAAC9E,AAA8CL,AAAqCmF,AACA,AAACzC,AAAOZ,AACR,AAACuJ,AAAQ,AAAA,AAAAwE,AAACtE;AAAD,AAAO,AAAA,AAAAsE,AAACrE;AAFrG,AAAA,AAAAxJ,AAEqHyJ,AAAK,AAACC,AAAKgE,AAC3CC;;AACrF,AAAA,AAAAG,AAAAC,AAAAC,AAAAC,AAACC,AAAUP,AAAOxK;AAAlB,AAA4B,AAAA6K,AAAAC,AAACjL,AAAYlD;;;AAX7C;;;AAaL;;;;;;AAAA,AAAAqO,AAAAC,AAAMG,AAKHzO;AALH,AAAA,AAAAuO,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3L,AAAA,AAAA2L,AAAA,AAAA,AAAA,AAAA,AAAA1L,AAAAC,AAAAyL,AAAAA;AAAA,AAAA9N,AAAA8N,AAAA,AAMWvN;AANX,AAAAP,AAAA8N,AAAA,AAMqBnH;AANrB,AAAA3G,AAAA8N,AAAA,AAMyB7M;AANzB,AAAAjB,AAAA8N,AAAA,AAM+BnN;AAN/BoN,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5L,AAAA,AAAA4L,AAAA,AAAA,AAAA,AAAA,AAAA3L,AAAAC,AAAA0L,AAAAA;AAAA,AAAA/N,AAAA+N,AAAA,AAOW9G;AAPX,AAAAjH,AAAA+N,AAAA,AAOiBrN;AAPjB,AAAAV,AAAA+N,AAAA,AAOoBE;AAPpB,AAAAjO,AAAA+N,AAAA,AAOoCG;AAPpC,AAAAlO,AAAA+N,AAAA,AAO8CI;AAP9C,AASK,AAAMC,AAAe,AAAC9N,AAAmBC;AACnC8N,AAAe,AAACtN,AAAmBxB;AACnCmB,AAAe,AAAA4N,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkErH,AACA,AAAAzC,AACA9D,AACAuN,AACAI,AAEA1N;AANlE2N,AAAA,AAAAA,AAOEF,AAAe,AAAAE,AAAA,AAAC3M,AAAiByM;AAPnC,AAAA,AAQEzH;AAAI,AAAA2H,AAAA,AAAC3M,AAAiBgF;;AARxB2H;;;AASf1L,AAAe,AAAC9C,AAASP;AAX/B,AAYE,AAAA,AAAA,AAAA,AAACzB,AAA4DL,AAA0BmF,AACAlC","names":["js/goog.define","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.inspect","js/com.fulcrologic.fulcro.inspect.inspect-client","js/com.fulcrologic.fulcro.inspect.inspect-client.run-picker","com.fulcrologic.fulcro.inspect.inspect-client/run-picker","cljs.core.atom","js/com.fulcrologic.fulcro.inspect.inspect-client.started?*","com.fulcrologic.fulcro.inspect.inspect-client/started?*","js/com.fulcrologic.fulcro.inspect.inspect-client.tools-app*","com.fulcrologic.fulcro.inspect.inspect-client/tools-app*","js/com.fulcrologic.fulcro.inspect.inspect-client.apps*","com.fulcrologic.fulcro.inspect.inspect-client/apps*","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid-key","js/com.fulcrologic.fulcro.inspect.inspect-client.send-ch","com.fulcrologic.fulcro.inspect.inspect-client/send-ch","cljs.core.async.chan","cljs.core.async/dropping-buffer","com.fulcrologic.fulcro.inspect.inspect-client/post-message","type","data","e55276","cljs.core.async.put_BANG_","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.inspect.inspect-client/cljs?","env","cljs.core/boolean","var_args","G__55283","com.fulcrologic.fulcro.inspect.inspect-client/isoget","js/Error","obj","k","com.fulcrologic.fulcro.inspect.inspect_client.isoget","default","or__4126__auto__","goog.object/get","G__55289","cljs.core/name","com.fulcrologic.fulcro.inspect.inspect-client/app-state","app","G__55290","cljs.core/deref","com.fulcrologic.fulcro.inspect.inspect-client/runtime-atom","G__55291","com.fulcrologic.fulcro.inspect.inspect-client/state-atom","G__55292","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","G__55294","cljs.core.get","com.fulcrologic.fulcro.inspect.inspect-client/remotes","G__55296","com.fulcrologic.fulcro.inspect.inspect-client/app-id","G__55300","com.fulcrologic.fulcro.inspect.inspect-client/fulcro-app-id","com.fulcrologic.fulcro.inspect.inspect-client/get-component-name","component","G__55305","com.fulcrologic.fulcro.inspect.inspect-client/comp-transact!","tx","options","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.inspect.inspect-client/MAX_HISTORY_SIZE","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","com.fulcrologic.fulcro.inspect.inspect-client/record-history-entry!","state","now","cljs.core.swap_BANG_","runtime","history","pruned-history","cljs.core/count","cljs.core.subvec","new-history","cljs.core.conj","cljs.core.assoc","com.fulcrologic.fulcro.inspect.inspect-client/get-history-entry","id","entry","cljs.core/first","cljs.core.filter","p__55312","map__55313","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","entry-id","cljs.core._EQ_","cljs.core/seq","com.fulcrologic.fulcro.inspect.inspect-client/db-changed!","old-state","new-state","app-uuid","state-id","com.fulcrologic.fulcro.inspect.inspect-client/event-data","event","G__55318","goog.object/getValueByKeys","com.fulcrologic.fulcro.inspect.transit/read","com.fulcrologic.fulcro.inspect.inspect-client/start-send-message-loop","c__53396__auto__","cljs.core.async.impl.dispatch/run","f__53397__auto__","switch__53341__auto__","state_55351","state_val_55352","statearr-55353","cljs.core.async.impl.ioc-helpers/take!","inst_55348","cljs.core.async.impl.ioc-helpers/return-chan","inst_55325","statearr-55355","statearr-55357","statearr-55358","inst_55330","cljs.core.nth","inst_55331","inst_55332","inst_55333","inst_55334","js/Date","inst_55335","inst_55336","cljs.core/PersistentHashMap","inst_55337","inst_55339","inst_55340","inst_55341","inst_55342","statearr-55359","statearr-55360","statearr-55361","inst_55346","statearr-55362","statearr-55363","state-machine__53342__auto__","ret-value__53343__auto__","result__53344__auto__","cljs.core/keyword-identical?","ex__53345__auto__","e55367","statearr-55368","statearr-55369","state__53398__auto__","statearr-55371","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","com.fulcrologic.fulcro.inspect.transit/write","com.fulcrologic.fulcro.inspect.inspect-client/listen-local-messages","G__55374","com.fulcrologic.fulcro.inspect.inspect-client/handle-devtool-message","G__55380","com.fulcrologic.fulcro.inspect.inspect-client/transact-inspector!","ref","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","cljs.core/dissoc","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","remote","tx-id","txn","start","cljs.core.sequence","cljs.core.concat","cljs.core/List","com.fulcrologic.fulcro.inspect.inspect_client.transact_inspector_BANG_","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","response","finished","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","error","p__55451","map__55452","message","G__55454","cljs.core/Keyword","seq__55455","chunk__55456","count__55457","i__55458","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","cljs.core/vals","remote-names","cljs.core.sort_by","p1__55449#","cljs.core.juxt","cljs.core.not_EQ_","cljs.core/str","cljs.core/keys","map__55471","target-state","temp__5733__auto__","render!","cljs.core/reset!","G__55478","G__55479","map__55481","based-on","b2__46471__auto__","map__55484","value","prior-state","diff","com.fulcrologic.fulcro.inspect.diff/diff","G__55486","cljs.core/not","map__55489","tx-ref","fexpr__55508","e55509","js/alert","_e","map__55518","G__55521","historical-state","historical-app","G__55524","G__55525","map__55557","G__55559","G__55560","G__55561","map__55564","query","mutation","remote-name","msg-id","transmit!","ast","edn-query-language.core/query->ast","cljs.core/random-uuid","G__55574","G__55575","cljs.core/identity","p__55576","map__55577","body","result","error?","map__55584","log","log-js","warn","js/console.log","js/console.warn","js/console.error","com.fulcrologic.fulcro.inspect.inspect-client/install","_","js/document.documentElement.setAttribute","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","and__4115__auto__","js/goog.DEBUG","networking","state*","cljs.core/assoc","p1__55590#","p1__55593#","p2__55594#","p3__55591#","p4__55592#","cljs.core/add-watch","p__55602","p__55603","map__55604","map__55605","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","state-id-before","db-before","db-after","component-name","current-id","G__55613"],"sourcesContent":["(ns ^:no-doc com.fulcrologic.fulcro.inspect.inspect-client\n  \"Functions used by Fulcro to talk to Fulcro Inspect.\"\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.inspect.inspect-client))\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    #?@(:cljs [[goog.object :as gobj]\n               [com.fulcrologic.fulcro.inspect.diff :as diff]\n               [com.fulcrologic.fulcro.inspect.transit :as encode]\n               [cljs.core.async :as async]])\n    [clojure.data :as data]\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]\n    [taoensso.encore :as enc]))\n\n#?(:cljs (goog-define INSPECT false))\n\n;; This is here so that you can include the element picker without killing React Native\n(defonce run-picker (atom nil))\n\n(declare handle-devtool-message)\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defonce send-ch #?(:clj nil :cljs (async/chan (async/dropping-buffer 50000))))\n(defn post-message [type data]\n  #?(:cljs (try\n             (async/put! send-ch [type data])\n             (catch :default e\n               (log/error \"Cannot send to inspect. Channel closed.\")))))\n\n(defn cljs?\n  \"Returns true when env is a cljs macro &env\"\n  [env]\n  (boolean (:ns env)))\n\n(defn- isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers so we don't have to include other nses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn app-state [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref))\n(defn runtime-atom [app] (some-> app :com.fulcrologic.fulcro.application/runtime-atom))\n(defn state-atom [app] (some-> app :com.fulcrologic.fulcro.application/state-atom))\n(defn app-uuid [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref (get app-uuid-key)))\n(defn remotes [app] (some-> (runtime-atom app) deref :com.fulcrologic.fulcro.application/remotes))\n(defn app-id [app] (some-> (app-state app) :fulcro.inspect.core/app-id))\n(defn fulcro-app-id [app] (:com.fulcrologic.fulcro.application/id app))\n(defn get-component-name [component] (when component (some-> (isoget component :fulcro$options) :displayName)))\n(defn comp-transact! [app tx options]\n  (let [tx! (ah/app-algorithm app :tx!)]\n    (tx! app tx options)))\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn current-history-id\n  \"Current time in the recorded history of states\"\n  [app]\n  (or (-> app (runtime-atom) deref ::time) 1))\n\n(defn record-history-entry!\n  \"Record a state change in this history. Returns the ID of the newly recorded entry.\"\n  [app state]\n  (let [now (current-history-id app)]\n    (swap! (runtime-atom app)\n      (fn [runtime]\n        (let [history        (::history runtime)\n              pruned-history (cond\n                               (nil? history) []\n                               (> (count history) MAX_HISTORY_SIZE) (subvec history 1)\n                               :else history)\n              new-history    (conj pruned-history {:id    now\n                                                   :value state})]\n          (assoc runtime\n            ::time (inc now)\n            ::history new-history))))\n    now))\n\n(defn get-history-entry [app id]\n  (let [history (-> app runtime-atom deref ::history)\n        entry   (first (filter\n                         (fn [{entry-id :id}] (= id entry-id))\n                         (seq history)))]\n    entry))\n\n\n(defn db-changed!\n  \"Notify Inspect that the database changed\"\n  [app old-state new-state]\n  #?(:cljs\n     (let [app-uuid (app-uuid app)\n           state-id (record-history-entry! app new-state)]\n       (post-message :fulcro.inspect.client/db-changed! {app-uuid-key                    app-uuid\n                                                         :fulcro.inspect.client/state-id state-id}))))\n\n(defn event-data [event]\n  #?(:cljs (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read)))\n\n(defn start-send-message-loop []\n  #?(:cljs\n     (async/go-loop []\n       (when-let [[type data] (async/<! send-ch)]\n         (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n         (recur)))))\n\n(defn listen-local-messages []\n  #?(:cljs\n     (.addEventListener js/window \"message\"\n       (fn [^js event]\n         (cond\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n           (handle-devtool-message (event-data event))\n\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n           (start-send-message-loop)))\n       false)))\n\n(defn transact-inspector!\n  ([tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx tx}))\n  ([ref tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx-ref ref :fulcro.inspect.client/tx tx})))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message :fulcro.inspect.client/dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message :fulcro.inspect.client/set-active-app {app-uuid-key app-uuid}))\n\n#_(defn inspect-app [app]\n    #?(:cljs\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (random-uuid)]\n\n         (swap! apps* assoc app-uuid app)\n         #_(update-state-history app @state*)\n\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*\n                                                        :fulcro.inspect.client/state-hash    (hash @state*)})\n\n         (add-watch state* app-uuid #(db-update app app-uuid %3 %4))\n\n         (swap! state* assoc app-uuid-key app-uuid)\n\n         app)))\n\n(defn send-started! [app remote tx-id txn]\n  #?(:cljs\n     (let [start    (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                      :fulcro.inspect.ui.network/request-id         tx-id\n                                                      :fulcro.inspect.ui.network/request-started-at start\n                                                      :fulcro.inspect.ui.network/request-edn        txn})]))))\n\n(defn send-finished! [app remote tx-id response]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/response-edn        response})]))))\n\n(defn send-failed! [app tx-id error]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/error               error})]))))\n\n;; LANDMARK: Incoming message handler for Inspect\n(defn handle-devtool-message [{:keys [type data] :as message}]\n  (log/debug \"Devtools Message received\" message)\n  #?(:cljs\n     (case type\n       :fulcro.inspect.client/request-page-apps\n       (do\n         (doseq [app (vals @apps*)]\n           (let [state        (app-state app)\n                 state-id     (record-history-entry! app state)\n                 remote-names (remotes app)]\n             (post-message :fulcro.inspect.client/init-app\n               {app-uuid-key                                (app-uuid app)\n                :fulcro.inspect.core/app-id                 (app-id app)\n                :fulcro.inspect.client/remotes              (sort-by (juxt #(not= :remote %) str)\n                                                              (keys remote-names))\n                :fulcro.inspect.client/initial-history-step {:id    state-id\n                                                             :value state}}))))\n\n       :fulcro.inspect.client/reset-app-state\n       (let [{:keys                     [target-state]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (let [render! (ah/app-algorithm app :schedule-render!)]\n             (if target-state\n               (let [target-state (assoc target-state app-uuid-key app-uuid)]\n                 (reset! (state-atom app) target-state)))\n             (render! app {:force-root? true}))\n           (log/info \"Reset app on invalid uuid\" app-uuid)))\n\n       ;; Remote tool has asked for the history step at id, and can accept a diff from the given closest entry\n       :fulcro.inspect.client/fetch-history-step\n       (let [{:keys                     [id based-on]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (enc/when-let [app (get @apps* app-uuid)\n                        {:keys [value]} (get-history-entry app id)]\n           (let [prior-state (get-history-entry app based-on)\n                 diff        (when prior-state (diff/diff prior-state value))]\n             (post-message :fulcro.inspect.client/history-entry\n               (cond-> {app-uuid-key                  app-uuid\n                        :fulcro.inspect.core/state-id id}\n                 diff (assoc :fulcro.inspect.client/diff diff\n                             :based-on based-on)\n                 (not diff) (assoc :fulcro.inspect.client/state value))))))\n\n\n       :fulcro.inspect.client/transact\n       (let [{:keys                     [tx tx-ref]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (if tx-ref\n             (comp-transact! app tx {:ref tx-ref})\n             (comp-transact! app tx {}))\n           (log/error \"Transact on invalid uuid\" app-uuid)))\n\n       :fulcro.inspect.client/pick-element\n       (if @run-picker\n         (@run-picker data)\n         (try\n           (js/alert \"Element picker not installed. Add it to your preload.\")\n           (catch :default _e\n             (log/error \"Element picker not installed in app. You must add it to you preloads.\"))))\n\n       :fulcro.inspect.client/show-dom-preview\n       (encore/if-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                       app              (some-> @apps* (get app-uuid))\n                       historical-state (get-history-entry app (:fulcro.inspect.client/state-id data))\n                       historical-app   (assoc app :com.fulcrologic.fulcro.application/state-atom (atom historical-state))\n                       render!          (ah/app-algorithm app :render!)]\n         (do\n           (render! historical-app {:force-root? true}))\n         (log/error \"Unable to find app/state for preview.\"))\n\n       :fulcro.inspect.client/hide-dom-preview\n       (encore/when-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                         app     (some-> @apps* (get app-uuid))\n                         render! (ah/app-algorithm app :render!)]\n         (render! app {:force-root? true}))\n\n       :fulcro.inspect.client/network-request\n       (let [{:keys                          [query mutation]\n              remote-name                    :fulcro.inspect.client/remote\n              :fulcro.inspect.ui-parser/keys [msg-id]\n              :fulcro.inspect.core/keys      [app-uuid]} data]\n         (encore/when-let [app       (get @apps* app-uuid)\n                           remote    (get (remotes app) remote-name)\n                           transmit! (-> remote :transmit!)\n                           ast       (eql/query->ast (or query mutation))\n                           tx-id     (random-uuid)]\n           (send-started! app remote-name tx-id (or query mutation))\n           (transmit! remote {:com.fulcrologic.fulcro.algorithms.tx-processing/id             tx-id\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/ast            ast\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/idx            0\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/options        {}\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler identity\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler (fn [{:keys [body] :as result}]\n                                                                                                (let [error? (ah/app-algorithm app :remote-error?)]\n                                                                                                  (if (error? result)\n                                                                                                    (send-failed! app tx-id result)\n                                                                                                    (send-finished! app remote-name tx-id body)))\n                                                                                                (post-message :fulcro.inspect.client/message-response\n                                                                                                  {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                                                   :fulcro.inspect.ui-parser/msg-response body}))})))\n\n       :fulcro.inspect.client/console-log\n       (let [{:keys [log log-js warn error]} data]\n         (cond\n           log\n           (js/console.log log)\n\n           log-js\n           (js/console.log (clj->js log-js))\n\n           warn\n           (js/console.warn warn)\n\n           error\n           (js/console.error error)))\n\n       :fulcro.inspect.client/check-client-version\n       (post-message :fulcro.inspect.client/client-version {:version \"3.0.0\"})\n\n       (log/debug \"Unknown message\" type))))\n\n\n(defn install [_]\n  #?(:cljs\n     (do\n       (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n       (when-not @started?*\n         (log/info \"Installing Fulcro 3.x Inspect\" {})\n\n         (reset! started?* true)\n\n         (listen-local-messages)))))\n\n(defn app-started!\n  \"Register the application with Inspect, if it is available.\"\n  [app]\n  #?(:cljs\n     (when (and (or goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (fulcro-app-id app)]\n         (swap! apps* assoc app-uuid app)\n         (record-history-entry! app @state*)\n         (swap! state* assoc app-uuid-key app-uuid)\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*})\n         (add-watch state* app-uuid #(db-changed! app %3 %4))))))\n\n(defn optimistic-action-finished!\n  \"Notify inspect that a transaction finished.\n\n   app - The app\n   env - The mutation env that completed.\"\n  [app\n   {:keys [component ref state com.fulcrologic.fulcro.algorithms.tx-processing/options]}\n   {:keys [tx-id tx state-id-before db-before db-after]}]\n  #?(:cljs\n     (let [component-name (get-component-name component)\n           current-id     (current-history-id app)\n           tx             (cond-> {:fulcro.inspect.ui.transactions/tx-id                    tx-id\n                                   :fulcro.history/client-time                              (js/Date.)\n                                   :fulcro.history/tx                                       tx\n                                   :fulcro.history/db-before-id                             state-id-before\n                                   :fulcro.history/db-after-id                              current-id\n                                   :fulcro.history/network-sends                            []\n                                   :com.fulcrologic.fulcro.algorithms.tx-processing/options options}\n                            component-name (assoc :component component-name)\n                            ref (assoc :ident-ref ref))\n           app-uuid       (app-uuid app)]\n       (post-message :fulcro.inspect.client/new-client-transaction {app-uuid-key              app-uuid\n                                                                    :fulcro.inspect.client/tx tx}))))\n\n(defmacro ido\n  \"Wrap a block of code that will only run if Inspect is enabled.  Code in these blocks will also be removed via\n  DCE in Closure.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [& body]\n  (when (cljs? &env)\n    `(when (and (or ~'goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (try\n         ~@body\n         (catch :default ~'e)))))\n\n(defmacro ilet\n  \"Like `clojure.core/let`, but elides the block if Inspect isn't enabled.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [bindings & body]\n  (when (cljs? &env)\n    `(ido\n       (let ~bindings\n         ~@body))))\n"]}